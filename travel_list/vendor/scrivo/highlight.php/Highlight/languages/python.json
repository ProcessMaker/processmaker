{
    "aliases": [
        "py",
        "gyp",
        "ipython"
    ],
    "keywords": {
        "keyword": "and elif is global as in if from raise for except finally print import pass return exec else break not with class assert yield try while continue del or def lambda async await nonlocal|10",
        "built_in": "Ellipsis NotImplemented",
        "literal": "False None True"
    },
    "illegal": "(<\\\/|->|\\?)|=>",
    "contains": [
        {
            "className": "meta",
            "begin": "^(>>>|\\.\\.\\.) "
        },
        {
            "className": "number",
            "relevance": 0,
            "variants": [
                {
                    "begin": "\\b(0b[01]+)[lLjJ]?"
                },
                {
                    "begin": "\\b(0o[0-7]+)[lLjJ]?"
                },
                {
                    "begin": "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)[lLjJ]?"
                }
            ]
        },
        {
            "beginKeywords": "if",
            "relevance": 0
        },
        {
            "className": "string",
            "contains": [
                {
                    "begin": "\\\\[\\s\\S]",
                    "relevance": 0
                }
            ],
            "variants": [
                {
                    "begin": "(u|b)?r?'''",
                    "end": "'''",
                    "contains": [
                        {
                            "$ref": "#contains.3.contains.0"
                        },
                        {
                            "$ref": "#contains.0"
                        }
                    ],
                    "relevance": 10
                },
                {
                    "begin": "(u|b)?r?\"\"\"",
                    "end": "\"\"\"",
                    "contains": [
                        {
                            "$ref": "#contains.3.contains.0"
                        },
                        {
                            "$ref": "#contains.0"
                        }
                    ],
                    "relevance": 10
                },
                {
                    "begin": "(fr|rf|f)'''",
                    "end": "'''",
                    "contains": [
                        {
                            "$ref": "#contains.3.contains.0"
                        },
                        {
                            "$ref": "#contains.0"
                        },
                        {
                            "begin": "\\{\\{",
                            "relevance": 0
                        },
                        {
                            "className": "subst",
                            "begin": "\\{",
                            "end": "\\}",
                            "keywords": {
                                "$ref": "#keywords"
                            },
                            "illegal": "#",
                            "contains": [
                                {
                                    "$ref": "#contains.3"
                                },
                                {
                                    "$ref": "#contains.1"
                                },
                                {
                                    "$ref": "#contains.0"
                                }
                            ]
                        }
                    ]
                },
                {
                    "begin": "(fr|rf|f)\"\"\"",
                    "end": "\"\"\"",
                    "contains": [
                        {
                            "$ref": "#contains.3.contains.0"
                        },
                        {
                            "$ref": "#contains.0"
                        },
                        {
                            "$ref": "#contains.3.variants.2.contains.2"
                        },
                        {
                            "$ref": "#contains.3.variants.2.contains.3"
                        }
                    ]
                },
                {
                    "begin": "(u|r|ur)'",
                    "end": "'",
                    "relevance": 10
                },
                {
                    "begin": "(u|r|ur)\"",
                    "end": "\"",
                    "relevance": 10
                },
                {
                    "begin": "(b|br)'",
                    "end": "'"
                },
                {
                    "begin": "(b|br)\"",
                    "end": "\""
                },
                {
                    "begin": "(fr|rf|f)'",
                    "end": "'",
                    "contains": [
                        {
                            "$ref": "#contains.3.contains.0"
                        },
                        {
                            "$ref": "#contains.3.variants.2.contains.2"
                        },
                        {
                            "$ref": "#contains.3.variants.2.contains.3"
                        }
                    ]
                },
                {
                    "begin": "(fr|rf|f)\"",
                    "end": "\"",
                    "contains": [
                        {
                            "$ref": "#contains.3.contains.0"
                        },
                        {
                            "$ref": "#contains.3.variants.2.contains.2"
                        },
                        {
                            "$ref": "#contains.3.variants.2.contains.3"
                        }
                    ]
                },
                {
                    "className": "string",
                    "begin": "'",
                    "end": "'",
                    "illegal": "\\n",
                    "contains": [
                        {
                            "$ref": "#contains.3.contains.0"
                        }
                    ]
                },
                {
                    "className": "string",
                    "begin": "\"",
                    "end": "\"",
                    "illegal": "\\n",
                    "contains": [
                        {
                            "$ref": "#contains.3.contains.0"
                        }
                    ]
                }
            ]
        },
        {
            "className": "comment",
            "begin": "#",
            "end": "$",
            "contains": [
                {
                    "begin": "\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b"
                },
                {
                    "className": "doctag",
                    "begin": "(?:TODO|FIXME|NOTE|BUG|XXX):",
                    "relevance": 0
                }
            ]
        },
        {
            "variants": [
                {
                    "className": "function",
                    "beginKeywords": "def"
                },
                {
                    "className": "class",
                    "beginKeywords": "class"
                }
            ],
            "end": ":",
            "illegal": "[${=;\\n,]",
            "contains": [
                {
                    "className": "title",
                    "begin": "[a-zA-Z_]\\w*",
                    "relevance": 0
                },
                {
                    "className": "params",
                    "begin": "\\(",
                    "end": "\\)",
                    "contains": [
                        "self",
                        {
                            "$ref": "#contains.0"
                        },
                        {
                            "$ref": "#contains.1"
                        },
                        {
                            "$ref": "#contains.3"
                        },
                        {
                            "$ref": "#contains.4"
                        }
                    ]
                },
                {
                    "begin": "->",
                    "endsWithParent": true,
                    "keywords": "None"
                }
            ]
        },
        {
            "className": "meta",
            "begin": "^[\\t ]*@",
            "end": "$"
        },
        {
            "begin": "\\b(print|exec)\\("
        }
    ]
}
