{"version":3,"file":"static/chunks/8468-37560c9c791f3769.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.esm.js","webpack://_N_E/./node_modules/@floating-ui/react/dist/floating-ui.react.esm.js","webpack://_N_E/./node_modules/@mantine/core/esm/Floating/FloatingArrow/get-arrow-position-styles.js","webpack://_N_E/./node_modules/@mantine/core/esm/Floating/FloatingArrow/FloatingArrow.js","webpack://_N_E/./node_modules/@mantine/core/esm/Floating/get-floating-position/get-floating-position.js","webpack://_N_E/./node_modules/@mantine/core/esm/Floating/use-floating-auto-update.js","webpack://_N_E/./node_modules/@mantine/utils/esm/pack-sx/pack-sx.js","webpack://_N_E/./node_modules/@floating-ui/core/dist/floating-ui.core.mjs","webpack://_N_E/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs","webpack://_N_E/./node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs","webpack://_N_E/./node_modules/@floating-ui/utils/dom/dist/floating-ui.utils.dom.mjs","webpack://_N_E/<anon>"],"sourcesContent":["import { arrow as arrow$1, computePosition } from '@floating-ui/dom';\nexport { autoPlacement, autoUpdate, computePosition, detectOverflow, flip, getOverflowAncestors, hide, inline, limitShift, offset, platform, shift, size } from '@floating-ui/dom';\nimport * as React from 'react';\nimport { useLayoutEffect, useEffect } from 'react';\nimport * as ReactDOM from 'react-dom';\n\n/**\n * A data provider that provides data to position an inner element of the\n * floating element (usually a triangle or caret) so that it is centered to the\n * reference element.\n * This wraps the core `arrow` middleware to allow React refs as the element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => {\n  const {\n    element,\n    padding\n  } = options;\n  function isRef(value) {\n    return Object.prototype.hasOwnProperty.call(value, 'current');\n  }\n  return {\n    name: 'arrow',\n    options,\n    fn(args) {\n      if (isRef(element)) {\n        if (element.current != null) {\n          return arrow$1({\n            element: element.current,\n            padding\n          }).fn(args);\n        }\n        return {};\n      } else if (element) {\n        return arrow$1({\n          element,\n          padding\n        }).fn(args);\n      }\n      return {};\n    }\n  };\n};\n\nvar index = typeof document !== 'undefined' ? useLayoutEffect : useEffect;\n\n// Fork of `fast-deep-equal` that only does the comparisons we need and compares\n// functions\nfunction deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (typeof a === 'function' && a.toString() === b.toString()) {\n    return true;\n  }\n  let length, i, keys;\n  if (a && b && typeof a == 'object') {\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;) {\n        if (!deepEqual(a[i], b[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) {\n      return false;\n    }\n    for (i = length; i-- !== 0;) {\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {\n        return false;\n      }\n    }\n    for (i = length; i-- !== 0;) {\n      const key = keys[i];\n      if (key === '_owner' && a.$$typeof) {\n        continue;\n      }\n      if (!deepEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return a !== a && b !== b;\n}\n\nfunction useLatestRef(value) {\n  const ref = React.useRef(value);\n  index(() => {\n    ref.current = value;\n  });\n  return ref;\n}\n\n/**\n * Provides data to position a floating element.\n * @see https://floating-ui.com/docs/react\n */\nfunction useFloating(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform,\n    whileElementsMounted,\n    open\n  } = options;\n  const [data, setData] = React.useState({\n    x: null,\n    y: null,\n    strategy,\n    placement,\n    middlewareData: {},\n    isPositioned: false\n  });\n  const [latestMiddleware, setLatestMiddleware] = React.useState(middleware);\n  if (!deepEqual(latestMiddleware, middleware)) {\n    setLatestMiddleware(middleware);\n  }\n  const referenceRef = React.useRef(null);\n  const floatingRef = React.useRef(null);\n  const dataRef = React.useRef(data);\n  const whileElementsMountedRef = useLatestRef(whileElementsMounted);\n  const platformRef = useLatestRef(platform);\n  const [reference, _setReference] = React.useState(null);\n  const [floating, _setFloating] = React.useState(null);\n  const setReference = React.useCallback(node => {\n    if (referenceRef.current !== node) {\n      referenceRef.current = node;\n      _setReference(node);\n    }\n  }, []);\n  const setFloating = React.useCallback(node => {\n    if (floatingRef.current !== node) {\n      floatingRef.current = node;\n      _setFloating(node);\n    }\n  }, []);\n  const update = React.useCallback(() => {\n    if (!referenceRef.current || !floatingRef.current) {\n      return;\n    }\n    const config = {\n      placement,\n      strategy,\n      middleware: latestMiddleware\n    };\n    if (platformRef.current) {\n      config.platform = platformRef.current;\n    }\n    computePosition(referenceRef.current, floatingRef.current, config).then(data => {\n      const fullData = {\n        ...data,\n        isPositioned: true\n      };\n      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {\n        dataRef.current = fullData;\n        ReactDOM.flushSync(() => {\n          setData(fullData);\n        });\n      }\n    });\n  }, [latestMiddleware, placement, strategy, platformRef]);\n  index(() => {\n    if (open === false && dataRef.current.isPositioned) {\n      dataRef.current.isPositioned = false;\n      setData(data => ({\n        ...data,\n        isPositioned: false\n      }));\n    }\n  }, [open]);\n  const isMountedRef = React.useRef(false);\n  index(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  index(() => {\n    if (reference && floating) {\n      if (whileElementsMountedRef.current) {\n        return whileElementsMountedRef.current(reference, floating, update);\n      } else {\n        update();\n      }\n    }\n  }, [reference, floating, update, whileElementsMountedRef]);\n  const refs = React.useMemo(() => ({\n    reference: referenceRef,\n    floating: floatingRef,\n    setReference,\n    setFloating\n  }), [setReference, setFloating]);\n  const elements = React.useMemo(() => ({\n    reference,\n    floating\n  }), [reference, floating]);\n  return React.useMemo(() => ({\n    ...data,\n    update,\n    refs,\n    elements,\n    reference: setReference,\n    floating: setFloating\n  }), [data, update, refs, elements, setReference, setFloating]);\n}\n\nexport { arrow, useFloating };\n","import * as React from 'react';\nimport { useLayoutEffect, useEffect, useRef } from 'react';\nimport { hideOthers } from 'aria-hidden';\nimport { tabbable } from 'tabbable';\nimport { createPortal, flushSync } from 'react-dom';\nimport { getOverflowAncestors, offset, detectOverflow, useFloating as useFloating$1 } from '@floating-ui/react-dom';\nexport { arrow, autoPlacement, autoUpdate, computePosition, detectOverflow, flip, getOverflowAncestors, hide, inline, limitShift, offset, platform, shift, size } from '@floating-ui/react-dom';\n\nvar index = typeof document !== 'undefined' ? useLayoutEffect : useEffect;\n\nlet serverHandoffComplete = false;\nlet count = 0;\nconst genId = () => \"floating-ui-\" + count++;\nfunction useFloatingId() {\n  const [id, setId] = React.useState(() => serverHandoffComplete ? genId() : undefined);\n  index(() => {\n    if (id == null) {\n      setId(genId());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  React.useEffect(() => {\n    if (!serverHandoffComplete) {\n      serverHandoffComplete = true;\n    }\n  }, []);\n  return id;\n}\n\n// `toString()` prevents bundlers from trying to `import { useId } from 'react'`\nconst useReactId = React[/*#__PURE__*/'useId'.toString()];\n\n/**\n * Uses React 18's built-in `useId()` when available, or falls back to a\n * slightly less performant (requiring a double render) implementation for\n * earlier React versions.\n * @see https://floating-ui.com/docs/useId\n */\nconst useId = useReactId || useFloatingId;\n\nfunction createPubSub() {\n  const map = new Map();\n  return {\n    emit(event, data) {\n      var _map$get;\n      (_map$get = map.get(event)) == null ? void 0 : _map$get.forEach(handler => handler(data));\n    },\n    on(event, listener) {\n      map.set(event, [...(map.get(event) || []), listener]);\n    },\n    off(event, listener) {\n      map.set(event, (map.get(event) || []).filter(l => l !== listener));\n    }\n  };\n}\n\nconst FloatingNodeContext = /*#__PURE__*/React.createContext(null);\nconst FloatingTreeContext = /*#__PURE__*/React.createContext(null);\nconst useFloatingParentNodeId = () => {\n  var _React$useContext;\n  return ((_React$useContext = React.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;\n};\nconst useFloatingTree = () => React.useContext(FloatingTreeContext);\n\n/**\n * Registers a node into the floating tree, returning its id.\n */\nconst useFloatingNodeId = customParentId => {\n  const id = useId();\n  const tree = useFloatingTree();\n  const reactParentId = useFloatingParentNodeId();\n  const parentId = customParentId || reactParentId;\n  index(() => {\n    const node = {\n      id,\n      parentId\n    };\n    tree == null ? void 0 : tree.addNode(node);\n    return () => {\n      tree == null ? void 0 : tree.removeNode(node);\n    };\n  }, [tree, id, parentId]);\n  return id;\n};\n\n/**\n * Provides parent node context for nested floating elements.\n * @see https://floating-ui.com/docs/FloatingTree\n */\nconst FloatingNode = _ref => {\n  let {\n    children,\n    id\n  } = _ref;\n  const parentId = useFloatingParentNodeId();\n  return /*#__PURE__*/React.createElement(FloatingNodeContext.Provider, {\n    value: React.useMemo(() => ({\n      id,\n      parentId\n    }), [id, parentId])\n  }, children);\n};\n\n/**\n * Provides context for nested floating elements when they are not children of\n * each other on the DOM (i.e. portalled to a common node, rather than their\n * respective parent).\n * @see https://floating-ui.com/docs/FloatingTree\n */\nconst FloatingTree = _ref2 => {\n  let {\n    children\n  } = _ref2;\n  const nodesRef = React.useRef([]);\n  const addNode = React.useCallback(node => {\n    nodesRef.current = [...nodesRef.current, node];\n  }, []);\n  const removeNode = React.useCallback(node => {\n    nodesRef.current = nodesRef.current.filter(n => n !== node);\n  }, []);\n  const events = React.useState(() => createPubSub())[0];\n  return /*#__PURE__*/React.createElement(FloatingTreeContext.Provider, {\n    value: React.useMemo(() => ({\n      nodesRef,\n      addNode,\n      removeNode,\n      events\n    }), [nodesRef, addNode, removeNode, events])\n  }, children);\n};\n\nfunction getDocument(node) {\n  return (node == null ? void 0 : node.ownerDocument) || document;\n}\n\n// Avoid Chrome DevTools blue warning.\nfunction getPlatform() {\n  const uaData = navigator.userAgentData;\n  if (uaData != null && uaData.platform) {\n    return uaData.platform;\n  }\n  return navigator.platform;\n}\nfunction getUserAgent() {\n  const uaData = navigator.userAgentData;\n  if (uaData && Array.isArray(uaData.brands)) {\n    return uaData.brands.map(_ref => {\n      let {\n        brand,\n        version\n      } = _ref;\n      return brand + \"/\" + version;\n    }).join(' ');\n  }\n  return navigator.userAgent;\n}\n\nfunction getWindow(value) {\n  return getDocument(value).defaultView || window;\n}\nfunction isElement(value) {\n  return value ? value instanceof getWindow(value).Element : false;\n}\nfunction isHTMLElement(value) {\n  return value ? value instanceof getWindow(value).HTMLElement : false;\n}\nfunction isShadowRoot(node) {\n  // Browsers without `ShadowRoot` support\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  const OwnElement = getWindow(node).ShadowRoot;\n  return node instanceof OwnElement || node instanceof ShadowRoot;\n}\n\n// License: https://github.com/adobe/react-spectrum/blob/b35d5c02fe900badccd0cf1a8f23bb593419f238/packages/@react-aria/utils/src/isVirtualEvent.ts\nfunction isVirtualClick(event) {\n  if (event.mozInputSource === 0 && event.isTrusted) {\n    return true;\n  }\n  const androidRe = /Android/i;\n  if ((androidRe.test(getPlatform()) || androidRe.test(getUserAgent())) && event.pointerType) {\n    return event.type === 'click' && event.buttons === 1;\n  }\n  return event.detail === 0 && !event.pointerType;\n}\nfunction isVirtualPointerEvent(event) {\n  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType !== 'mouse' ||\n  // iOS VoiceOver returns 0.333• for width/height.\n  event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0;\n}\nfunction isSafari() {\n  // Chrome DevTools does not complain about navigator.vendor\n  return /apple/i.test(navigator.vendor);\n}\nfunction isMac() {\n  return getPlatform().toLowerCase().startsWith('mac') && !navigator.maxTouchPoints;\n}\nfunction isMouseLikePointerType(pointerType, strict) {\n  // On some Linux machines with Chromium, mouse inputs return a `pointerType`\n  // of \"pen\": https://github.com/floating-ui/floating-ui/issues/2015\n  const values = ['mouse', 'pen'];\n  if (!strict) {\n    values.push('', undefined);\n  }\n  return values.includes(pointerType);\n}\n\nfunction useLatestRef(value) {\n  const ref = useRef(value);\n  index(() => {\n    ref.current = value;\n  });\n  return ref;\n}\n\nconst safePolygonIdentifier = 'data-floating-ui-safe-polygon';\nfunction getDelay(value, prop, pointerType) {\n  if (pointerType && !isMouseLikePointerType(pointerType)) {\n    return 0;\n  }\n  if (typeof value === 'number') {\n    return value;\n  }\n  return value == null ? void 0 : value[prop];\n}\n/**\n * Opens the floating element while hovering over the reference element, like\n * CSS `:hover`.\n * @see https://floating-ui.com/docs/useHover\n */\nconst useHover = function (context, _temp) {\n  let {\n    enabled = true,\n    delay = 0,\n    handleClose = null,\n    mouseOnly = false,\n    restMs = 0,\n    move = true\n  } = _temp === void 0 ? {} : _temp;\n  const {\n    open,\n    onOpenChange,\n    dataRef,\n    events,\n    elements: {\n      domReference,\n      floating\n    },\n    refs\n  } = context;\n  const tree = useFloatingTree();\n  const parentId = useFloatingParentNodeId();\n  const handleCloseRef = useLatestRef(handleClose);\n  const delayRef = useLatestRef(delay);\n  const pointerTypeRef = React.useRef();\n  const timeoutRef = React.useRef();\n  const handlerRef = React.useRef();\n  const restTimeoutRef = React.useRef();\n  const blockMouseMoveRef = React.useRef(true);\n  const performedPointerEventsMutationRef = React.useRef(false);\n  const unbindMouseMoveRef = React.useRef(() => {});\n  const isHoverOpen = React.useCallback(() => {\n    var _dataRef$current$open;\n    const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;\n    return (type == null ? void 0 : type.includes('mouse')) && type !== 'mousedown';\n  }, [dataRef]);\n\n  // When dismissing before opening, clear the delay timeouts to cancel it\n  // from showing.\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    function onDismiss() {\n      clearTimeout(timeoutRef.current);\n      clearTimeout(restTimeoutRef.current);\n      blockMouseMoveRef.current = true;\n    }\n    events.on('dismiss', onDismiss);\n    return () => {\n      events.off('dismiss', onDismiss);\n    };\n  }, [enabled, events]);\n  React.useEffect(() => {\n    if (!enabled || !handleCloseRef.current || !open) {\n      return;\n    }\n    function onLeave() {\n      if (isHoverOpen()) {\n        onOpenChange(false);\n      }\n    }\n    const html = getDocument(floating).documentElement;\n    html.addEventListener('mouseleave', onLeave);\n    return () => {\n      html.removeEventListener('mouseleave', onLeave);\n    };\n  }, [floating, open, onOpenChange, enabled, handleCloseRef, dataRef, isHoverOpen]);\n  const closeWithDelay = React.useCallback(function (runElseBranch) {\n    if (runElseBranch === void 0) {\n      runElseBranch = true;\n    }\n    const closeDelay = getDelay(delayRef.current, 'close', pointerTypeRef.current);\n    if (closeDelay && !handlerRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = setTimeout(() => onOpenChange(false), closeDelay);\n    } else if (runElseBranch) {\n      clearTimeout(timeoutRef.current);\n      onOpenChange(false);\n    }\n  }, [delayRef, onOpenChange]);\n  const cleanupMouseMoveHandler = React.useCallback(() => {\n    unbindMouseMoveRef.current();\n    handlerRef.current = undefined;\n  }, []);\n  const clearPointerEvents = React.useCallback(() => {\n    if (performedPointerEventsMutationRef.current) {\n      const body = getDocument(refs.floating.current).body;\n      body.style.pointerEvents = '';\n      body.removeAttribute(safePolygonIdentifier);\n      performedPointerEventsMutationRef.current = false;\n    }\n  }, [refs]);\n\n  // Registering the mouse events on the reference directly to bypass React's\n  // delegation system. If the cursor was on a disabled element and then entered\n  // the reference (no gap), `mouseenter` doesn't fire in the delegation system.\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    function isClickLikeOpenEvent() {\n      return dataRef.current.openEvent ? ['click', 'mousedown'].includes(dataRef.current.openEvent.type) : false;\n    }\n    function onMouseEnter(event) {\n      clearTimeout(timeoutRef.current);\n      blockMouseMoveRef.current = false;\n      if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current) || restMs > 0 && getDelay(delayRef.current, 'open') === 0) {\n        return;\n      }\n      dataRef.current.openEvent = event;\n      const openDelay = getDelay(delayRef.current, 'open', pointerTypeRef.current);\n      if (openDelay) {\n        timeoutRef.current = setTimeout(() => {\n          onOpenChange(true);\n        }, openDelay);\n      } else {\n        onOpenChange(true);\n      }\n    }\n    function onMouseLeave(event) {\n      if (isClickLikeOpenEvent()) {\n        return;\n      }\n      unbindMouseMoveRef.current();\n      const doc = getDocument(floating);\n      clearTimeout(restTimeoutRef.current);\n      if (handleCloseRef.current) {\n        // Prevent clearing `onScrollMouseLeave` timeout.\n        if (!open) {\n          clearTimeout(timeoutRef.current);\n        }\n        handlerRef.current = handleCloseRef.current({\n          ...context,\n          tree,\n          x: event.clientX,\n          y: event.clientY,\n          onClose() {\n            clearPointerEvents();\n            cleanupMouseMoveHandler();\n            closeWithDelay();\n          }\n        });\n        const handler = handlerRef.current;\n        doc.addEventListener('mousemove', handler);\n        unbindMouseMoveRef.current = () => {\n          doc.removeEventListener('mousemove', handler);\n        };\n        return;\n      }\n      closeWithDelay();\n    }\n\n    // Ensure the floating element closes after scrolling even if the pointer\n    // did not move.\n    // https://github.com/floating-ui/floating-ui/discussions/1692\n    function onScrollMouseLeave(event) {\n      if (isClickLikeOpenEvent()) {\n        return;\n      }\n      handleCloseRef.current == null ? void 0 : handleCloseRef.current({\n        ...context,\n        tree,\n        x: event.clientX,\n        y: event.clientY,\n        onClose() {\n          clearPointerEvents();\n          cleanupMouseMoveHandler();\n          closeWithDelay();\n        }\n      })(event);\n    }\n    if (isElement(domReference)) {\n      const ref = domReference;\n      open && ref.addEventListener('mouseleave', onScrollMouseLeave);\n      floating == null ? void 0 : floating.addEventListener('mouseleave', onScrollMouseLeave);\n      move && ref.addEventListener('mousemove', onMouseEnter, {\n        once: true\n      });\n      ref.addEventListener('mouseenter', onMouseEnter);\n      ref.addEventListener('mouseleave', onMouseLeave);\n      return () => {\n        open && ref.removeEventListener('mouseleave', onScrollMouseLeave);\n        floating == null ? void 0 : floating.removeEventListener('mouseleave', onScrollMouseLeave);\n        move && ref.removeEventListener('mousemove', onMouseEnter);\n        ref.removeEventListener('mouseenter', onMouseEnter);\n        ref.removeEventListener('mouseleave', onMouseLeave);\n      };\n    }\n  }, [domReference, floating, enabled, context, mouseOnly, restMs, move, closeWithDelay, cleanupMouseMoveHandler, clearPointerEvents, onOpenChange, open, tree, delayRef, handleCloseRef, dataRef]);\n\n  // Block pointer-events of every element other than the reference and floating\n  // while the floating element is open and has a `handleClose` handler. Also\n  // handles nested floating elements.\n  // https://github.com/floating-ui/floating-ui/issues/1722\n  index(() => {\n    var _handleCloseRef$curre;\n    if (!enabled) {\n      return;\n    }\n    if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {\n      const body = getDocument(floating).body;\n      body.setAttribute(safePolygonIdentifier, '');\n      body.style.pointerEvents = 'none';\n      performedPointerEventsMutationRef.current = true;\n      if (isElement(domReference) && floating) {\n        var _tree$nodesRef$curren, _tree$nodesRef$curren2;\n        const ref = domReference;\n        const parentFloating = tree == null ? void 0 : (_tree$nodesRef$curren = tree.nodesRef.current.find(node => node.id === parentId)) == null ? void 0 : (_tree$nodesRef$curren2 = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren2.elements.floating;\n        if (parentFloating) {\n          parentFloating.style.pointerEvents = '';\n        }\n        ref.style.pointerEvents = 'auto';\n        floating.style.pointerEvents = 'auto';\n        return () => {\n          ref.style.pointerEvents = '';\n          floating.style.pointerEvents = '';\n        };\n      }\n    }\n  }, [enabled, open, parentId, floating, domReference, tree, handleCloseRef, dataRef, isHoverOpen]);\n  index(() => {\n    if (!open) {\n      pointerTypeRef.current = undefined;\n      cleanupMouseMoveHandler();\n      clearPointerEvents();\n    }\n  }, [open, cleanupMouseMoveHandler, clearPointerEvents]);\n  React.useEffect(() => {\n    return () => {\n      cleanupMouseMoveHandler();\n      clearTimeout(timeoutRef.current);\n      clearTimeout(restTimeoutRef.current);\n      clearPointerEvents();\n    };\n  }, [enabled, cleanupMouseMoveHandler, clearPointerEvents]);\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    function setPointerRef(event) {\n      pointerTypeRef.current = event.pointerType;\n    }\n    return {\n      reference: {\n        onPointerDown: setPointerRef,\n        onPointerEnter: setPointerRef,\n        onMouseMove() {\n          if (open || restMs === 0) {\n            return;\n          }\n          clearTimeout(restTimeoutRef.current);\n          restTimeoutRef.current = setTimeout(() => {\n            if (!blockMouseMoveRef.current) {\n              onOpenChange(true);\n            }\n          }, restMs);\n        }\n      },\n      floating: {\n        onMouseEnter() {\n          clearTimeout(timeoutRef.current);\n        },\n        onMouseLeave() {\n          events.emit('dismiss', {\n            type: 'mouseLeave',\n            data: {\n              returnFocus: false\n            }\n          });\n          closeWithDelay(false);\n        }\n      }\n    };\n  }, [events, enabled, restMs, open, onOpenChange, closeWithDelay]);\n};\n\nconst FloatingDelayGroupContext = /*#__PURE__*/React.createContext({\n  delay: 0,\n  initialDelay: 0,\n  timeoutMs: 0,\n  currentId: null,\n  setCurrentId: () => {},\n  setState: () => {},\n  isInstantPhase: false\n});\nconst useDelayGroupContext = () => React.useContext(FloatingDelayGroupContext);\n\n/**\n * Provides context for a group of floating elements that should share a\n * `delay`.\n * @see https://floating-ui.com/docs/FloatingDelayGroup\n */\nconst FloatingDelayGroup = _ref => {\n  let {\n    children,\n    delay,\n    timeoutMs = 0\n  } = _ref;\n  const [state, setState] = React.useReducer((prev, next) => ({\n    ...prev,\n    ...next\n  }), {\n    delay,\n    timeoutMs,\n    initialDelay: delay,\n    currentId: null,\n    isInstantPhase: false\n  });\n  const initialCurrentIdRef = React.useRef(null);\n  const setCurrentId = React.useCallback(currentId => {\n    setState({\n      currentId\n    });\n  }, []);\n  index(() => {\n    if (state.currentId) {\n      if (initialCurrentIdRef.current === null) {\n        initialCurrentIdRef.current = state.currentId;\n      } else {\n        setState({\n          isInstantPhase: true\n        });\n      }\n    } else {\n      setState({\n        isInstantPhase: false\n      });\n      initialCurrentIdRef.current = null;\n    }\n  }, [state.currentId]);\n  return /*#__PURE__*/React.createElement(FloatingDelayGroupContext.Provider, {\n    value: React.useMemo(() => ({\n      ...state,\n      setState,\n      setCurrentId\n    }), [state, setState, setCurrentId])\n  }, children);\n};\nconst useDelayGroup = (_ref2, _ref3) => {\n  let {\n    open,\n    onOpenChange\n  } = _ref2;\n  let {\n    id\n  } = _ref3;\n  const {\n    currentId,\n    setCurrentId,\n    initialDelay,\n    setState,\n    timeoutMs\n  } = useDelayGroupContext();\n  React.useEffect(() => {\n    if (currentId) {\n      setState({\n        delay: {\n          open: 1,\n          close: getDelay(initialDelay, 'close')\n        }\n      });\n      if (currentId !== id) {\n        onOpenChange(false);\n      }\n    }\n  }, [id, onOpenChange, setState, currentId, initialDelay]);\n  React.useEffect(() => {\n    function unset() {\n      onOpenChange(false);\n      setState({\n        delay: initialDelay,\n        currentId: null\n      });\n    }\n    if (!open && currentId === id) {\n      if (timeoutMs) {\n        const timeout = window.setTimeout(unset, timeoutMs);\n        return () => {\n          clearTimeout(timeout);\n        };\n      } else {\n        unset();\n      }\n    }\n  }, [open, setState, currentId, id, onOpenChange, initialDelay, timeoutMs]);\n  React.useEffect(() => {\n    if (open) {\n      setCurrentId(id);\n    }\n  }, [open, setCurrentId, id]);\n};\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/**\n * Find the real active element. Traverses into shadowRoots.\n */\nfunction activeElement$1(doc) {\n  let activeElement = doc.activeElement;\n  while (((_activeElement = activeElement) == null ? void 0 : (_activeElement$shadow = _activeElement.shadowRoot) == null ? void 0 : _activeElement$shadow.activeElement) != null) {\n    var _activeElement, _activeElement$shadow;\n    activeElement = activeElement.shadowRoot.activeElement;\n  }\n  return activeElement;\n}\n\nfunction contains(parent, child) {\n  if (!parent || !child) {\n    return false;\n  }\n  const rootNode = child.getRootNode && child.getRootNode();\n\n  // First, attempt with faster native method\n  if (parent.contains(child)) {\n    return true;\n  }\n  // then fallback to custom implementation with Shadow DOM support\n  else if (rootNode && isShadowRoot(rootNode)) {\n    let next = child;\n    do {\n      if (next && parent === next) {\n        return true;\n      }\n      // @ts-ignore\n      next = next.parentNode || next.host;\n    } while (next);\n  }\n\n  // Give up, the result is false\n  return false;\n}\n\nlet rafId = 0;\nfunction enqueueFocus(el, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    preventScroll = false,\n    cancelPrevious = true,\n    sync = false\n  } = options;\n  cancelPrevious && cancelAnimationFrame(rafId);\n  const exec = () => el == null ? void 0 : el.focus({\n    preventScroll\n  });\n  if (sync) {\n    exec();\n  } else {\n    rafId = requestAnimationFrame(exec);\n  }\n}\n\nfunction getAncestors(nodes, id) {\n  var _nodes$find;\n  let allAncestors = [];\n  let currentParentId = (_nodes$find = nodes.find(node => node.id === id)) == null ? void 0 : _nodes$find.parentId;\n  while (currentParentId) {\n    const currentNode = nodes.find(node => node.id === currentParentId);\n    currentParentId = currentNode == null ? void 0 : currentNode.parentId;\n    if (currentNode) {\n      allAncestors = allAncestors.concat(currentNode);\n    }\n  }\n  return allAncestors;\n}\n\nfunction getChildren(nodes, id) {\n  let allChildren = nodes.filter(node => {\n    var _node$context;\n    return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);\n  }) || [];\n  let currentChildren = allChildren;\n  while (currentChildren.length) {\n    currentChildren = nodes.filter(node => {\n      var _currentChildren;\n      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some(n => {\n        var _node$context2;\n        return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);\n      });\n    }) || [];\n    allChildren = allChildren.concat(currentChildren);\n  }\n  return allChildren;\n}\n\nfunction getTarget(event) {\n  if ('composedPath' in event) {\n    return event.composedPath()[0];\n  }\n\n  // TS thinks `event` is of type never as it assumes all browsers support\n  // `composedPath()`, but browsers without shadow DOM don't.\n  return event.target;\n}\n\nconst TYPEABLE_SELECTOR = \"input:not([type='hidden']):not([disabled]),\" + \"[contenteditable]:not([contenteditable='false']),textarea:not([disabled])\";\nfunction isTypeableElement(element) {\n  return isHTMLElement(element) && element.matches(TYPEABLE_SELECTOR);\n}\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n\nconst getTabbableOptions = () => ({\n  getShadowRoot: true,\n  displayCheck:\n  // JSDOM does not support the `tabbable` library. To solve this we can\n  // check if `ResizeObserver` is a real function (not polyfilled), which\n  // determines if the current environment is JSDOM-like.\n  typeof ResizeObserver === 'function' && ResizeObserver.toString().includes('[native code]') ? 'full' : 'none'\n});\nfunction getTabbableIn(container, direction) {\n  const allTabbable = tabbable(container, getTabbableOptions());\n  if (direction === 'prev') {\n    allTabbable.reverse();\n  }\n  const activeIndex = allTabbable.indexOf(activeElement$1(getDocument(container)));\n  const nextTabbableElements = allTabbable.slice(activeIndex + 1);\n  return nextTabbableElements[0];\n}\nfunction getNextTabbable() {\n  return getTabbableIn(document.body, 'next');\n}\nfunction getPreviousTabbable() {\n  return getTabbableIn(document.body, 'prev');\n}\nfunction isOutsideEvent(event, container) {\n  const containerElement = container || event.currentTarget;\n  const relatedTarget = event.relatedTarget;\n  return !relatedTarget || !contains(containerElement, relatedTarget);\n}\nfunction disableFocusInside(container) {\n  const tabbableElements = tabbable(container, getTabbableOptions());\n  tabbableElements.forEach(element => {\n    element.dataset.tabindex = element.getAttribute('tabindex') || '';\n    element.setAttribute('tabindex', '-1');\n  });\n}\nfunction enableFocusInside(container) {\n  const elements = container.querySelectorAll('[data-tabindex]');\n  elements.forEach(element => {\n    const tabindex = element.dataset.tabindex;\n    delete element.dataset.tabindex;\n    if (tabindex) {\n      element.setAttribute('tabindex', tabindex);\n    } else {\n      element.removeAttribute('tabindex');\n    }\n  });\n}\n\n// `toString()` prevents bundlers from trying to `import { useInsertionEffect } from 'react'`\nconst useInsertionEffect = React[/*#__PURE__*/'useInsertionEffect'.toString()];\nconst useSafeInsertionEffect = useInsertionEffect || (fn => fn());\nfunction useEvent(callback) {\n  const ref = React.useRef(() => {\n    if (process.env.NODE_ENV !== \"production\") {\n      throw new Error('Cannot call an event handler while rendering.');\n    }\n  });\n  useSafeInsertionEffect(() => {\n    ref.current = callback;\n  });\n  return React.useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return ref.current == null ? void 0 : ref.current(...args);\n  }, []);\n}\n\n// See Diego Haz's Sandbox for making this logic work well on Safari/iOS:\n// https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/FocusTrap.tsx\n\nconst HIDDEN_STYLES = {\n  border: 0,\n  clip: 'rect(0 0 0 0)',\n  height: '1px',\n  margin: '-1px',\n  overflow: 'hidden',\n  padding: 0,\n  position: 'fixed',\n  whiteSpace: 'nowrap',\n  width: '1px',\n  top: 0,\n  left: 0\n};\nlet activeElement;\nlet timeoutId;\nfunction setActiveElementOnTab(event) {\n  if (event.key === 'Tab') {\n    activeElement = event.target;\n    clearTimeout(timeoutId);\n  }\n}\nfunction isTabFocus(event) {\n  const result = activeElement === event.relatedTarget;\n  activeElement = event.relatedTarget;\n  clearTimeout(timeoutId);\n  return result;\n}\nconst FocusGuard = /*#__PURE__*/React.forwardRef(function FocusGuard(props, ref) {\n  const onFocus = useEvent(props.onFocus);\n  const [role, setRole] = React.useState();\n  index(() => {\n    if (isSafari()) {\n      // Unlike other screen readers such as NVDA and JAWS, the virtual cursor\n      // on VoiceOver does trigger the onFocus event, so we can use the focus\n      // trap element. On Safari, only buttons trigger the onFocus event.\n      // NB: \"group\" role in the Sandbox no longer appears to work, must be a\n      // button role.\n      setRole('button');\n    }\n    document.addEventListener('keydown', setActiveElementOnTab);\n    return () => {\n      document.removeEventListener('keydown', setActiveElementOnTab);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"span\", _extends({}, props, {\n    ref: ref,\n    tabIndex: 0\n    // Role is only for VoiceOver\n    ,\n    role: role,\n    \"aria-hidden\": role ? undefined : true,\n    \"data-floating-ui-focus-guard\": \"\",\n    style: HIDDEN_STYLES,\n    onFocus: event => {\n      if (isSafari() && isMac() && !isTabFocus(event)) {\n        // On macOS we need to wait a little bit before moving\n        // focus again.\n        event.persist();\n        timeoutId = window.setTimeout(() => {\n          onFocus(event);\n        }, 50);\n      } else {\n        onFocus(event);\n      }\n    }\n  }));\n});\n\nconst PortalContext = /*#__PURE__*/React.createContext(null);\nconst useFloatingPortalNode = function (_temp) {\n  let {\n    id,\n    enabled = true\n  } = _temp === void 0 ? {} : _temp;\n  const [portalEl, setPortalEl] = React.useState(null);\n  const uniqueId = useId();\n  const portalContext = usePortalContext();\n  index(() => {\n    if (!enabled) {\n      return;\n    }\n    const rootNode = id ? document.getElementById(id) : null;\n    if (rootNode) {\n      rootNode.setAttribute('data-floating-ui-portal', '');\n      setPortalEl(rootNode);\n    } else {\n      const newPortalEl = document.createElement('div');\n      if (id !== '') {\n        newPortalEl.id = id || uniqueId;\n      }\n      newPortalEl.setAttribute('data-floating-ui-portal', '');\n      setPortalEl(newPortalEl);\n      const container = (portalContext == null ? void 0 : portalContext.portalNode) || document.body;\n      container.appendChild(newPortalEl);\n      return () => {\n        container.removeChild(newPortalEl);\n      };\n    }\n  }, [id, portalContext, uniqueId, enabled]);\n  return portalEl;\n};\n\n/**\n * Portals the floating element into a given container element — by default,\n * outside of the app root and into the body.\n * @see https://floating-ui.com/docs/FloatingPortal\n */\nconst FloatingPortal = _ref => {\n  let {\n    children,\n    id,\n    root = null,\n    preserveTabOrder = true\n  } = _ref;\n  const portalNode = useFloatingPortalNode({\n    id,\n    enabled: !root\n  });\n  const [focusManagerState, setFocusManagerState] = React.useState(null);\n  const beforeOutsideRef = React.useRef(null);\n  const afterOutsideRef = React.useRef(null);\n  const beforeInsideRef = React.useRef(null);\n  const afterInsideRef = React.useRef(null);\n  const shouldRenderGuards =\n  // The FocusManager and therefore floating element are currently open/\n  // rendered.\n  !!focusManagerState &&\n  // Guards are only for non-modal focus management.\n  !focusManagerState.modal && !!(root || portalNode) && preserveTabOrder;\n\n  // https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/TabbablePortal.tsx\n  React.useEffect(() => {\n    if (!portalNode || !preserveTabOrder || focusManagerState != null && focusManagerState.modal) {\n      return;\n    }\n\n    // Make sure elements inside the portal element are tabbable only when the\n    // portal has already been focused, either by tabbing into a focus trap\n    // element outside or using the mouse.\n    function onFocus(event) {\n      if (portalNode && isOutsideEvent(event)) {\n        const focusing = event.type === 'focusin';\n        const manageFocus = focusing ? enableFocusInside : disableFocusInside;\n        manageFocus(portalNode);\n      }\n    }\n    // Listen to the event on the capture phase so they run before the focus\n    // trap elements onFocus prop is called.\n    portalNode.addEventListener('focusin', onFocus, true);\n    portalNode.addEventListener('focusout', onFocus, true);\n    return () => {\n      portalNode.removeEventListener('focusin', onFocus, true);\n      portalNode.removeEventListener('focusout', onFocus, true);\n    };\n  }, [portalNode, preserveTabOrder, focusManagerState == null ? void 0 : focusManagerState.modal]);\n  return /*#__PURE__*/React.createElement(PortalContext.Provider, {\n    value: React.useMemo(() => ({\n      preserveTabOrder,\n      beforeOutsideRef,\n      afterOutsideRef,\n      beforeInsideRef,\n      afterInsideRef,\n      portalNode,\n      setFocusManagerState\n    }), [preserveTabOrder, portalNode])\n  }, shouldRenderGuards && portalNode && /*#__PURE__*/React.createElement(FocusGuard, {\n    \"data-type\": \"outside\",\n    ref: beforeOutsideRef,\n    onFocus: event => {\n      if (isOutsideEvent(event, portalNode)) {\n        var _beforeInsideRef$curr;\n        (_beforeInsideRef$curr = beforeInsideRef.current) == null ? void 0 : _beforeInsideRef$curr.focus();\n      } else {\n        const prevTabbable = getPreviousTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);\n        prevTabbable == null ? void 0 : prevTabbable.focus();\n      }\n    }\n  }), shouldRenderGuards && portalNode && /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-owns\": portalNode.id,\n    style: HIDDEN_STYLES\n  }), root ? /*#__PURE__*/createPortal(children, root) : portalNode ? /*#__PURE__*/createPortal(children, portalNode) : null, shouldRenderGuards && portalNode && /*#__PURE__*/React.createElement(FocusGuard, {\n    \"data-type\": \"outside\",\n    ref: afterOutsideRef,\n    onFocus: event => {\n      if (isOutsideEvent(event, portalNode)) {\n        var _afterInsideRef$curre;\n        (_afterInsideRef$curre = afterInsideRef.current) == null ? void 0 : _afterInsideRef$curre.focus();\n      } else {\n        const nextTabbable = getNextTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);\n        nextTabbable == null ? void 0 : nextTabbable.focus();\n        (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false));\n      }\n    }\n  }));\n};\nconst usePortalContext = () => React.useContext(PortalContext);\n\nconst VisuallyHiddenDismiss = /*#__PURE__*/React.forwardRef(function VisuallyHiddenDismiss(props, ref) {\n  return /*#__PURE__*/React.createElement(\"button\", _extends({}, props, {\n    type: \"button\",\n    ref: ref,\n    tabIndex: -1,\n    style: HIDDEN_STYLES\n  }));\n});\n/**\n * Provides focus management for the floating element.\n * @see https://floating-ui.com/docs/FloatingFocusManager\n */\nfunction FloatingFocusManager(_ref) {\n  let {\n    context,\n    children,\n    order = ['content'],\n    guards = true,\n    initialFocus = 0,\n    returnFocus = true,\n    modal = true,\n    visuallyHiddenDismiss = false,\n    closeOnFocusOut = true\n  } = _ref;\n  const {\n    refs,\n    nodeId,\n    onOpenChange,\n    events,\n    dataRef,\n    elements: {\n      domReference,\n      floating\n    }\n  } = context;\n  const orderRef = useLatestRef(order);\n  const tree = useFloatingTree();\n  const portalContext = usePortalContext();\n  const [tabbableContentLength, setTabbableContentLength] = React.useState(null);\n\n  // Controlled by `useListNavigation`.\n  const ignoreInitialFocus = typeof initialFocus === 'number' && initialFocus < 0;\n  const startDismissButtonRef = React.useRef(null);\n  const endDismissButtonRef = React.useRef(null);\n  const preventReturnFocusRef = React.useRef(false);\n  const previouslyFocusedElementRef = React.useRef(null);\n  const isPointerDownRef = React.useRef(false);\n  const isInsidePortal = portalContext != null;\n\n  // If the reference is a combobox and is typeable (e.g. input/textarea),\n  // there are different focus semantics. The guards should not be rendered, but\n  // aria-hidden should be applied to all nodes still. Further, the visually\n  // hidden dismiss button should only appear at the end of the list, not the\n  // start.\n  const isTypeableCombobox = domReference && domReference.getAttribute('role') === 'combobox' && isTypeableElement(domReference);\n  const getTabbableContent = React.useCallback(function (container) {\n    if (container === void 0) {\n      container = floating;\n    }\n    return container ? tabbable(container, getTabbableOptions()) : [];\n  }, [floating]);\n  const getTabbableElements = React.useCallback(container => {\n    const content = getTabbableContent(container);\n    return orderRef.current.map(type => {\n      if (domReference && type === 'reference') {\n        return domReference;\n      }\n      if (floating && type === 'floating') {\n        return floating;\n      }\n      return content;\n    }).filter(Boolean).flat();\n  }, [domReference, floating, orderRef, getTabbableContent]);\n  React.useEffect(() => {\n    if (!modal) {\n      return;\n    }\n    function onKeyDown(event) {\n      if (event.key === 'Tab') {\n        // The focus guards have nothing to focus, so we need to stop the event.\n        if (getTabbableContent().length === 0 && !isTypeableCombobox) {\n          stopEvent(event);\n        }\n        const els = getTabbableElements();\n        const target = getTarget(event);\n        if (orderRef.current[0] === 'reference' && target === domReference) {\n          stopEvent(event);\n          if (event.shiftKey) {\n            enqueueFocus(els[els.length - 1]);\n          } else {\n            enqueueFocus(els[1]);\n          }\n        }\n        if (orderRef.current[1] === 'floating' && target === floating && event.shiftKey) {\n          stopEvent(event);\n          enqueueFocus(els[0]);\n        }\n      }\n    }\n    const doc = getDocument(floating);\n    doc.addEventListener('keydown', onKeyDown);\n    return () => {\n      doc.removeEventListener('keydown', onKeyDown);\n    };\n  }, [domReference, floating, modal, orderRef, refs, isTypeableCombobox, getTabbableContent, getTabbableElements]);\n  React.useEffect(() => {\n    if (!closeOnFocusOut) {\n      return;\n    }\n\n    // In Safari, buttons lose focus when pressing them.\n    function handlePointerDown() {\n      isPointerDownRef.current = true;\n      setTimeout(() => {\n        isPointerDownRef.current = false;\n      });\n    }\n    function handleFocusOutside(event) {\n      const relatedTarget = event.relatedTarget;\n      const movedToUnrelatedNode = !(contains(domReference, relatedTarget) || contains(floating, relatedTarget) || contains(relatedTarget, floating) || contains(portalContext == null ? void 0 : portalContext.portalNode, relatedTarget) || relatedTarget != null && relatedTarget.hasAttribute('data-floating-ui-focus-guard') || tree && (getChildren(tree.nodesRef.current, nodeId).find(node => {\n        var _node$context, _node$context2;\n        return contains((_node$context = node.context) == null ? void 0 : _node$context.elements.floating, relatedTarget) || contains((_node$context2 = node.context) == null ? void 0 : _node$context2.elements.domReference, relatedTarget);\n      }) || getAncestors(tree.nodesRef.current, nodeId).find(node => {\n        var _node$context3, _node$context4;\n        return ((_node$context3 = node.context) == null ? void 0 : _node$context3.elements.floating) === relatedTarget || ((_node$context4 = node.context) == null ? void 0 : _node$context4.elements.domReference) === relatedTarget;\n      })));\n\n      // Focus did not move inside the floating tree, and there are no tabbable\n      // portal guards to handle closing.\n      if (relatedTarget && movedToUnrelatedNode && !isPointerDownRef.current &&\n      // Fix React 18 Strict Mode returnFocus due to double rendering.\n      relatedTarget !== previouslyFocusedElementRef.current) {\n        preventReturnFocusRef.current = true;\n        // On iOS VoiceOver, dismissing the nested submenu will cause the\n        // first item of the list to receive focus. Delaying it appears to fix\n        // the issue.\n        setTimeout(() => onOpenChange(false));\n      }\n    }\n    if (floating && isHTMLElement(domReference)) {\n      domReference.addEventListener('focusout', handleFocusOutside);\n      domReference.addEventListener('pointerdown', handlePointerDown);\n      !modal && floating.addEventListener('focusout', handleFocusOutside);\n      return () => {\n        domReference.removeEventListener('focusout', handleFocusOutside);\n        domReference.removeEventListener('pointerdown', handlePointerDown);\n        !modal && floating.removeEventListener('focusout', handleFocusOutside);\n      };\n    }\n  }, [domReference, floating, modal, nodeId, tree, portalContext, onOpenChange, closeOnFocusOut]);\n  React.useEffect(() => {\n    var _portalContext$portal;\n    // Don't hide portals nested within the parent portal.\n    const portalNodes = Array.from((portalContext == null ? void 0 : (_portalContext$portal = portalContext.portalNode) == null ? void 0 : _portalContext$portal.querySelectorAll('[data-floating-ui-portal]')) || []);\n    function getDismissButtons() {\n      return [startDismissButtonRef.current, endDismissButtonRef.current].filter(Boolean);\n    }\n    if (floating && modal) {\n      const insideNodes = [floating, ...portalNodes, ...getDismissButtons()];\n      const cleanup = hideOthers(orderRef.current.includes('reference') || isTypeableCombobox ? insideNodes.concat(domReference || []) : insideNodes);\n      return () => {\n        cleanup();\n      };\n    }\n  }, [domReference, floating, modal, orderRef, portalContext, isTypeableCombobox]);\n  React.useEffect(() => {\n    if (modal && !guards && floating) {\n      const tabIndexValues = [];\n      const options = getTabbableOptions();\n      const allTabbable = tabbable(getDocument(floating).body, options);\n      const floatingTabbable = getTabbableElements();\n\n      // Exclude all tabbable elements that are part of the order\n      const elements = allTabbable.filter(el => !floatingTabbable.includes(el));\n      elements.forEach((el, i) => {\n        tabIndexValues[i] = el.getAttribute('tabindex');\n        el.setAttribute('tabindex', '-1');\n      });\n      return () => {\n        elements.forEach((el, i) => {\n          const value = tabIndexValues[i];\n          if (value == null) {\n            el.removeAttribute('tabindex');\n          } else {\n            el.setAttribute('tabindex', value);\n          }\n        });\n      };\n    }\n  }, [floating, modal, guards, getTabbableElements]);\n  index(() => {\n    if (!floating) return;\n    const doc = getDocument(floating);\n    let returnFocusValue = returnFocus;\n    let preventReturnFocusScroll = false;\n    const previouslyFocusedElement = activeElement$1(doc);\n    const contextData = dataRef.current;\n    previouslyFocusedElementRef.current = previouslyFocusedElement;\n    const focusableElements = getTabbableElements(floating);\n    const elToFocus = (typeof initialFocus === 'number' ? focusableElements[initialFocus] : initialFocus.current) || floating;\n\n    // If the `useListNavigation` hook is active, always ignore `initialFocus`\n    // because it has its own handling of the initial focus.\n    !ignoreInitialFocus && enqueueFocus(elToFocus, {\n      preventScroll: elToFocus === floating\n    });\n\n    // Dismissing via outside press should always ignore `returnFocus` to\n    // prevent unwanted scrolling.\n    function onDismiss(payload) {\n      if (payload.type === 'escapeKey' && refs.domReference.current) {\n        previouslyFocusedElementRef.current = refs.domReference.current;\n      }\n      if (['referencePress', 'escapeKey'].includes(payload.type)) {\n        return;\n      }\n      const returnFocus = payload.data.returnFocus;\n      if (typeof returnFocus === 'object') {\n        returnFocusValue = true;\n        preventReturnFocusScroll = returnFocus.preventScroll;\n      } else {\n        returnFocusValue = returnFocus;\n      }\n    }\n    events.on('dismiss', onDismiss);\n    return () => {\n      events.off('dismiss', onDismiss);\n      if (contains(floating, activeElement$1(doc)) && refs.domReference.current) {\n        previouslyFocusedElementRef.current = refs.domReference.current;\n      }\n      if (returnFocusValue && isHTMLElement(previouslyFocusedElementRef.current) && !preventReturnFocusRef.current) {\n        // `isPointerDownRef.current` to avoid the focus ring from appearing on\n        // the reference element when click-toggling it.\n        if (!refs.domReference.current || isPointerDownRef.current) {\n          enqueueFocus(previouslyFocusedElementRef.current, {\n            // When dismissing nested floating elements, by the time the rAF has\n            // executed, the menus will all have been unmounted. When they try\n            // to get focused, the calls get ignored — leaving the root\n            // reference focused as desired.\n            cancelPrevious: false,\n            preventScroll: preventReturnFocusScroll\n          });\n        } else {\n          var _previouslyFocusedEle;\n          // If the user has specified a `keydown` listener that calls\n          // setOpen(false) (e.g. selecting an item and closing the floating\n          // element), then sync return focus causes `useClick` to immediately\n          // re-open it, unless they call `event.preventDefault()` in the\n          // `keydown` listener. This helps keep backwards compatibility with\n          // older examples.\n          contextData.__syncReturnFocus = true;\n\n          // In Safari, `useListNavigation` moves focus sync, so making this\n          // sync ensures the initial item remains focused despite this being\n          // invoked in Strict Mode due to double-invoked useEffects. This also\n          // has the positive side effect of closing a modally focus-managed\n          // <Menu> on `Tab` keydown to move naturally to the next focusable\n          // element.\n          (_previouslyFocusedEle = previouslyFocusedElementRef.current) == null ? void 0 : _previouslyFocusedEle.focus({\n            preventScroll: preventReturnFocusScroll\n          });\n          setTimeout(() => {\n            // This isn't an actual property the user should access, make sure\n            // it doesn't persist.\n            delete contextData.__syncReturnFocus;\n          });\n        }\n      }\n    };\n  }, [floating, getTabbableElements, initialFocus, returnFocus, dataRef, refs, events, ignoreInitialFocus]);\n\n  // Synchronize the `context` & `modal` value to the FloatingPortal context.\n  // It will decide whether or not it needs to render its own guards.\n  index(() => {\n    if (!portalContext) return;\n    portalContext.setFocusManagerState({\n      ...context,\n      modal,\n      closeOnFocusOut\n      // Not concerned about the <RT> generic type.\n    });\n\n    return () => {\n      portalContext.setFocusManagerState(null);\n    };\n  }, [portalContext, modal, closeOnFocusOut, context]);\n  index(() => {\n    if (ignoreInitialFocus || !floating) return;\n    function setState() {\n      setTabbableContentLength(getTabbableContent().length);\n    }\n    setState();\n    if (typeof MutationObserver === 'function') {\n      const observer = new MutationObserver(setState);\n      observer.observe(floating, {\n        childList: true,\n        subtree: true\n      });\n      return () => {\n        observer.disconnect();\n      };\n    }\n  }, [floating, getTabbableContent, ignoreInitialFocus, refs]);\n  const shouldRenderGuards = guards && (isInsidePortal || modal) && !isTypeableCombobox;\n  function renderDismissButton(location) {\n    return visuallyHiddenDismiss && modal ? /*#__PURE__*/React.createElement(VisuallyHiddenDismiss, {\n      ref: location === 'start' ? startDismissButtonRef : endDismissButtonRef,\n      onClick: () => onOpenChange(false)\n    }, typeof visuallyHiddenDismiss === 'string' ? visuallyHiddenDismiss : 'Dismiss') : null;\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, shouldRenderGuards && /*#__PURE__*/React.createElement(FocusGuard, {\n    \"data-type\": \"inside\",\n    ref: portalContext == null ? void 0 : portalContext.beforeInsideRef,\n    onFocus: event => {\n      if (modal) {\n        const els = getTabbableElements();\n        enqueueFocus(order[0] === 'reference' ? els[0] : els[els.length - 1]);\n      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {\n        preventReturnFocusRef.current = false;\n        if (isOutsideEvent(event, portalContext.portalNode)) {\n          const nextTabbable = getNextTabbable() || domReference;\n          nextTabbable == null ? void 0 : nextTabbable.focus();\n        } else {\n          var _portalContext$before;\n          (_portalContext$before = portalContext.beforeOutsideRef.current) == null ? void 0 : _portalContext$before.focus();\n        }\n      }\n    }\n  }), isTypeableCombobox ? null : renderDismissButton('start'), /*#__PURE__*/React.cloneElement(children, tabbableContentLength === 0 || order.includes('floating') ? {\n    tabIndex: 0\n  } : {}), renderDismissButton('end'), shouldRenderGuards && /*#__PURE__*/React.createElement(FocusGuard, {\n    \"data-type\": \"inside\",\n    ref: portalContext == null ? void 0 : portalContext.afterInsideRef,\n    onFocus: event => {\n      if (modal) {\n        enqueueFocus(getTabbableElements()[0]);\n      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {\n        preventReturnFocusRef.current = true;\n        if (isOutsideEvent(event, portalContext.portalNode)) {\n          const prevTabbable = getPreviousTabbable() || domReference;\n          prevTabbable == null ? void 0 : prevTabbable.focus();\n        } else {\n          var _portalContext$afterO;\n          (_portalContext$afterO = portalContext.afterOutsideRef.current) == null ? void 0 : _portalContext$afterO.focus();\n        }\n      }\n    }\n  }));\n}\n\nconst identifier = 'data-floating-ui-scroll-lock';\n\n/**\n * Provides base styling for a fixed overlay element to dim content or block\n * pointer events behind a floating element.\n * It's a regular `<div>`, so it can be styled via any CSS solution you prefer.\n * @see https://floating-ui.com/docs/FloatingOverlay\n */\nconst FloatingOverlay = /*#__PURE__*/React.forwardRef(function FloatingOverlay(_ref, ref) {\n  let {\n    lockScroll = false,\n    ...rest\n  } = _ref;\n  index(() => {\n    var _window$visualViewpor, _window$visualViewpor2;\n    if (!lockScroll) {\n      return;\n    }\n    const alreadyLocked = document.body.hasAttribute(identifier);\n    if (alreadyLocked) {\n      return;\n    }\n    document.body.setAttribute(identifier, '');\n\n    // RTL <body> scrollbar\n    const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;\n    const paddingProp = scrollbarX ? 'paddingLeft' : 'paddingRight';\n    const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;\n\n    // Only iOS doesn't respect `overflow: hidden` on document.body, and this\n    // technique has fewer side effects.\n    if (!/iP(hone|ad|od)|iOS/.test(getPlatform())) {\n      Object.assign(document.body.style, {\n        overflow: 'hidden',\n        [paddingProp]: scrollbarWidth + \"px\"\n      });\n      return () => {\n        document.body.removeAttribute(identifier);\n        Object.assign(document.body.style, {\n          overflow: '',\n          [paddingProp]: ''\n        });\n      };\n    }\n\n    // iOS 12 does not support `visualViewport`.\n    const offsetLeft = ((_window$visualViewpor = window.visualViewport) == null ? void 0 : _window$visualViewpor.offsetLeft) || 0;\n    const offsetTop = ((_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetTop) || 0;\n    const scrollX = window.pageXOffset;\n    const scrollY = window.pageYOffset;\n    Object.assign(document.body.style, {\n      position: 'fixed',\n      overflow: 'hidden',\n      top: -(scrollY - Math.floor(offsetTop)) + \"px\",\n      left: -(scrollX - Math.floor(offsetLeft)) + \"px\",\n      right: '0',\n      [paddingProp]: scrollbarWidth + \"px\"\n    });\n    return () => {\n      Object.assign(document.body.style, {\n        position: '',\n        overflow: '',\n        top: '',\n        left: '',\n        right: '',\n        [paddingProp]: ''\n      });\n      document.body.removeAttribute(identifier);\n      window.scrollTo(scrollX, scrollY);\n    };\n  }, [lockScroll]);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, rest, {\n    style: {\n      position: 'fixed',\n      overflow: 'auto',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      ...rest.style\n    }\n  }));\n});\n\nfunction isButtonTarget(event) {\n  return isHTMLElement(event.target) && event.target.tagName === 'BUTTON';\n}\nfunction isSpaceIgnored(element) {\n  return isTypeableElement(element);\n}\n/**\n * Opens or closes the floating element when clicking the reference element.\n * @see https://floating-ui.com/docs/useClick\n */\nconst useClick = function (_ref, _temp) {\n  let {\n    open,\n    onOpenChange,\n    dataRef,\n    elements: {\n      domReference\n    }\n  } = _ref;\n  let {\n    enabled = true,\n    event: eventOption = 'click',\n    toggle = true,\n    ignoreMouse = false,\n    keyboardHandlers = true\n  } = _temp === void 0 ? {} : _temp;\n  const pointerTypeRef = React.useRef();\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    return {\n      reference: {\n        onPointerDown(event) {\n          pointerTypeRef.current = event.pointerType;\n        },\n        onMouseDown(event) {\n          // Ignore all buttons except for the \"main\" button.\n          // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n          if (event.button !== 0) {\n            return;\n          }\n          if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {\n            return;\n          }\n          if (eventOption === 'click') {\n            return;\n          }\n          if (open) {\n            if (toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === 'mousedown' : true)) {\n              onOpenChange(false);\n            }\n          } else {\n            // Prevent stealing focus from the floating element\n            event.preventDefault();\n            onOpenChange(true);\n          }\n          dataRef.current.openEvent = event.nativeEvent;\n        },\n        onClick(event) {\n          if (dataRef.current.__syncReturnFocus) {\n            return;\n          }\n          if (eventOption === 'mousedown' && pointerTypeRef.current) {\n            pointerTypeRef.current = undefined;\n            return;\n          }\n          if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {\n            return;\n          }\n          if (open) {\n            if (toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === 'click' : true)) {\n              onOpenChange(false);\n            }\n          } else {\n            onOpenChange(true);\n          }\n          dataRef.current.openEvent = event.nativeEvent;\n        },\n        onKeyDown(event) {\n          pointerTypeRef.current = undefined;\n          if (!keyboardHandlers) {\n            return;\n          }\n          if (isButtonTarget(event)) {\n            return;\n          }\n          if (event.key === ' ' && !isSpaceIgnored(domReference)) {\n            // Prevent scrolling\n            event.preventDefault();\n          }\n          if (event.key === 'Enter') {\n            if (open) {\n              if (toggle) {\n                onOpenChange(false);\n              }\n            } else {\n              onOpenChange(true);\n            }\n          }\n        },\n        onKeyUp(event) {\n          if (!keyboardHandlers) {\n            return;\n          }\n          if (isButtonTarget(event) || isSpaceIgnored(domReference)) {\n            return;\n          }\n          if (event.key === ' ') {\n            if (open) {\n              if (toggle) {\n                onOpenChange(false);\n              }\n            } else {\n              onOpenChange(true);\n            }\n          }\n        }\n      }\n    };\n  }, [enabled, dataRef, eventOption, ignoreMouse, keyboardHandlers, domReference, toggle, open, onOpenChange]);\n};\n\n/**\n * Check whether the event.target is within the provided node. Uses event.composedPath if available for custom element support.\n *\n * @param event The event whose target/composedPath to check\n * @param node The node to check against\n * @returns Whether the event.target/composedPath is within the node.\n */\nfunction isEventTargetWithin(event, node) {\n  if (node == null) {\n    return false;\n  }\n  if ('composedPath' in event) {\n    return event.composedPath().includes(node);\n  }\n\n  // TS thinks `event` is of type never as it assumes all browsers support composedPath, but browsers without shadow dom don't\n  const e = event;\n  return e.target != null && node.contains(e.target);\n}\n\nconst bubbleHandlerKeys = {\n  pointerdown: 'onPointerDown',\n  mousedown: 'onMouseDown',\n  click: 'onClick'\n};\nconst captureHandlerKeys = {\n  pointerdown: 'onPointerDownCapture',\n  mousedown: 'onMouseDownCapture',\n  click: 'onClickCapture'\n};\nconst normalizeBubblesProp = function (bubbles) {\n  var _bubbles$escapeKey, _bubbles$outsidePress;\n  if (bubbles === void 0) {\n    bubbles = true;\n  }\n  return {\n    escapeKeyBubbles: typeof bubbles === 'boolean' ? bubbles : (_bubbles$escapeKey = bubbles.escapeKey) != null ? _bubbles$escapeKey : true,\n    outsidePressBubbles: typeof bubbles === 'boolean' ? bubbles : (_bubbles$outsidePress = bubbles.outsidePress) != null ? _bubbles$outsidePress : true\n  };\n};\n/**\n * Closes the floating element when a dismissal is requested — by default, when\n * the user presses the `escape` key or outside of the floating element.\n * @see https://floating-ui.com/docs/useDismiss\n */\nconst useDismiss = function (_ref, _temp) {\n  let {\n    open,\n    onOpenChange,\n    events,\n    nodeId,\n    elements: {\n      reference,\n      domReference,\n      floating\n    },\n    dataRef\n  } = _ref;\n  let {\n    enabled = true,\n    escapeKey = true,\n    outsidePress: unstable_outsidePress = true,\n    outsidePressEvent = 'pointerdown',\n    referencePress = false,\n    referencePressEvent = 'pointerdown',\n    ancestorScroll = false,\n    bubbles = true\n  } = _temp === void 0 ? {} : _temp;\n  const tree = useFloatingTree();\n  const nested = useFloatingParentNodeId() != null;\n  const outsidePressFn = useEvent(typeof unstable_outsidePress === 'function' ? unstable_outsidePress : () => false);\n  const outsidePress = typeof unstable_outsidePress === 'function' ? outsidePressFn : unstable_outsidePress;\n  const insideReactTreeRef = React.useRef(false);\n  const {\n    escapeKeyBubbles,\n    outsidePressBubbles\n  } = normalizeBubblesProp(bubbles);\n  React.useEffect(() => {\n    if (!open || !enabled) {\n      return;\n    }\n    dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;\n    dataRef.current.__outsidePressBubbles = outsidePressBubbles;\n    function onKeyDown(event) {\n      if (event.key === 'Escape') {\n        const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];\n        if (children.length > 0) {\n          let shouldDismiss = true;\n          children.forEach(child => {\n            var _child$context;\n            if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {\n              shouldDismiss = false;\n              return;\n            }\n          });\n          if (!shouldDismiss) {\n            return;\n          }\n        }\n        events.emit('dismiss', {\n          type: 'escapeKey',\n          data: {\n            returnFocus: {\n              preventScroll: false\n            }\n          }\n        });\n        onOpenChange(false);\n      }\n    }\n    function onOutsidePress(event) {\n      // Given developers can stop the propagation of the synthetic event,\n      // we can only be confident with a positive value.\n      const insideReactTree = insideReactTreeRef.current;\n      insideReactTreeRef.current = false;\n      if (insideReactTree) {\n        return;\n      }\n      if (typeof outsidePress === 'function' && !outsidePress(event)) {\n        return;\n      }\n      const target = getTarget(event);\n\n      // Check if the click occurred on the scrollbar\n      if (isHTMLElement(target) && floating) {\n        const win = floating.ownerDocument.defaultView || window;\n        const canScrollX = target.scrollWidth > target.clientWidth;\n        const canScrollY = target.scrollHeight > target.clientHeight;\n        let xCond = canScrollY && event.offsetX > target.clientWidth;\n\n        // In some browsers it is possible to change the <body> (or window)\n        // scrollbar to the left side, but is very rare and is difficult to\n        // check for. Plus, for modal dialogs with backdrops, it is more\n        // important that the backdrop is checked but not so much the window.\n        if (canScrollY) {\n          const isRTL = win.getComputedStyle(target).direction === 'rtl';\n          if (isRTL) {\n            xCond = event.offsetX <= target.offsetWidth - target.clientWidth;\n          }\n        }\n        if (xCond || canScrollX && event.offsetY > target.clientHeight) {\n          return;\n        }\n      }\n      const targetIsInsideChildren = tree && getChildren(tree.nodesRef.current, nodeId).some(node => {\n        var _node$context;\n        return isEventTargetWithin(event, (_node$context = node.context) == null ? void 0 : _node$context.elements.floating);\n      });\n      if (isEventTargetWithin(event, floating) || isEventTargetWithin(event, domReference) || targetIsInsideChildren) {\n        return;\n      }\n      const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];\n      if (children.length > 0) {\n        let shouldDismiss = true;\n        children.forEach(child => {\n          var _child$context2;\n          if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {\n            shouldDismiss = false;\n            return;\n          }\n        });\n        if (!shouldDismiss) {\n          return;\n        }\n      }\n      events.emit('dismiss', {\n        type: 'outsidePress',\n        data: {\n          returnFocus: nested ? {\n            preventScroll: true\n          } : isVirtualClick(event) || isVirtualPointerEvent(event)\n        }\n      });\n      onOpenChange(false);\n    }\n    function onScroll() {\n      onOpenChange(false);\n    }\n    const doc = getDocument(floating);\n    escapeKey && doc.addEventListener('keydown', onKeyDown);\n    outsidePress && doc.addEventListener(outsidePressEvent, onOutsidePress);\n    let ancestors = [];\n    if (ancestorScroll) {\n      if (isElement(domReference)) {\n        ancestors = getOverflowAncestors(domReference);\n      }\n      if (isElement(floating)) {\n        ancestors = ancestors.concat(getOverflowAncestors(floating));\n      }\n      if (!isElement(reference) && reference && reference.contextElement) {\n        ancestors = ancestors.concat(getOverflowAncestors(reference.contextElement));\n      }\n    }\n\n    // Ignore the visual viewport for scrolling dismissal (allow pinch-zoom)\n    ancestors = ancestors.filter(ancestor => {\n      var _doc$defaultView;\n      return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);\n    });\n    ancestors.forEach(ancestor => {\n      ancestor.addEventListener('scroll', onScroll, {\n        passive: true\n      });\n    });\n    return () => {\n      escapeKey && doc.removeEventListener('keydown', onKeyDown);\n      outsidePress && doc.removeEventListener(outsidePressEvent, onOutsidePress);\n      ancestors.forEach(ancestor => {\n        ancestor.removeEventListener('scroll', onScroll);\n      });\n    };\n  }, [dataRef, floating, domReference, reference, escapeKey, outsidePress, outsidePressEvent, events, tree, nodeId, open, onOpenChange, ancestorScroll, enabled, escapeKeyBubbles, outsidePressBubbles, nested]);\n  React.useEffect(() => {\n    insideReactTreeRef.current = false;\n  }, [outsidePress, outsidePressEvent]);\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    return {\n      reference: {\n        [bubbleHandlerKeys[referencePressEvent]]: () => {\n          if (referencePress) {\n            events.emit('dismiss', {\n              type: 'referencePress',\n              data: {\n                returnFocus: false\n              }\n            });\n            onOpenChange(false);\n          }\n        }\n      },\n      floating: {\n        [captureHandlerKeys[outsidePressEvent]]: () => {\n          insideReactTreeRef.current = true;\n        }\n      }\n    };\n  }, [enabled, events, referencePress, outsidePressEvent, referencePressEvent, onOpenChange]);\n};\n\n/**\n * Opens the floating element while the reference element has focus, like CSS\n * `:focus`.\n * @see https://floating-ui.com/docs/useFocus\n */\nconst useFocus = function (_ref, _temp) {\n  let {\n    open,\n    onOpenChange,\n    dataRef,\n    events,\n    refs,\n    elements: {\n      floating,\n      domReference\n    }\n  } = _ref;\n  let {\n    enabled = true,\n    keyboardOnly = true\n  } = _temp === void 0 ? {} : _temp;\n  const pointerTypeRef = React.useRef('');\n  const blockFocusRef = React.useRef(false);\n  const timeoutRef = React.useRef();\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    const doc = getDocument(floating);\n    const win = doc.defaultView || window;\n\n    // If the reference was focused and the user left the tab/window, and the\n    // floating element was not open, the focus should be blocked when they\n    // return to the tab/window.\n    function onBlur() {\n      if (!open && isHTMLElement(domReference) && domReference === activeElement$1(getDocument(domReference))) {\n        blockFocusRef.current = true;\n      }\n    }\n    win.addEventListener('blur', onBlur);\n    return () => {\n      win.removeEventListener('blur', onBlur);\n    };\n  }, [floating, domReference, open, enabled]);\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    function onDismiss(payload) {\n      if (payload.type === 'referencePress' || payload.type === 'escapeKey') {\n        blockFocusRef.current = true;\n      }\n    }\n    events.on('dismiss', onDismiss);\n    return () => {\n      events.off('dismiss', onDismiss);\n    };\n  }, [events, enabled]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timeoutRef.current);\n    };\n  }, []);\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    return {\n      reference: {\n        onPointerDown(_ref2) {\n          let {\n            pointerType\n          } = _ref2;\n          pointerTypeRef.current = pointerType;\n          blockFocusRef.current = !!(pointerType && keyboardOnly);\n        },\n        onMouseLeave() {\n          blockFocusRef.current = false;\n        },\n        onFocus(event) {\n          var _dataRef$current$open;\n          if (blockFocusRef.current) {\n            return;\n          }\n\n          // Dismiss with click should ignore the subsequent `focus` trigger,\n          // but only if the click originated inside the reference element.\n          if (event.type === 'focus' && ((_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type) === 'mousedown' && dataRef.current.openEvent && isEventTargetWithin(dataRef.current.openEvent, domReference)) {\n            return;\n          }\n          dataRef.current.openEvent = event.nativeEvent;\n          onOpenChange(true);\n        },\n        onBlur(event) {\n          blockFocusRef.current = false;\n          const relatedTarget = event.relatedTarget;\n\n          // Hit the non-modal focus management portal guard. Focus will be\n          // moved into the floating element immediately after.\n          const movedToFocusGuard = isElement(relatedTarget) && relatedTarget.hasAttribute('data-floating-ui-focus-guard') && relatedTarget.getAttribute('data-type') === 'outside';\n\n          // Wait for the window blur listener to fire.\n          timeoutRef.current = setTimeout(() => {\n            // When focusing the reference element (e.g. regular click), then\n            // clicking into the floating element, prevent it from hiding.\n            // Note: it must be focusable, e.g. `tabindex=\"-1\"`.\n            if (contains(refs.floating.current, relatedTarget) || contains(domReference, relatedTarget) || movedToFocusGuard) {\n              return;\n            }\n            onOpenChange(false);\n          });\n        }\n      }\n    };\n  }, [enabled, keyboardOnly, domReference, refs, dataRef, onOpenChange]);\n};\n\nlet isPreventScrollSupported = false;\nconst ARROW_UP = 'ArrowUp';\nconst ARROW_DOWN = 'ArrowDown';\nconst ARROW_LEFT = 'ArrowLeft';\nconst ARROW_RIGHT = 'ArrowRight';\nfunction isDifferentRow(index, cols, prevRow) {\n  return Math.floor(index / cols) !== prevRow;\n}\nfunction isIndexOutOfBounds(listRef, index) {\n  return index < 0 || index >= listRef.current.length;\n}\nfunction findNonDisabledIndex(listRef, _temp) {\n  let {\n    startingIndex = -1,\n    decrement = false,\n    disabledIndices,\n    amount = 1\n  } = _temp === void 0 ? {} : _temp;\n  const list = listRef.current;\n  let index = startingIndex;\n  do {\n    var _list$index, _list$index2;\n    index = index + (decrement ? -amount : amount);\n  } while (index >= 0 && index <= list.length - 1 && (disabledIndices ? disabledIndices.includes(index) : list[index] == null || ((_list$index = list[index]) == null ? void 0 : _list$index.hasAttribute('disabled')) || ((_list$index2 = list[index]) == null ? void 0 : _list$index2.getAttribute('aria-disabled')) === 'true'));\n  return index;\n}\nfunction doSwitch(orientation, vertical, horizontal) {\n  switch (orientation) {\n    case 'vertical':\n      return vertical;\n    case 'horizontal':\n      return horizontal;\n    default:\n      return vertical || horizontal;\n  }\n}\nfunction isMainOrientationKey(key, orientation) {\n  const vertical = key === ARROW_UP || key === ARROW_DOWN;\n  const horizontal = key === ARROW_LEFT || key === ARROW_RIGHT;\n  return doSwitch(orientation, vertical, horizontal);\n}\nfunction isMainOrientationToEndKey(key, orientation, rtl) {\n  const vertical = key === ARROW_DOWN;\n  const horizontal = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\n  return doSwitch(orientation, vertical, horizontal) || key === 'Enter' || key == ' ' || key === '';\n}\nfunction isCrossOrientationOpenKey(key, orientation, rtl) {\n  const vertical = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\n  const horizontal = key === ARROW_DOWN;\n  return doSwitch(orientation, vertical, horizontal);\n}\nfunction isCrossOrientationCloseKey(key, orientation, rtl) {\n  const vertical = rtl ? key === ARROW_RIGHT : key === ARROW_LEFT;\n  const horizontal = key === ARROW_UP;\n  return doSwitch(orientation, vertical, horizontal);\n}\nfunction getMinIndex(listRef, disabledIndices) {\n  return findNonDisabledIndex(listRef, {\n    disabledIndices\n  });\n}\nfunction getMaxIndex(listRef, disabledIndices) {\n  return findNonDisabledIndex(listRef, {\n    decrement: true,\n    startingIndex: listRef.current.length,\n    disabledIndices\n  });\n}\n/**\n * Adds arrow key-based navigation of a list of items, either using real DOM\n * focus or virtual focus.\n * @see https://floating-ui.com/docs/useListNavigation\n */\nconst useListNavigation = function (_ref, _temp2) {\n  let {\n    open,\n    onOpenChange,\n    refs,\n    elements: {\n      domReference\n    }\n  } = _ref;\n  let {\n    listRef,\n    activeIndex,\n    onNavigate: unstable_onNavigate = () => {},\n    enabled = true,\n    selectedIndex = null,\n    allowEscape = false,\n    loop = false,\n    nested = false,\n    rtl = false,\n    virtual = false,\n    focusItemOnOpen = 'auto',\n    focusItemOnHover = true,\n    openOnArrowKeyDown = true,\n    disabledIndices = undefined,\n    orientation = 'vertical',\n    cols = 1,\n    scrollItemIntoView = true\n  } = _temp2 === void 0 ? {\n    listRef: {\n      current: []\n    },\n    activeIndex: null,\n    onNavigate: () => {}\n  } : _temp2;\n  if (process.env.NODE_ENV !== \"production\") {\n    if (allowEscape) {\n      if (!loop) {\n        console.warn(['Floating UI: `useListNavigation` looping must be enabled to allow', 'escaping.'].join(' '));\n      }\n      if (!virtual) {\n        console.warn(['Floating UI: `useListNavigation` must be virtual to allow', 'escaping.'].join(' '));\n      }\n    }\n    if (orientation === 'vertical' && cols > 1) {\n      console.warn(['Floating UI: In grid list navigation mode (`cols` > 1), the', '`orientation` should be either \"horizontal\" or \"both\".'].join(' '));\n    }\n  }\n  const parentId = useFloatingParentNodeId();\n  const tree = useFloatingTree();\n  const onNavigate = useEvent(unstable_onNavigate);\n  const focusItemOnOpenRef = React.useRef(focusItemOnOpen);\n  const indexRef = React.useRef(selectedIndex != null ? selectedIndex : -1);\n  const keyRef = React.useRef(null);\n  const isPointerModalityRef = React.useRef(true);\n  const previousOnNavigateRef = React.useRef(onNavigate);\n  const previousOpenRef = React.useRef(open);\n  const forceSyncFocus = React.useRef(false);\n  const forceScrollIntoViewRef = React.useRef(false);\n  const disabledIndicesRef = useLatestRef(disabledIndices);\n  const latestOpenRef = useLatestRef(open);\n  const scrollItemIntoViewRef = useLatestRef(scrollItemIntoView);\n  const [activeId, setActiveId] = React.useState();\n  const focusItem = React.useCallback(function (listRef, indexRef, forceScrollIntoView) {\n    if (forceScrollIntoView === void 0) {\n      forceScrollIntoView = false;\n    }\n    const item = listRef.current[indexRef.current];\n    if (virtual) {\n      setActiveId(item == null ? void 0 : item.id);\n    } else {\n      enqueueFocus(item, {\n        preventScroll: true,\n        // Mac Safari does not move the virtual cursor unless the focus call\n        // is sync. However, for the very first focus call, we need to wait\n        // for the position to be ready in order to prevent unwanted\n        // scrolling. This means the virtual cursor will not move to the first\n        // item when first opening the floating element, but will on\n        // subsequent calls. `preventScroll` is supported in modern Safari,\n        // so we can use that instead.\n        // iOS Safari must be async or the first item will not be focused.\n        sync: isMac() && isSafari() ? isPreventScrollSupported || forceSyncFocus.current : false\n      });\n    }\n    requestAnimationFrame(() => {\n      const scrollIntoViewOptions = scrollItemIntoViewRef.current;\n      const shouldScrollIntoView = scrollIntoViewOptions && item && (forceScrollIntoView || !isPointerModalityRef.current);\n      if (shouldScrollIntoView) {\n        // JSDOM doesn't support `.scrollIntoView()` but it's widely supported\n        // by all browsers.\n        item.scrollIntoView == null ? void 0 : item.scrollIntoView(typeof scrollIntoViewOptions === 'boolean' ? {\n          block: 'nearest',\n          inline: 'nearest'\n        } : scrollIntoViewOptions);\n      }\n    });\n  }, [virtual, scrollItemIntoViewRef]);\n  index(() => {\n    document.createElement('div').focus({\n      get preventScroll() {\n        isPreventScrollSupported = true;\n        return false;\n      }\n    });\n  }, []);\n\n  // Sync `selectedIndex` to be the `activeIndex` upon opening the floating\n  // element. Also, reset `activeIndex` upon closing the floating element.\n  index(() => {\n    if (!enabled) {\n      return;\n    }\n    if (open) {\n      if (focusItemOnOpenRef.current && selectedIndex != null) {\n        // Regardless of the pointer modality, we want to ensure the selected\n        // item comes into view when the floating element is opened.\n        forceScrollIntoViewRef.current = true;\n        onNavigate(selectedIndex);\n      }\n    } else if (previousOpenRef.current) {\n      // Since the user can specify `onNavigate` conditionally\n      // (onNavigate: open ? setActiveIndex : setSelectedIndex),\n      // we store and call the previous function.\n      indexRef.current = -1;\n      previousOnNavigateRef.current(null);\n    }\n  }, [enabled, open, selectedIndex, onNavigate]);\n\n  // Sync `activeIndex` to be the focused item while the floating element is\n  // open.\n  index(() => {\n    if (!enabled) {\n      return;\n    }\n    if (open) {\n      if (activeIndex == null) {\n        forceSyncFocus.current = false;\n        if (selectedIndex != null) {\n          return;\n        }\n\n        // Reset while the floating element was open (e.g. the list changed).\n        if (previousOpenRef.current) {\n          indexRef.current = -1;\n          focusItem(listRef, indexRef);\n        }\n\n        // Initial sync.\n        if (!previousOpenRef.current && focusItemOnOpenRef.current && (keyRef.current != null || focusItemOnOpenRef.current === true && keyRef.current == null)) {\n          indexRef.current = keyRef.current == null || isMainOrientationToEndKey(keyRef.current, orientation, rtl) || nested ? getMinIndex(listRef, disabledIndicesRef.current) : getMaxIndex(listRef, disabledIndicesRef.current);\n          onNavigate(indexRef.current);\n        }\n      } else if (!isIndexOutOfBounds(listRef, activeIndex)) {\n        indexRef.current = activeIndex;\n        focusItem(listRef, indexRef, forceScrollIntoViewRef.current);\n        forceScrollIntoViewRef.current = false;\n      }\n    }\n  }, [enabled, open, activeIndex, selectedIndex, nested, listRef, orientation, rtl, onNavigate, focusItem, disabledIndicesRef]);\n\n  // Ensure the parent floating element has focus when a nested child closes\n  // to allow arrow key navigation to work after the pointer leaves the child.\n  index(() => {\n    if (!enabled) {\n      return;\n    }\n    if (previousOpenRef.current && !open) {\n      var _tree$nodesRef$curren, _tree$nodesRef$curren2;\n      const parentFloating = tree == null ? void 0 : (_tree$nodesRef$curren = tree.nodesRef.current.find(node => node.id === parentId)) == null ? void 0 : (_tree$nodesRef$curren2 = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren2.elements.floating;\n      if (parentFloating && !contains(parentFloating, activeElement$1(getDocument(parentFloating)))) {\n        parentFloating.focus({\n          preventScroll: true\n        });\n      }\n    }\n  }, [enabled, open, tree, parentId]);\n  index(() => {\n    keyRef.current = null;\n    previousOnNavigateRef.current = onNavigate;\n    previousOpenRef.current = open;\n  });\n  const hasActiveIndex = activeIndex != null;\n  const item = React.useMemo(() => {\n    function syncCurrentTarget(currentTarget) {\n      if (!open) return;\n      const index = listRef.current.indexOf(currentTarget);\n      if (index !== -1) {\n        onNavigate(index);\n      }\n    }\n    const props = {\n      onFocus(_ref2) {\n        let {\n          currentTarget\n        } = _ref2;\n        syncCurrentTarget(currentTarget);\n      },\n      onClick: _ref3 => {\n        let {\n          currentTarget\n        } = _ref3;\n        return currentTarget.focus({\n          preventScroll: true\n        });\n      },\n      // Safari\n      ...(focusItemOnHover && {\n        onMouseMove(_ref4) {\n          let {\n            currentTarget\n          } = _ref4;\n          syncCurrentTarget(currentTarget);\n        },\n        onPointerLeave() {\n          if (!isPointerModalityRef.current) {\n            return;\n          }\n          indexRef.current = -1;\n          focusItem(listRef, indexRef);\n\n          // Virtual cursor with VoiceOver on iOS needs this to be flushed\n          // synchronously or there is a glitch that prevents nested\n          // submenus from being accessible.\n          flushSync(() => onNavigate(null));\n          if (!virtual) {\n            var _refs$floating$curren;\n            // This also needs to be sync to prevent fast mouse movements\n            // from leaving behind a stale active item when landing on a\n            // disabled button item.\n            (_refs$floating$curren = refs.floating.current) == null ? void 0 : _refs$floating$curren.focus({\n              preventScroll: true\n            });\n          }\n        }\n      })\n    };\n    return props;\n  }, [open, refs, focusItem, focusItemOnHover, listRef, onNavigate, virtual]);\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    const disabledIndices = disabledIndicesRef.current;\n    function onKeyDown(event) {\n      isPointerModalityRef.current = false;\n      forceSyncFocus.current = true;\n\n      // If the floating element is animating out, ignore navigation. Otherwise,\n      // the `activeIndex` gets set to 0 despite not being open so the next time\n      // the user ArrowDowns, the first item won't be focused.\n      if (!latestOpenRef.current && event.currentTarget === refs.floating.current) {\n        return;\n      }\n      if (nested && isCrossOrientationCloseKey(event.key, orientation, rtl)) {\n        stopEvent(event);\n        onOpenChange(false);\n        if (isHTMLElement(domReference)) {\n          domReference.focus();\n        }\n        return;\n      }\n      const currentIndex = indexRef.current;\n      const minIndex = getMinIndex(listRef, disabledIndices);\n      const maxIndex = getMaxIndex(listRef, disabledIndices);\n      if (event.key === 'Home') {\n        indexRef.current = minIndex;\n        onNavigate(indexRef.current);\n      }\n      if (event.key === 'End') {\n        indexRef.current = maxIndex;\n        onNavigate(indexRef.current);\n      }\n\n      // Grid navigation.\n      if (cols > 1) {\n        const prevIndex = indexRef.current;\n        if (event.key === ARROW_UP) {\n          stopEvent(event);\n          if (prevIndex === -1) {\n            indexRef.current = maxIndex;\n          } else {\n            indexRef.current = findNonDisabledIndex(listRef, {\n              startingIndex: prevIndex,\n              amount: cols,\n              decrement: true,\n              disabledIndices\n            });\n            if (loop && (prevIndex - cols < minIndex || indexRef.current < 0)) {\n              const col = prevIndex % cols;\n              const maxCol = maxIndex % cols;\n              const offset = maxIndex - (maxCol - col);\n              if (maxCol === col) {\n                indexRef.current = maxIndex;\n              } else {\n                indexRef.current = maxCol > col ? offset : offset - cols;\n              }\n            }\n          }\n          if (isIndexOutOfBounds(listRef, indexRef.current)) {\n            indexRef.current = prevIndex;\n          }\n          onNavigate(indexRef.current);\n        }\n        if (event.key === ARROW_DOWN) {\n          stopEvent(event);\n          if (prevIndex === -1) {\n            indexRef.current = minIndex;\n          } else {\n            indexRef.current = findNonDisabledIndex(listRef, {\n              startingIndex: prevIndex,\n              amount: cols,\n              disabledIndices\n            });\n            if (loop && prevIndex + cols > maxIndex) {\n              indexRef.current = findNonDisabledIndex(listRef, {\n                startingIndex: prevIndex % cols - cols,\n                amount: cols,\n                disabledIndices\n              });\n            }\n          }\n          if (isIndexOutOfBounds(listRef, indexRef.current)) {\n            indexRef.current = prevIndex;\n          }\n          onNavigate(indexRef.current);\n        }\n\n        // Remains on the same row/column.\n        if (orientation === 'both') {\n          const prevRow = Math.floor(prevIndex / cols);\n          if (event.key === ARROW_RIGHT) {\n            stopEvent(event);\n            if (prevIndex % cols !== cols - 1) {\n              indexRef.current = findNonDisabledIndex(listRef, {\n                startingIndex: prevIndex,\n                disabledIndices\n              });\n              if (loop && isDifferentRow(indexRef.current, cols, prevRow)) {\n                indexRef.current = findNonDisabledIndex(listRef, {\n                  startingIndex: prevIndex - prevIndex % cols - 1,\n                  disabledIndices\n                });\n              }\n            } else if (loop) {\n              indexRef.current = findNonDisabledIndex(listRef, {\n                startingIndex: prevIndex - prevIndex % cols - 1,\n                disabledIndices\n              });\n            }\n            if (isDifferentRow(indexRef.current, cols, prevRow)) {\n              indexRef.current = prevIndex;\n            }\n          }\n          if (event.key === ARROW_LEFT) {\n            stopEvent(event);\n            if (prevIndex % cols !== 0) {\n              indexRef.current = findNonDisabledIndex(listRef, {\n                startingIndex: prevIndex,\n                disabledIndices,\n                decrement: true\n              });\n              if (loop && isDifferentRow(indexRef.current, cols, prevRow)) {\n                indexRef.current = findNonDisabledIndex(listRef, {\n                  startingIndex: prevIndex + (cols - prevIndex % cols),\n                  decrement: true,\n                  disabledIndices\n                });\n              }\n            } else if (loop) {\n              indexRef.current = findNonDisabledIndex(listRef, {\n                startingIndex: prevIndex + (cols - prevIndex % cols),\n                decrement: true,\n                disabledIndices\n              });\n            }\n            if (isDifferentRow(indexRef.current, cols, prevRow)) {\n              indexRef.current = prevIndex;\n            }\n          }\n          const lastRow = Math.floor(maxIndex / cols) === prevRow;\n          if (isIndexOutOfBounds(listRef, indexRef.current)) {\n            if (loop && lastRow) {\n              indexRef.current = event.key === ARROW_LEFT ? maxIndex : findNonDisabledIndex(listRef, {\n                startingIndex: prevIndex - prevIndex % cols - 1,\n                disabledIndices\n              });\n            } else {\n              indexRef.current = prevIndex;\n            }\n          }\n          onNavigate(indexRef.current);\n          return;\n        }\n      }\n      if (isMainOrientationKey(event.key, orientation)) {\n        stopEvent(event);\n\n        // Reset the index if no item is focused.\n        if (open && !virtual && activeElement$1(event.currentTarget.ownerDocument) === event.currentTarget) {\n          indexRef.current = isMainOrientationToEndKey(event.key, orientation, rtl) ? minIndex : maxIndex;\n          onNavigate(indexRef.current);\n          return;\n        }\n        if (isMainOrientationToEndKey(event.key, orientation, rtl)) {\n          if (loop) {\n            indexRef.current = currentIndex >= maxIndex ? allowEscape && currentIndex !== listRef.current.length ? -1 : minIndex : findNonDisabledIndex(listRef, {\n              startingIndex: currentIndex,\n              disabledIndices\n            });\n          } else {\n            indexRef.current = Math.min(maxIndex, findNonDisabledIndex(listRef, {\n              startingIndex: currentIndex,\n              disabledIndices\n            }));\n          }\n        } else {\n          if (loop) {\n            indexRef.current = currentIndex <= minIndex ? allowEscape && currentIndex !== -1 ? listRef.current.length : maxIndex : findNonDisabledIndex(listRef, {\n              startingIndex: currentIndex,\n              decrement: true,\n              disabledIndices\n            });\n          } else {\n            indexRef.current = Math.max(minIndex, findNonDisabledIndex(listRef, {\n              startingIndex: currentIndex,\n              decrement: true,\n              disabledIndices\n            }));\n          }\n        }\n        if (isIndexOutOfBounds(listRef, indexRef.current)) {\n          onNavigate(null);\n        } else {\n          onNavigate(indexRef.current);\n        }\n      }\n    }\n    function checkVirtualMouse(event) {\n      if (focusItemOnOpen === 'auto' && isVirtualClick(event.nativeEvent)) {\n        focusItemOnOpenRef.current = true;\n      }\n    }\n    function checkVirtualPointer(event) {\n      // `pointerdown` fires first, reset the state then perform the checks.\n      focusItemOnOpenRef.current = focusItemOnOpen;\n      if (focusItemOnOpen === 'auto' && isVirtualPointerEvent(event.nativeEvent)) {\n        focusItemOnOpenRef.current = true;\n      }\n    }\n    const ariaActiveDescendantProp = virtual && open && hasActiveIndex && {\n      'aria-activedescendant': activeId\n    };\n    return {\n      reference: {\n        ...ariaActiveDescendantProp,\n        onKeyDown(event) {\n          isPointerModalityRef.current = false;\n          const isArrowKey = event.key.indexOf('Arrow') === 0;\n          if (virtual && open) {\n            return onKeyDown(event);\n          }\n\n          // If a floating element should not open on arrow key down, avoid\n          // setting `activeIndex` while it's closed.\n          if (!open && !openOnArrowKeyDown && isArrowKey) {\n            return;\n          }\n          const isNavigationKey = isArrowKey || event.key === 'Enter' || event.key === ' ' || event.key === '';\n          if (isNavigationKey) {\n            keyRef.current = event.key;\n          }\n          if (nested) {\n            if (isCrossOrientationOpenKey(event.key, orientation, rtl)) {\n              stopEvent(event);\n              if (open) {\n                indexRef.current = getMinIndex(listRef, disabledIndices);\n                onNavigate(indexRef.current);\n              } else {\n                onOpenChange(true);\n              }\n            }\n            return;\n          }\n          if (isMainOrientationKey(event.key, orientation)) {\n            if (selectedIndex != null) {\n              indexRef.current = selectedIndex;\n            }\n            stopEvent(event);\n            if (!open && openOnArrowKeyDown) {\n              onOpenChange(true);\n            } else {\n              onKeyDown(event);\n            }\n            if (open) {\n              onNavigate(indexRef.current);\n            }\n          }\n        },\n        onFocus() {\n          if (open) {\n            onNavigate(null);\n          }\n        },\n        onPointerDown: checkVirtualPointer,\n        onMouseDown: checkVirtualMouse,\n        onClick: checkVirtualMouse\n      },\n      floating: {\n        'aria-orientation': orientation === 'both' ? undefined : orientation,\n        ...ariaActiveDescendantProp,\n        onKeyDown,\n        onPointerMove() {\n          isPointerModalityRef.current = true;\n        }\n      },\n      item\n    };\n  }, [domReference, refs, activeId, disabledIndicesRef, latestOpenRef, listRef, enabled, orientation, rtl, virtual, open, hasActiveIndex, nested, selectedIndex, openOnArrowKeyDown, allowEscape, cols, loop, focusItemOnOpen, onNavigate, onOpenChange, item]);\n};\n\n/**\n * Merges an array of refs into a single memoized callback ref or `null`.\n * @see https://floating-ui.com/docs/useMergeRefs\n */\nfunction useMergeRefs(refs) {\n  return React.useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n    return value => {\n      refs.forEach(ref => {\n        if (typeof ref === 'function') {\n          ref(value);\n        } else if (ref != null) {\n          ref.current = value;\n        }\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}\n\n/**\n * Adds base screen reader props to the reference and floating elements for a\n * given floating element `role`.\n * @see https://floating-ui.com/docs/useRole\n */\nconst useRole = function (_ref, _temp) {\n  let {\n    open\n  } = _ref;\n  let {\n    enabled = true,\n    role = 'dialog'\n  } = _temp === void 0 ? {} : _temp;\n  const rootId = useId();\n  const referenceId = useId();\n  return React.useMemo(() => {\n    const floatingProps = {\n      id: rootId,\n      role\n    };\n    if (!enabled) {\n      return {};\n    }\n    if (role === 'tooltip') {\n      return {\n        reference: {\n          'aria-describedby': open ? rootId : undefined\n        },\n        floating: floatingProps\n      };\n    }\n    return {\n      reference: {\n        'aria-expanded': open ? 'true' : 'false',\n        'aria-haspopup': role === 'alertdialog' ? 'dialog' : role,\n        'aria-controls': open ? rootId : undefined,\n        ...(role === 'listbox' && {\n          role: 'combobox'\n        }),\n        ...(role === 'menu' && {\n          id: referenceId\n        })\n      },\n      floating: {\n        ...floatingProps,\n        ...(role === 'menu' && {\n          'aria-labelledby': referenceId\n        })\n      }\n    };\n  }, [enabled, role, open, rootId, referenceId]);\n};\n\n// Converts a JS style key like `backgroundColor` to a CSS transition-property\n// like `background-color`.\nconst camelCaseToKebabCase = str => str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? '-' : '') + $.toLowerCase());\nfunction useDelayUnmount(open, durationMs) {\n  const [isMounted, setIsMounted] = React.useState(open);\n  if (open && !isMounted) {\n    setIsMounted(true);\n  }\n  React.useEffect(() => {\n    if (!open) {\n      const timeout = setTimeout(() => setIsMounted(false), durationMs);\n      return () => clearTimeout(timeout);\n    }\n  }, [open, durationMs]);\n  return isMounted;\n}\n/**\n * Provides a status string to apply CSS transitions to a floating element,\n * correctly handling placement-aware transitions.\n * @see https://floating-ui.com/docs/useTransition#usetransitionstatus\n */\nfunction useTransitionStatus(_ref, _temp) {\n  let {\n    open,\n    elements: {\n      floating\n    }\n  } = _ref;\n  let {\n    duration = 250\n  } = _temp === void 0 ? {} : _temp;\n  const isNumberDuration = typeof duration === 'number';\n  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;\n  const [initiated, setInitiated] = React.useState(false);\n  const [status, setStatus] = React.useState('unmounted');\n  const isMounted = useDelayUnmount(open, closeDuration);\n\n  // `initiated` check prevents this `setState` call from breaking\n  // <FloatingPortal />. This call is necessary to ensure subsequent opens\n  // after the initial one allows the correct side animation to play when the\n  // placement has changed.\n  index(() => {\n    if (initiated && !isMounted) {\n      setStatus('unmounted');\n    }\n  }, [initiated, isMounted]);\n  index(() => {\n    if (!floating) return;\n    if (open) {\n      setStatus('initial');\n      const frame = requestAnimationFrame(() => {\n        setStatus('open');\n      });\n      return () => {\n        cancelAnimationFrame(frame);\n      };\n    } else {\n      setInitiated(true);\n      setStatus('close');\n    }\n  }, [open, floating]);\n  return {\n    isMounted,\n    status\n  };\n}\n/**\n * Provides styles to apply CSS transitions to a floating element, correctly\n * handling placement-aware transitions. Wrapper around `useTransitionStatus`.\n * @see https://floating-ui.com/docs/useTransition#usetransitionstyles\n */\nfunction useTransitionStyles(context, _temp2) {\n  let {\n    initial: unstable_initial = {\n      opacity: 0\n    },\n    open: unstable_open,\n    close: unstable_close,\n    common: unstable_common,\n    duration = 250\n  } = _temp2 === void 0 ? {} : _temp2;\n  const placement = context.placement;\n  const side = placement.split('-')[0];\n  const [styles, setStyles] = React.useState({});\n  const {\n    isMounted,\n    status\n  } = useTransitionStatus(context, {\n    duration\n  });\n  const initialRef = useLatestRef(unstable_initial);\n  const openRef = useLatestRef(unstable_open);\n  const closeRef = useLatestRef(unstable_close);\n  const commonRef = useLatestRef(unstable_common);\n  const isNumberDuration = typeof duration === 'number';\n  const openDuration = (isNumberDuration ? duration : duration.open) || 0;\n  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;\n  index(() => {\n    const fnArgs = {\n      side,\n      placement\n    };\n    const initial = initialRef.current;\n    const close = closeRef.current;\n    const open = openRef.current;\n    const common = commonRef.current;\n    const initialStyles = typeof initial === 'function' ? initial(fnArgs) : initial;\n    const closeStyles = typeof close === 'function' ? close(fnArgs) : close;\n    const commonStyles = typeof common === 'function' ? common(fnArgs) : common;\n    const openStyles = (typeof open === 'function' ? open(fnArgs) : open) || Object.keys(initialStyles).reduce((acc, key) => {\n      acc[key] = '';\n      return acc;\n    }, {});\n    if (status === 'initial' || status === 'unmounted') {\n      setStyles(styles => ({\n        transitionProperty: styles.transitionProperty,\n        ...commonStyles,\n        ...initialStyles\n      }));\n    }\n    if (status === 'open') {\n      setStyles({\n        transitionProperty: Object.keys(openStyles).map(camelCaseToKebabCase).join(','),\n        transitionDuration: openDuration + \"ms\",\n        ...commonStyles,\n        ...openStyles\n      });\n    }\n    if (status === 'close') {\n      const styles = closeStyles || initialStyles;\n      setStyles({\n        transitionProperty: Object.keys(styles).map(camelCaseToKebabCase).join(','),\n        transitionDuration: closeDuration + \"ms\",\n        ...commonStyles,\n        ...styles\n      });\n    }\n  }, [side, placement, closeDuration, closeRef, initialRef, openRef, commonRef, openDuration, status]);\n  return {\n    isMounted,\n    styles\n  };\n}\n\n/**\n * Provides a matching callback that can be used to focus an item as the user\n * types, often used in tandem with `useListNavigation()`.\n * @see https://floating-ui.com/docs/useTypeahead\n */\nconst useTypeahead = function (_ref, _temp) {\n  var _ref2;\n  let {\n    open,\n    dataRef,\n    refs\n  } = _ref;\n  let {\n    listRef,\n    activeIndex,\n    onMatch: unstable_onMatch = () => {},\n    enabled = true,\n    findMatch = null,\n    resetMs = 1000,\n    ignoreKeys = [],\n    selectedIndex = null\n  } = _temp === void 0 ? {\n    listRef: {\n      current: []\n    },\n    activeIndex: null\n  } : _temp;\n  const timeoutIdRef = React.useRef();\n  const stringRef = React.useRef('');\n  const prevIndexRef = React.useRef((_ref2 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref2 : -1);\n  const matchIndexRef = React.useRef(null);\n  const onMatch = useEvent(unstable_onMatch);\n  const findMatchRef = useLatestRef(findMatch);\n  const ignoreKeysRef = useLatestRef(ignoreKeys);\n  index(() => {\n    if (open) {\n      clearTimeout(timeoutIdRef.current);\n      matchIndexRef.current = null;\n      stringRef.current = '';\n    }\n  }, [open]);\n  index(() => {\n    // Sync arrow key navigation but not typeahead navigation.\n    if (open && stringRef.current === '') {\n      var _ref3;\n      prevIndexRef.current = (_ref3 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref3 : -1;\n    }\n  }, [open, selectedIndex, activeIndex]);\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    function onKeyDown(event) {\n      var _refs$floating$curren;\n      // Correctly scope nested non-portalled floating elements. Since the nested\n      // floating element is inside of the another, we find the closest role\n      // that indicates the floating element scope.\n      const target = getTarget(event.nativeEvent);\n      if (isElement(target) && (activeElement$1(getDocument(target)) !== event.currentTarget ? (_refs$floating$curren = refs.floating.current) != null && _refs$floating$curren.contains(target) ? target.closest('[role=\"dialog\"],[role=\"menu\"],[role=\"listbox\"],[role=\"tree\"],[role=\"grid\"]') !== event.currentTarget : false : !event.currentTarget.contains(target))) {\n        return;\n      }\n      if (stringRef.current.length > 0 && stringRef.current[0] !== ' ') {\n        dataRef.current.typing = true;\n        if (event.key === ' ') {\n          stopEvent(event);\n        }\n      }\n      const listContent = listRef.current;\n      if (listContent == null || ignoreKeysRef.current.includes(event.key) ||\n      // Character key.\n      event.key.length !== 1 ||\n      // Modifier key.\n      event.ctrlKey || event.metaKey || event.altKey) {\n        return;\n      }\n\n      // Bail out if the list contains a word like \"llama\" or \"aaron\". TODO:\n      // allow it in this case, too.\n      const allowRapidSuccessionOfFirstLetter = listContent.every(text => {\n        var _text$, _text$2;\n        return text ? ((_text$ = text[0]) == null ? void 0 : _text$.toLocaleLowerCase()) !== ((_text$2 = text[1]) == null ? void 0 : _text$2.toLocaleLowerCase()) : true;\n      });\n\n      // Allows the user to cycle through items that start with the same letter\n      // in rapid succession.\n      if (allowRapidSuccessionOfFirstLetter && stringRef.current === event.key) {\n        stringRef.current = '';\n        prevIndexRef.current = matchIndexRef.current;\n      }\n      stringRef.current += event.key;\n      clearTimeout(timeoutIdRef.current);\n      timeoutIdRef.current = setTimeout(() => {\n        stringRef.current = '';\n        prevIndexRef.current = matchIndexRef.current;\n        dataRef.current.typing = false;\n      }, resetMs);\n      const prevIndex = prevIndexRef.current;\n      const orderedList = [...listContent.slice((prevIndex || 0) + 1), ...listContent.slice(0, (prevIndex || 0) + 1)];\n      const str = findMatchRef.current ? findMatchRef.current(orderedList, stringRef.current) : orderedList.find(text => (text == null ? void 0 : text.toLocaleLowerCase().indexOf(stringRef.current.toLocaleLowerCase())) === 0);\n      const index = str ? listContent.indexOf(str) : -1;\n      if (index !== -1) {\n        onMatch(index);\n        matchIndexRef.current = index;\n      }\n    }\n    return {\n      reference: {\n        onKeyDown\n      },\n      floating: {\n        onKeyDown\n      }\n    };\n  }, [enabled, dataRef, listRef, resetMs, ignoreKeysRef, findMatchRef, onMatch, refs]);\n};\n\nfunction getArgsWithCustomFloatingHeight(state, height) {\n  return {\n    ...state,\n    rects: {\n      ...state.rects,\n      floating: {\n        ...state.rects.floating,\n        height\n      }\n    }\n  };\n}\n/**\n * Positions the floating element such that an inner element inside\n * of it is anchored to the reference element.\n * @see https://floating-ui.com/docs/inner\n */\nconst inner = props => ({\n  name: 'inner',\n  options: props,\n  async fn(state) {\n    const {\n      listRef,\n      overflowRef,\n      onFallbackChange,\n      offset: innerOffset = 0,\n      index = 0,\n      minItemsVisible = 4,\n      referenceOverflowThreshold = 0,\n      scrollRef,\n      ...detectOverflowOptions\n    } = props;\n    const {\n      rects,\n      elements: {\n        floating\n      }\n    } = state;\n    const item = listRef.current[index];\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!state.placement.startsWith('bottom')) {\n        console.warn(['Floating UI: `placement` side must be \"bottom\" when using the', '`inner` middleware.'].join(' '));\n      }\n    }\n    if (!item) {\n      return {};\n    }\n    const nextArgs = {\n      ...state,\n      ...(await offset(-item.offsetTop - rects.reference.height / 2 - item.offsetHeight / 2 - innerOffset).fn(state))\n    };\n    const el = (scrollRef == null ? void 0 : scrollRef.current) || floating;\n    const overflow = await detectOverflow(getArgsWithCustomFloatingHeight(nextArgs, el.scrollHeight), detectOverflowOptions);\n    const refOverflow = await detectOverflow(nextArgs, {\n      ...detectOverflowOptions,\n      elementContext: 'reference'\n    });\n    const diffY = Math.max(0, overflow.top);\n    const nextY = nextArgs.y + diffY;\n    const maxHeight = Math.max(0, el.scrollHeight - diffY - Math.max(0, overflow.bottom));\n    el.style.maxHeight = maxHeight + \"px\";\n    el.scrollTop = diffY;\n\n    // There is not enough space, fallback to standard anchored positioning\n    if (onFallbackChange) {\n      if (el.offsetHeight < item.offsetHeight * Math.min(minItemsVisible, listRef.current.length - 1) - 1 || refOverflow.top >= -referenceOverflowThreshold || refOverflow.bottom >= -referenceOverflowThreshold) {\n        flushSync(() => onFallbackChange(true));\n      } else {\n        flushSync(() => onFallbackChange(false));\n      }\n    }\n    if (overflowRef) {\n      overflowRef.current = await detectOverflow(getArgsWithCustomFloatingHeight({\n        ...nextArgs,\n        y: nextY\n      }, el.offsetHeight), detectOverflowOptions);\n    }\n    return {\n      y: nextY\n    };\n  }\n});\n/**\n * Changes the `inner` middleware's `offset` upon a `wheel` event to\n * expand the floating element's height, revealing more list items.\n * @see https://floating-ui.com/docs/inner\n */\nconst useInnerOffset = (_ref, _ref2) => {\n  let {\n    open,\n    elements\n  } = _ref;\n  let {\n    enabled = true,\n    overflowRef,\n    scrollRef,\n    onChange: unstable_onChange\n  } = _ref2;\n  const onChange = useEvent(unstable_onChange);\n  const controlledScrollingRef = React.useRef(false);\n  const prevScrollTopRef = React.useRef(null);\n  const initialOverflowRef = React.useRef(null);\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    function onWheel(e) {\n      if (e.ctrlKey || !el || overflowRef.current == null) {\n        return;\n      }\n      const dY = e.deltaY;\n      const isAtTop = overflowRef.current.top >= -0.5;\n      const isAtBottom = overflowRef.current.bottom >= -0.5;\n      const remainingScroll = el.scrollHeight - el.clientHeight;\n      const sign = dY < 0 ? -1 : 1;\n      const method = dY < 0 ? 'max' : 'min';\n      if (el.scrollHeight <= el.clientHeight) {\n        return;\n      }\n      if (!isAtTop && dY > 0 || !isAtBottom && dY < 0) {\n        e.preventDefault();\n        flushSync(() => {\n          onChange(d => d + Math[method](dY, remainingScroll * sign));\n        });\n      } else if (/firefox/i.test(getUserAgent())) {\n        // Needed to propagate scrolling during momentum scrolling phase once\n        // it gets limited by the boundary. UX improvement, not critical.\n        el.scrollTop += dY;\n      }\n    }\n    const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\n    if (open && el) {\n      el.addEventListener('wheel', onWheel);\n\n      // Wait for the position to be ready.\n      requestAnimationFrame(() => {\n        prevScrollTopRef.current = el.scrollTop;\n        if (overflowRef.current != null) {\n          initialOverflowRef.current = {\n            ...overflowRef.current\n          };\n        }\n      });\n      return () => {\n        prevScrollTopRef.current = null;\n        initialOverflowRef.current = null;\n        el.removeEventListener('wheel', onWheel);\n      };\n    }\n  }, [enabled, open, elements.floating, overflowRef, scrollRef, onChange]);\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    return {\n      floating: {\n        onKeyDown() {\n          controlledScrollingRef.current = true;\n        },\n        onWheel() {\n          controlledScrollingRef.current = false;\n        },\n        onPointerMove() {\n          controlledScrollingRef.current = false;\n        },\n        onScroll() {\n          const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\n          if (!overflowRef.current || !el || !controlledScrollingRef.current) {\n            return;\n          }\n          if (prevScrollTopRef.current !== null) {\n            const scrollDiff = el.scrollTop - prevScrollTopRef.current;\n            if (overflowRef.current.bottom < -0.5 && scrollDiff < -1 || overflowRef.current.top < -0.5 && scrollDiff > 1) {\n              flushSync(() => onChange(d => d + scrollDiff));\n            }\n          }\n\n          // [Firefox] Wait for the height change to have been applied.\n          requestAnimationFrame(() => {\n            prevScrollTopRef.current = el.scrollTop;\n          });\n        }\n      }\n    };\n  }, [enabled, overflowRef, elements.floating, scrollRef, onChange]);\n};\n\nfunction isPointInPolygon(point, polygon) {\n  const [x, y] = point;\n  let isInside = false;\n  const length = polygon.length;\n  for (let i = 0, j = length - 1; i < length; j = i++) {\n    const [xi, yi] = polygon[i] || [0, 0];\n    const [xj, yj] = polygon[j] || [0, 0];\n    const intersect = yi >= y !== yj >= y && x <= (xj - xi) * (y - yi) / (yj - yi) + xi;\n    if (intersect) {\n      isInside = !isInside;\n    }\n  }\n  return isInside;\n}\nfunction isInside(point, rect) {\n  return point[0] >= rect.x && point[0] <= rect.x + rect.width && point[1] >= rect.y && point[1] <= rect.y + rect.height;\n}\nfunction safePolygon(_temp) {\n  let {\n    restMs = 0,\n    buffer = 0.5,\n    blockPointerEvents = false\n  } = _temp === void 0 ? {} : _temp;\n  let timeoutId;\n  let isInsideRect = false;\n  let hasLanded = false;\n  const fn = _ref => {\n    let {\n      x,\n      y,\n      placement,\n      elements,\n      onClose,\n      nodeId,\n      tree\n    } = _ref;\n    return function onMouseMove(event) {\n      function close() {\n        clearTimeout(timeoutId);\n        onClose();\n      }\n      clearTimeout(timeoutId);\n      if (!elements.domReference || !elements.floating || placement == null || x == null || y == null) {\n        return;\n      }\n      const {\n        clientX,\n        clientY\n      } = event;\n      const clientPoint = [clientX, clientY];\n      const target = getTarget(event);\n      const isLeave = event.type === 'mouseleave';\n      const isOverFloatingEl = contains(elements.floating, target);\n      const isOverReferenceEl = contains(elements.domReference, target);\n      const refRect = elements.domReference.getBoundingClientRect();\n      const rect = elements.floating.getBoundingClientRect();\n      const side = placement.split('-')[0];\n      const cursorLeaveFromRight = x > rect.right - rect.width / 2;\n      const cursorLeaveFromBottom = y > rect.bottom - rect.height / 2;\n      const isOverReferenceRect = isInside(clientPoint, refRect);\n      if (isOverFloatingEl) {\n        hasLanded = true;\n        if (!isLeave) {\n          return;\n        }\n      }\n      if (isOverReferenceEl) {\n        hasLanded = false;\n      }\n      if (isOverReferenceEl && !isLeave) {\n        hasLanded = true;\n        return;\n      }\n\n      // Prevent overlapping floating element from being stuck in an open-close\n      // loop: https://github.com/floating-ui/floating-ui/issues/1910\n      if (isLeave && isElement(event.relatedTarget) && contains(elements.floating, event.relatedTarget)) {\n        return;\n      }\n\n      // If any nested child is open, abort.\n      if (tree && getChildren(tree.nodesRef.current, nodeId).some(_ref2 => {\n        let {\n          context\n        } = _ref2;\n        return context == null ? void 0 : context.open;\n      })) {\n        return;\n      }\n\n      // If the pointer is leaving from the opposite side, the \"buffer\" logic\n      // creates a point where the floating element remains open, but should be\n      // ignored.\n      // A constant of 1 handles floating point rounding errors.\n      if (side === 'top' && y >= refRect.bottom - 1 || side === 'bottom' && y <= refRect.top + 1 || side === 'left' && x >= refRect.right - 1 || side === 'right' && x <= refRect.left + 1) {\n        return close();\n      }\n\n      // Ignore when the cursor is within the rectangular trough between the\n      // two elements. Since the triangle is created from the cursor point,\n      // which can start beyond the ref element's edge, traversing back and\n      // forth from the ref to the floating element can cause it to close. This\n      // ensures it always remains open in that case.\n      let rectPoly = [];\n      switch (side) {\n        case 'top':\n          rectPoly = [[rect.left, refRect.top + 1], [rect.left, rect.bottom - 1], [rect.right, rect.bottom - 1], [rect.right, refRect.top + 1]];\n          isInsideRect = clientX >= rect.left && clientX <= rect.right && clientY >= rect.top && clientY <= refRect.top + 1;\n          break;\n        case 'bottom':\n          rectPoly = [[rect.left, rect.top + 1], [rect.left, refRect.bottom - 1], [rect.right, refRect.bottom - 1], [rect.right, rect.top + 1]];\n          isInsideRect = clientX >= rect.left && clientX <= rect.right && clientY >= refRect.bottom - 1 && clientY <= rect.bottom;\n          break;\n        case 'left':\n          rectPoly = [[rect.right - 1, rect.bottom], [rect.right - 1, rect.top], [refRect.left + 1, rect.top], [refRect.left + 1, rect.bottom]];\n          isInsideRect = clientX >= rect.left && clientX <= refRect.left + 1 && clientY >= rect.top && clientY <= rect.bottom;\n          break;\n        case 'right':\n          rectPoly = [[refRect.right - 1, rect.bottom], [refRect.right - 1, rect.top], [rect.left + 1, rect.top], [rect.left + 1, rect.bottom]];\n          isInsideRect = clientX >= refRect.right - 1 && clientX <= rect.right && clientY >= rect.top && clientY <= rect.bottom;\n          break;\n      }\n      function getPolygon(_ref3) {\n        let [x, y] = _ref3;\n        const isFloatingWider = rect.width > refRect.width;\n        const isFloatingTaller = rect.height > refRect.height;\n        switch (side) {\n          case 'top':\n            {\n              const cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];\n              const cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];\n              const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer]];\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\n            }\n          case 'bottom':\n            {\n              const cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];\n              const cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];\n              const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer]];\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\n            }\n          case 'left':\n            {\n              const cursorPointOne = [x + buffer + 1, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const cursorPointTwo = [x + buffer + 1, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const commonPoints = [[cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer, rect.bottom]];\n              return [...commonPoints, cursorPointOne, cursorPointTwo];\n            }\n          case 'right':\n            {\n              const cursorPointOne = [x - buffer, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const cursorPointTwo = [x - buffer, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const commonPoints = [[cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer, rect.bottom]];\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\n            }\n        }\n      }\n      const poly = isInsideRect ? rectPoly : getPolygon([x, y]);\n      if (isInsideRect) {\n        return;\n      } else if (hasLanded && !isOverReferenceRect) {\n        return close();\n      }\n      if (!isPointInPolygon([clientX, clientY], poly)) {\n        close();\n      } else if (restMs && !hasLanded) {\n        timeoutId = setTimeout(close, restMs);\n      }\n    };\n  };\n  fn.__options = {\n    blockPointerEvents\n  };\n  return fn;\n}\n\n/**\n * Provides data to position a floating element and context to add interactions.\n * @see https://floating-ui.com/docs/react\n */\nfunction useFloating(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    open = false,\n    onOpenChange: unstable_onOpenChange,\n    nodeId\n  } = options;\n  const position = useFloating$1(options);\n  const tree = useFloatingTree();\n  const domReferenceRef = React.useRef(null);\n  const dataRef = React.useRef({});\n  const events = React.useState(() => createPubSub())[0];\n  const [domReference, setDomReference] = React.useState(null);\n  const setPositionReference = React.useCallback(node => {\n    const positionReference = isElement(node) ? {\n      getBoundingClientRect: () => node.getBoundingClientRect(),\n      contextElement: node\n    } : node;\n    position.refs.setReference(positionReference);\n  }, [position.refs]);\n  const setReference = React.useCallback(node => {\n    if (isElement(node) || node === null) {\n      domReferenceRef.current = node;\n      setDomReference(node);\n    }\n\n    // Backwards-compatibility for passing a virtual element to `reference`\n    // after it has set the DOM reference.\n    if (isElement(position.refs.reference.current) || position.refs.reference.current === null ||\n    // Don't allow setting virtual elements using the old technique back to\n    // `null` to support `positionReference` + an unstable `reference`\n    // callback ref.\n    node !== null && !isElement(node)) {\n      position.refs.setReference(node);\n    }\n  }, [position.refs]);\n  const refs = React.useMemo(() => ({\n    ...position.refs,\n    setReference,\n    setPositionReference,\n    domReference: domReferenceRef\n  }), [position.refs, setReference, setPositionReference]);\n  const elements = React.useMemo(() => ({\n    ...position.elements,\n    domReference: domReference\n  }), [position.elements, domReference]);\n  const onOpenChange = useEvent(unstable_onOpenChange);\n  const context = React.useMemo(() => ({\n    ...position,\n    refs,\n    elements,\n    dataRef,\n    nodeId,\n    events,\n    open,\n    onOpenChange\n  }), [position, nodeId, events, open, onOpenChange, refs, elements]);\n  index(() => {\n    const node = tree == null ? void 0 : tree.nodesRef.current.find(node => node.id === nodeId);\n    if (node) {\n      node.context = context;\n    }\n  });\n  return React.useMemo(() => ({\n    ...position,\n    context,\n    refs,\n    reference: setReference,\n    positionReference: setPositionReference\n  }), [position, refs, context, setReference, setPositionReference]);\n}\n\nfunction mergeProps(userProps, propsList, elementKey) {\n  const map = new Map();\n  return {\n    ...(elementKey === 'floating' && {\n      tabIndex: -1\n    }),\n    ...userProps,\n    ...propsList.map(value => value ? value[elementKey] : null).concat(userProps).reduce((acc, props) => {\n      if (!props) {\n        return acc;\n      }\n      Object.entries(props).forEach(_ref => {\n        let [key, value] = _ref;\n        if (key.indexOf('on') === 0) {\n          if (!map.has(key)) {\n            map.set(key, []);\n          }\n          if (typeof value === 'function') {\n            var _map$get;\n            (_map$get = map.get(key)) == null ? void 0 : _map$get.push(value);\n            acc[key] = function () {\n              var _map$get2;\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n              (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.forEach(fn => fn(...args));\n            };\n          }\n        } else {\n          acc[key] = value;\n        }\n      });\n      return acc;\n    }, {})\n  };\n}\nconst useInteractions = function (propsList) {\n  if (propsList === void 0) {\n    propsList = [];\n  }\n  // The dependencies are a dynamic array, so we can't use the linter's\n  // suggestion to add it to the deps array.\n  const deps = propsList;\n  const getReferenceProps = React.useCallback(userProps => mergeProps(userProps, propsList, 'reference'),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  deps);\n  const getFloatingProps = React.useCallback(userProps => mergeProps(userProps, propsList, 'floating'),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  deps);\n  const getItemProps = React.useCallback(userProps => mergeProps(userProps, propsList, 'item'),\n  // Granularly check for `item` changes, because the `getItemProps` getter\n  // should be as referentially stable as possible since it may be passed as\n  // a prop to many components. All `item` key values must therefore be\n  // memoized.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  propsList.map(key => key == null ? void 0 : key.item));\n  return React.useMemo(() => ({\n    getReferenceProps,\n    getFloatingProps,\n    getItemProps\n  }), [getReferenceProps, getFloatingProps, getItemProps]);\n};\n\nexport { FloatingDelayGroup, FloatingFocusManager, FloatingNode, FloatingOverlay, FloatingPortal, FloatingTree, inner, safePolygon, useClick, useDelayGroup, useDelayGroupContext, useDismiss, useFloating, useFloatingNodeId, useFloatingParentNodeId, useFloatingPortalNode, useFloatingTree, useFocus, useHover, useId, useInnerOffset, useInteractions, useListNavigation, useMergeRefs, useRole, useTransitionStatus, useTransitionStyles, useTypeahead };\n","import { rem } from '@mantine/styles';\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nfunction horizontalSide(placement, arrowY, arrowOffset, arrowPosition) {\n  if (placement === \"center\" || arrowPosition === \"center\") {\n    return { top: arrowY };\n  }\n  if (placement === \"end\") {\n    return { bottom: arrowOffset };\n  }\n  if (placement === \"start\") {\n    return { top: arrowOffset };\n  }\n  return {};\n}\nfunction verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir) {\n  if (placement === \"center\" || arrowPosition === \"center\") {\n    return { left: arrowX };\n  }\n  if (placement === \"end\") {\n    return { [dir === \"ltr\" ? \"right\" : \"left\"]: arrowOffset };\n  }\n  if (placement === \"start\") {\n    return { [dir === \"ltr\" ? \"left\" : \"right\"]: arrowOffset };\n  }\n  return {};\n}\nconst radiusByFloatingSide = {\n  bottom: \"borderTopLeftRadius\",\n  left: \"borderTopRightRadius\",\n  right: \"borderBottomLeftRadius\",\n  top: \"borderBottomRightRadius\"\n};\nfunction getArrowPositionStyles({\n  position,\n  arrowSize,\n  arrowOffset,\n  arrowRadius,\n  arrowPosition,\n  arrowX,\n  arrowY,\n  dir\n}) {\n  const [side, placement = \"center\"] = position.split(\"-\");\n  const baseStyles = {\n    width: rem(arrowSize),\n    height: rem(arrowSize),\n    transform: \"rotate(45deg)\",\n    position: \"absolute\",\n    [radiusByFloatingSide[side]]: rem(arrowRadius)\n  };\n  const arrowPlacement = rem(-arrowSize / 2);\n  if (side === \"left\") {\n    return __spreadProps(__spreadValues(__spreadValues({}, baseStyles), horizontalSide(placement, arrowY, arrowOffset, arrowPosition)), {\n      right: arrowPlacement,\n      borderLeftColor: \"transparent\",\n      borderBottomColor: \"transparent\"\n    });\n  }\n  if (side === \"right\") {\n    return __spreadProps(__spreadValues(__spreadValues({}, baseStyles), horizontalSide(placement, arrowY, arrowOffset, arrowPosition)), {\n      left: arrowPlacement,\n      borderRightColor: \"transparent\",\n      borderTopColor: \"transparent\"\n    });\n  }\n  if (side === \"top\") {\n    return __spreadProps(__spreadValues(__spreadValues({}, baseStyles), verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir)), {\n      bottom: arrowPlacement,\n      borderTopColor: \"transparent\",\n      borderLeftColor: \"transparent\"\n    });\n  }\n  if (side === \"bottom\") {\n    return __spreadProps(__spreadValues(__spreadValues({}, baseStyles), verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir)), {\n      top: arrowPlacement,\n      borderBottomColor: \"transparent\",\n      borderRightColor: \"transparent\"\n    });\n  }\n  return {};\n}\n\nexport { getArrowPositionStyles };\n//# sourceMappingURL=get-arrow-position-styles.js.map\n","import React, { forwardRef } from 'react';\nimport { useMantineTheme } from '@mantine/styles';\nimport { getArrowPositionStyles } from './get-arrow-position-styles.js';\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nconst FloatingArrow = forwardRef((_a, ref) => {\n  var _b = _a, {\n    position,\n    arrowSize,\n    arrowOffset,\n    arrowRadius,\n    arrowPosition,\n    visible,\n    arrowX,\n    arrowY\n  } = _b, others = __objRest(_b, [\n    \"position\",\n    \"arrowSize\",\n    \"arrowOffset\",\n    \"arrowRadius\",\n    \"arrowPosition\",\n    \"visible\",\n    \"arrowX\",\n    \"arrowY\"\n  ]);\n  const theme = useMantineTheme();\n  if (!visible) {\n    return null;\n  }\n  return /* @__PURE__ */ React.createElement(\"div\", __spreadProps(__spreadValues({}, others), {\n    ref,\n    style: getArrowPositionStyles({\n      position,\n      arrowSize,\n      arrowOffset,\n      arrowRadius,\n      arrowPosition,\n      dir: theme.dir,\n      arrowX,\n      arrowY\n    })\n  }));\n});\nFloatingArrow.displayName = \"@mantine/core/FloatingArrow\";\n\nexport { FloatingArrow };\n//# sourceMappingURL=FloatingArrow.js.map\n","function getFloatingPosition(dir, position) {\n  if (dir === \"rtl\" && (position.includes(\"right\") || position.includes(\"left\"))) {\n    const [side, placement] = position.split(\"-\");\n    const flippedPosition = side === \"right\" ? \"left\" : \"right\";\n    return placement === void 0 ? flippedPosition : `${flippedPosition}-${placement}`;\n  }\n  return position;\n}\n\nexport { getFloatingPosition };\n//# sourceMappingURL=get-floating-position.js.map\n","import { useState, useEffect } from 'react';\nimport { autoUpdate } from '@floating-ui/react';\nimport { useDidUpdate } from '@mantine/hooks';\n\nfunction useFloatingAutoUpdate({\n  opened,\n  floating,\n  position,\n  positionDependencies\n}) {\n  const [delayedUpdate, setDelayedUpdate] = useState(0);\n  useEffect(() => {\n    if (floating.refs.reference.current && floating.refs.floating.current) {\n      return autoUpdate(floating.refs.reference.current, floating.refs.floating.current, floating.update);\n    }\n    return void 0;\n  }, [\n    floating.refs.reference.current,\n    floating.refs.floating.current,\n    opened,\n    delayedUpdate,\n    position\n  ]);\n  useDidUpdate(() => {\n    floating.update();\n  }, positionDependencies);\n  useDidUpdate(() => {\n    setDelayedUpdate((c) => c + 1);\n  }, [opened]);\n}\n\nexport { useFloatingAutoUpdate };\n//# sourceMappingURL=use-floating-auto-update.js.map\n","function packSx(sx) {\n  return Array.isArray(sx) ? sx : [sx];\n}\n\nexport { packSx };\n//# sourceMappingURL=pack-sx.js.map\n","import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? min$1 - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset + alignmentOffset\n      }\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isYAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n","import { rectToClientRect, computePosition as computePosition$1 } from '@floating-ui/core';\nexport { arrow, autoPlacement, detectOverflow, flip, hide, inline, limitShift, offset, shift, size } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle, isHTMLElement, isElement, getWindow, isWebKit, getDocumentElement, getNodeName, isOverflowElement, getNodeScroll, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentIFrame = win.frameElement;\n    while (currentIFrame && offsetParent && offsetWin !== win) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentIFrame = getWindow(currentIFrame).frameElement;\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  if (offsetParent === documentElement) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      ...clippingAncestor,\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  return getCssDimensions(element);\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  return element.offsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const window = getWindow(element);\n  if (!isHTMLElement(element)) {\n    return window;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {\n    return window;\n  }\n  return offsetParent || getContainingBlock(element) || window;\n}\n\nconst getElementRects = async function (_ref) {\n  let {\n    reference,\n    floating,\n    strategy\n  } = _ref;\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  return {\n    reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      ...(await getDimensionsFn(floating))\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    clearTimeout(timeoutId);\n    io && io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = element.getBoundingClientRect();\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 100);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          resizeObserver && resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo && cleanupIo();\n    resizeObserver && resizeObserver.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain CSS positioning\n * strategy.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { autoUpdate, computePosition, platform };\n","const sides = ['top', 'right', 'bottom', 'left'];\nconst alignments = ['start', 'end'];\nconst placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = v => ({\n  x: v,\n  y: v\n});\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\nfunction getAxisLength(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nfunction getSideAxis(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\nexport { alignments, clamp, createCoords, evaluate, expandPaddingObject, floor, getAlignment, getAlignmentAxis, getAlignmentSides, getAxisLength, getExpandedPlacements, getOppositeAlignmentPlacement, getOppositeAxis, getOppositeAxisPlacements, getOppositePlacement, getPaddingObject, getSide, getSideAxis, max, min, placements, rectToClientRect, round, sides };\n","function getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  // Browsers without `ShadowRoot` support.\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);\n}\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].includes(getNodeName(element));\n}\nfunction isContainingBlock(element) {\n  const webkit = isWebKit();\n  const css = getComputedStyle(element);\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  return css.transform !== 'none' || css.perspective !== 'none' || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else {\n      currentNode = getParentNode(currentNode);\n    }\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nfunction isLastTraversableNode(node) {\n  return ['html', 'body', '#document'].includes(getNodeName(node));\n}\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.pageXOffset,\n    scrollTop: element.pageYOffset\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));\n}\n\nexport { getComputedStyle, getContainingBlock, getDocumentElement, getNearestOverflowAncestor, getNodeName, getNodeScroll, getOverflowAncestors, getParentNode, getWindow, isContainingBlock, isElement, isHTMLElement, isLastTraversableNode, isNode, isOverflowElement, isShadowRoot, isTableElement, isWebKit };\n"],"names":["arrow","options","element","padding","name","fn","args","Object","prototype","hasOwnProperty","call","current","_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__","x7","index","document","react__WEBPACK_IMPORTED_MODULE_0__","useLayoutEffect","useEffect","deepEqual","a","b","length","i","keys","toString","Array","isArray","key","$$typeof","useLatestRef","value","ref","useRef","useFloating","placement","strategy","middleware","platform","whileElementsMounted","open","data","setData","useState","x","y","middlewareData","isPositioned","latestMiddleware","setLatestMiddleware","referenceRef","floatingRef","dataRef","whileElementsMountedRef","platformRef","reference","_setReference","floating","_setFloating","setReference","useCallback","node","setFloating","update","config","_floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__","oo","then","fullData","isMountedRef","react_dom__WEBPACK_IMPORTED_MODULE_1__","flushSync","refs","useMemo","elements","serverHandoffComplete","count","genId","useReactId","react__WEBPACK_IMPORTED_MODULE_0___namespace_cache","__webpack_require__","t","useId","id","setId","undefined","FloatingNodeContext","createContext","FloatingTreeContext","useFloatingParentNodeId","_React$useContext","useContext","useFloatingTree","getDocument","ownerDocument","getWindow","defaultView","window","isElement","Element","isHTMLElement","HTMLElement","isMouseLikePointerType","pointerType","strict","values","push","includes","safePolygonIdentifier","getDelay","prop","useHover","context","_temp","enabled","delay","handleClose","mouseOnly","restMs","move","onOpenChange","events","domReference","tree","parentId","handleCloseRef","delayRef","pointerTypeRef","timeoutRef","handlerRef","restTimeoutRef","blockMouseMoveRef","performedPointerEventsMutationRef","unbindMouseMoveRef","isHoverOpen","_dataRef$current$open","type","openEvent","on","onDismiss","off","clearTimeout","onLeave","html","documentElement","addEventListener","removeEventListener","closeWithDelay","runElseBranch","closeDelay","setTimeout","cleanupMouseMoveHandler","clearPointerEvents","body","style","pointerEvents","removeAttribute","onScrollMouseLeave","onMouseEnter","once","onMouseLeave","isClickLikeOpenEvent","event","openDelay","doc","clientX","clientY","onClose","handler","_handleCloseRef$curre","_tree$nodesRef$curren","_tree$nodesRef$curren2","__options","blockPointerEvents","setAttribute","parentFloating","nodesRef","find","setPointerRef","onPointerDown","onPointerEnter","onMouseMove","emit","returnFocus","FloatingDelayGroupContext","initialDelay","timeoutMs","currentId","setCurrentId","setState","isInstantPhase","useDelayGroupContext","FloatingDelayGroup","_ref","children","state","useReducer","prev","next","initialCurrentIdRef","createElement","Provider","useDelayGroup","_ref2","_ref3","close","unset","timeout","contains","parent","child","rootNode","getRootNode","isShadowRoot","ShadowRoot","OwnElement","parentNode","host","getChildren","nodes","allChildren","filter","_node$context","currentChildren","_currentChildren","some","n","_node$context2","concat","useInsertionEffect","useSafeInsertionEffect","useEvent","callback","_len","arguments","_key","isEventTargetWithin","composedPath","e","target","bubbleHandlerKeys","pointerdown","mousedown","click","captureHandlerKeys","normalizeBubblesProp","bubbles","_bubbles$escapeKey","_bubbles$outsidePress","escapeKeyBubbles","escapeKey","outsidePressBubbles","outsidePress","useDismiss","nodeId","unstable_outsidePress","outsidePressEvent","referencePress","referencePressEvent","ancestorScroll","nested","outsidePressFn","insideReactTreeRef","onKeyDown","shouldDismiss","forEach","_child$context","__escapeKeyBubbles","preventScroll","onOutsidePress","insideReactTree","win","canScrollX","scrollWidth","clientWidth","canScrollY","scrollHeight","clientHeight","xCond","offsetX","isRTL","getComputedStyle","direction","offsetWidth","offsetY","targetIsInsideChildren","_child$context2","__outsidePressBubbles","isVirtualClick","mozInputSource","isTrusted","androidRe","test","getPlatform","uaData","navigator","userAgentData","getUserAgent","brands","map","brand","version","join","userAgent","buttons","detail","width","height","pressure","onScroll","ancestors","_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__","Kx","contextElement","ancestor","_doc$defaultView","visualViewport","passive","useFocus","keyboardOnly","blockFocusRef","onBlur","activeElement$1","activeElement","_activeElement","_activeElement$shadow","shadowRoot","payload","onFocus","nativeEvent","relatedTarget","movedToFocusGuard","hasAttribute","getAttribute","useRole","role","rootId","referenceId","floatingProps","unstable_onOpenChange","position","_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__","YF","domReferenceRef","createPubSub","Map","_map$get","get","listener","set","l","setDomReference","setPositionReference","positionReference","getBoundingClientRect","mergeProps","userProps","propsList","elementKey","tabIndex","reduce","acc","props","entries","indexOf","has","_map$get2","useInteractions","deps","getReferenceProps","getFloatingProps","getItemProps","item","__defProp","defineProperty","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","enumerable","configurable","writable","__spreadValues","__spreadProps","horizontalSide","arrowY","arrowOffset","arrowPosition","top","bottom","verticalSide","arrowX","dir","left","radiusByFloatingSide","right","FloatingArrow_defProp","FloatingArrow_defProps","FloatingArrow_getOwnPropDescs","FloatingArrow_getOwnPropSymbols","FloatingArrow_hasOwnProp","FloatingArrow_propIsEnum","FloatingArrow_defNormalProp","FloatingArrow_spreadValues","FloatingArrow_spreadProps","__objRest","source","exclude","FloatingArrow","react","forwardRef","_a","arrowSize","arrowRadius","visible","others","theme","MantineProvider","rZ","getArrowPositionStyles","side","split","baseStyles","rem","h","transform","arrowPlacement","borderLeftColor","borderBottomColor","borderRightColor","borderTopColor","displayName","getFloatingPosition","flippedPosition","useFloatingAutoUpdate","opened","positionDependencies","delayedUpdate","setDelayedUpdate","_floating_ui_react__WEBPACK_IMPORTED_MODULE_1__","Me","_mantine_hooks__WEBPACK_IMPORTED_MODULE_2__","c","packSx","sx","computeCoordsFromPlacement","rtl","coords","sideAxis","_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__","Qq","alignmentAxis","Wh","alignLength","I4","k3","isVertical","commonX","commonY","commonAlign","hp","computePosition","validMiddleware","Boolean","rects","getElementRects","statefulPlacement","resetCount","nextX","nextY","reset","initialPlacement","detectOverflow","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","ku","paddingObject","yd","clippingClientRect","JB","getClippingRect","getDocumentElement","rect","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","axis","arrowDimensions","getDimensions","isYAxis","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","largestPossiblePadding","minPadding","VV","maxPadding","max","center","offset","uZ","shouldAddOffset","alignmentOffset","min$1","centerOffset","flip","_middlewareData$flip","_middlewareData$flip2","_overflowsData$filter","_overflowsData$map$so","mainAxis","checkMainAxis","crossAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","flipAlignment","detectOverflowOptions","isBasePlacement","pw","gy","KX","placements","overflow","overflows","overflowsData","sides","i8","every","nextIndex","nextPlacement","resetPlacement","d","sort","getBoundingRect","minX","minY","maxX","Fp","maxY","inline","nativeClientRects","from","getClientRects","clientRects","getRectsByLine","sortedRects","slice","groups","prevRect","fallback","resetRects","firstRect","lastRect","isTop","isLeftSide","maxRight","minLeft","measureRects","convertValueToCoords","alignment","mainAxisMulti","crossAxisMulti","rawValue","diffCoords","shift","limiter","Rn","mainAxisCoord","crossAxisCoord","min","minSide","maxSide","limitedCoords","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse","_middlewareData$offse2","isOriginSide","size","heightSide","widthSide","apply","overflowAvailableHeight","overflowAvailableWidth","noShift","availableHeight","availableWidth","maximumClippingWidth","maximumClippingHeight","xMin","xMax","yMin","yMax","nextDimensions","getCssDimensions","css","_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__","Dx","parseFloat","hasOffset","Re","offsetHeight","shouldFallback","_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__","NM","$","unwrapElement","kK","domElement","ze","Number","isFinite","noOffsets","getVisualOffsets","Jj","Pf","offsetLeft","offsetTop","includeScale","isFixedStrategy","isFixed","clientRect","scale","visualOffsets","shouldAddVisualOffsets","floatingOffsetParent","offsetWin","currentIFrame","frameElement","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","getWindowScrollBarX","tF","Lw","scrollLeft","getClientRectFromClippingAncestor","clippingAncestor","getViewportRect","visualViewportBased","getDocumentRect","scroll","scrollTop","getInnerBoundingClientRect","getTrueOffsetParent","polyfill","Ze","wk","hT","gQ","getOffsetParentFn","getDimensionsFn","getRectRelativeToOffsetParent","isOffsetParentAnElement","offsets","ao","offsetRect","elementClippingAncestors","getClippingElementAncestors","cache","cachedResult","result","el","currentContainingBlockComputedStyle","elementIsFixed","currentNode","Ow","Py","computedStyle","currentNodeIsContaining","shouldDropCurrentNode","hasFixedPositionAncestor","stopNode","_c","clippingAncestors","firstClippingAncestor","clippingRect","accRect","autoUpdate","frameId","ancestorResize","elementResize","ResizeObserver","layoutShift","IntersectionObserver","animationFrame","referenceEl","cleanupIo","observeMove","onMove","timeoutId","io","root","cleanup","disconnect","refresh","skip","threshold","insetTop","GW","insetRight","insetBottom","insetLeft","rootMargin","isFirstUpdate","handleObserve","ratio","intersectionRatio","observe","reobserveFrame","resizeObserver","firstEntry","unobserve","cancelAnimationFrame","requestAnimationFrame","prevRefRect","frameLoop","nextRefRect","mergedOptions","platformWithCache","_floating_ui_core__WEBPACK_IMPORTED_MODULE_2__","Math","round","floor","createCoords","v","oppositeSideMap","oppositeAlignmentMap","start","end","clamp","evaluate","param","getSide","getAlignment","getOppositeAxis","getAxisLength","getSideAxis","getAlignmentAxis","getAlignmentSides","mainAlignmentSide","getOppositePlacement","getExpandedPlacements","oppositePlacement","getOppositeAlignmentPlacement","replace","getOppositeAxisPlacements","list","getSideList","isStart","lr","rl","getPaddingObject","rectToClientRect","getNodeName","nodeName","toLowerCase","_node$ownerDocument","isNode","Node","isOverflowElement","overflowX","overflowY","display","isTableElement","isContainingBlock","webkit","isWebKit","perspective","containerType","backdropFilter","willChange","contain","getContainingBlock","getParentNode","isLastTraversableNode","CSS","supports","getNodeScroll","pageXOffset","pageYOffset","assignedSlot","getOverflowAncestors","_node$ownerDocument2","scrollableAncestor","getNearestOverflowAncestor","isBody"],"sourceRoot":""}