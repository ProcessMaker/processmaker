{"version":3,"file":"static/chunks/31029fef-88c3c5caa9aa40ad.js","mappings":"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","sources":["webpack://_N_E/./node_modules/rdk/node_modules/framer-motion/dist/cjs/index.js","webpack://_N_E/<anon>"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar React = require('react');\nvar heyListen = require('hey-listen');\nvar dom = require('@motionone/dom');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function (k) {\n            if (k !== 'default') {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function () { return e[k]; }\n                });\n            }\n        });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n}\n\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\n\n/**\n * @public\n */\nconst MotionConfigContext = React.createContext({\n    transformPagePoint: (p) => p,\n    isStatic: false,\n    reducedMotion: \"never\",\n});\n\nconst MotionContext = React.createContext({});\nfunction useVisualElementContext() {\n    return React.useContext(MotionContext).visualElement;\n}\n\n/**\n * @public\n */\nconst PresenceContext = React.createContext(null);\n\nconst isBrowser = typeof document !== \"undefined\";\n\nconst useIsomorphicLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;\n\nconst LazyContext = React.createContext({ strict: false });\n\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n    const parent = useVisualElementContext();\n    const lazyContext = React.useContext(LazyContext);\n    const presenceContext = React.useContext(PresenceContext);\n    const reducedMotionConfig = React.useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = React.useRef();\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceId: presenceContext ? presenceContext.id : undefined,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    useIsomorphicLayoutEffect(() => {\n        visualElement && visualElement.render();\n    });\n    React.useEffect(() => {\n        if (visualElement && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    useIsomorphicLayoutEffect(() => () => visualElement && visualElement.notify(\"Unmount\"), []);\n    return visualElement;\n}\n\nfunction isRefObject(ref) {\n    return (typeof ref === \"object\" &&\n        Object.prototype.hasOwnProperty.call(ref, \"current\"));\n}\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return React.useCallback((instance) => {\n        instance && visualState.mount && visualState.mount(instance);\n        if (visualElement) {\n            instance\n                ? visualElement.mount(instance)\n                : visualElement.unmount();\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\n/**\n * Decides if the supplied variable is variant label\n */\nfunction isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\n\nfunction isAnimationControls(v) {\n    return typeof v === \"object\" && typeof v.start === \"function\";\n}\n\nconst variantProps$1 = [\n    \"initial\",\n    \"animate\",\n    \"exit\",\n    \"whileHover\",\n    \"whileDrag\",\n    \"whileTap\",\n    \"whileFocus\",\n    \"whileInView\",\n];\nfunction isControllingVariants(props) {\n    return (isAnimationControls(props.animate) ||\n        variantProps$1.some((name) => isVariantLabel(props[name])));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\n\nfunction getCurrentTreeVariants(props, context) {\n    if (isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || isVariantLabel(initial)\n                ? initial\n                : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined,\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, React.useContext(MotionContext));\n    return React.useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\nconst createDefinition = (propNames) => ({\n    isEnabled: (props) => propNames.some((name) => !!props[name]),\n});\nconst featureDefinitions = {\n    measureLayout: createDefinition([\"layout\", \"layoutId\", \"drag\"]),\n    animation: createDefinition([\n        \"animate\",\n        \"exit\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"whileFocus\",\n        \"whileDrag\",\n        \"whileInView\",\n    ]),\n    exit: createDefinition([\"exit\"]),\n    drag: createDefinition([\"drag\", \"dragControls\"]),\n    focus: createDefinition([\"whileFocus\"]),\n    hover: createDefinition([\"whileHover\", \"onHoverStart\", \"onHoverEnd\"]),\n    tap: createDefinition([\"whileTap\", \"onTap\", \"onTapStart\", \"onTapCancel\"]),\n    pan: createDefinition([\n        \"onPan\",\n        \"onPanStart\",\n        \"onPanSessionStart\",\n        \"onPanEnd\",\n    ]),\n    inView: createDefinition([\n        \"whileInView\",\n        \"onViewportEnter\",\n        \"onViewportLeave\",\n    ]),\n};\n\nfunction loadFeatures(features) {\n    for (const key in features) {\n        if (key === \"projectionNodeConstructor\") {\n            featureDefinitions.projectionNodeConstructor = features[key];\n        }\n        else {\n            featureDefinitions[key].Component = features[key];\n        }\n    }\n}\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n    const ref = React.useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\n/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nlet id$2 = 1;\nfunction useProjectionId() {\n    return useConstant(() => {\n        if (globalProjectionState.hasEverUpdated) {\n            return id$2++;\n        }\n    });\n}\n\nconst LayoutGroupContext = React.createContext({});\n\nclass VisualElementHandler extends React__default[\"default\"].Component {\n    /**\n     * Update visual element props as soon as we know this update is going to be commited.\n     */\n    getSnapshotBeforeUpdate() {\n        const { visualElement, props } = this.props;\n        if (visualElement)\n            visualElement.setProps(props);\n        return null;\n    }\n    componentDidUpdate() { }\n    render() {\n        return this.props.children;\n    }\n}\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = React.createContext({});\n\nconst motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent({ preloadedFeatures, createVisualElement, projectionNodeConstructor, useRender, useVisualState, Component, }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        const configAndProps = {\n            ...React.useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        let features = null;\n        const context = useCreateMotionContext(props);\n        /**\n         * Create a unique projection ID for this component. If a new component is added\n         * during a layout animation we'll use this to query the DOM and hydrate its ref early, allowing\n         * us to measure it as soon as any layout effect flushes pending layout animations.\n         *\n         * Performance note: It'd be better not to have to search the DOM for these elements.\n         * For newly-entering components it could be enough to only correct treeScale, in which\n         * case we could mount in a scale-correction mode. This wouldn't be enough for\n         * shared element transitions however. Perhaps for those we could revert to a root node\n         * that gets forceRendered and layout animations are triggered on its layout effect.\n         */\n        const projectionId = isStatic ? undefined : useProjectionId();\n        /**\n         *\n         */\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);\n            /**\n             * Load Motion gesture and animation features. These are rendered as renderless\n             * components so each feature can optionally make use of React lifecycle methods.\n             */\n            const lazyStrictMode = React.useContext(LazyContext).strict;\n            const initialLayoutGroupConfig = React.useContext(SwitchLayoutGroupContext);\n            if (context.visualElement) {\n                features = context.visualElement.loadFeatures(\n                // Note: Pass the full new combined props to correctly re-render dynamic feature components.\n                configAndProps, lazyStrictMode, preloadedFeatures, projectionId, projectionNodeConstructor ||\n                    featureDefinitions.projectionNodeConstructor, initialLayoutGroupConfig);\n            }\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (React__namespace.createElement(VisualElementHandler, { visualElement: context.visualElement, props: configAndProps },\n            features,\n            React__namespace.createElement(MotionContext.Provider, { value: context }, useRender(Component, props, projectionId, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement))));\n    }\n    const ForwardRefComponent = React.forwardRef(MotionComponent);\n    ForwardRefComponent[motionComponentSymbol] = Component;\n    return ForwardRefComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = React.useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\n\n/**\n * Convert any React component into a `motion` component. The provided component\n * **must** use `React.forwardRef` to the underlying DOM component you want to animate.\n *\n * ```jsx\n * const Component = React.forwardRef((props, ref) => {\n *   return <div ref={ref} />\n * })\n *\n * const MotionComponent = motion(Component)\n * ```\n *\n * @public\n */\nfunction createMotionProxy(createConfig) {\n    function custom(Component, customMotionComponentConfig = {}) {\n        return createMotionComponent(createConfig(Component, customMotionComponentConfig));\n    }\n    if (typeof Proxy === \"undefined\") {\n        return custom;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */\n    const componentCache = new Map();\n    return new Proxy(custom, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */\n        get: (_target, key) => {\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */\n            if (!componentCache.has(key)) {\n                componentCache.set(key, custom(key));\n            }\n            return componentCache.get(key);\n        },\n    });\n}\n\n/**\n * We keep these listed seperately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nconst lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n];\n\nfunction isSVGComponent(Component) {\n    if (\n    /**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */\n    typeof Component !== \"string\" ||\n        /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */\n        Component.includes(\"-\")) {\n        return false;\n    }\n    else if (\n    /**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */\n    lowercaseSVGElements.indexOf(Component) > -1 ||\n        /**\n         * If it contains a capital letter, it's an SVG component\n         */\n        /[A-Z]/.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\nconst scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    Object.assign(scaleCorrectors, correctors);\n}\n\n/**\n * Generate a list of every possible transform key.\n */\nconst transformPropOrder = [\n    \"transformPerspective\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"translateX\",\n    \"translateY\",\n    \"translateZ\",\n    \"scale\",\n    \"scaleX\",\n    \"scaleY\",\n    \"rotate\",\n    \"rotateX\",\n    \"rotateY\",\n    \"rotateZ\",\n    \"skew\",\n    \"skewX\",\n    \"skewY\",\n];\n/**\n * A quick lookup for transform props.\n */\nconst transformProps = new Set(transformPropOrder);\n\nfunction isForcedMotionValue(key, { layout, layoutId }) {\n    return (transformProps.has(key) ||\n        key.startsWith(\"origin\") ||\n        ((layout || layoutId !== undefined) &&\n            (!!scaleCorrectors[key] || key === \"opacity\")));\n}\n\nconst isMotionValue = (value) => !!(value === null || value === void 0 ? void 0 : value.getVelocity);\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\n/**\n * A function to use with Array.sort to sort transform keys by their default order.\n */\nconst sortTransformProps = (a, b) => transformPropOrder.indexOf(a) - transformPropOrder.indexOf(b);\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform({ transform, transformKeys, }, { enableHardwareAcceleration = true, allowTransformNone = true, }, transformIsDefault, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    // Transform keys into their default order - this will determine the output order.\n    transformKeys.sort(sortTransformProps);\n    // Loop over each transform and build them into transformString\n    for (const key of transformKeys) {\n        transformString += `${translateAlias[key] || key}(${transform[key]}) `;\n    }\n    if (enableHardwareAcceleration && !transform.z) {\n        transformString += \"translateZ(0)\";\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\n/**\n * Returns true if the provided key is a CSS variable\n */\nfunction isCSSVariable$1(key) {\n    return key.startsWith(\"--\");\n}\n\n/**\n * Provided a value and a ValueType, returns the value as that value type.\n */\nconst getValueAsType = (value, type) => {\n    return type && typeof value === \"number\"\n        ? type.transform(value)\n        : value;\n};\n\nconst clamp = (min, max, v) => Math.min(Math.max(v, min), max);\n\nconst number = {\n    test: (v) => typeof v === \"number\",\n    parse: parseFloat,\n    transform: (v) => v,\n};\nconst alpha = {\n    ...number,\n    transform: (v) => clamp(0, 1, v),\n};\nconst scale = {\n    ...number,\n    default: 1,\n};\n\n/**\n * TODO: When we move from string as a source of truth to data models\n * everything in this folder should probably be referred to as models vs types\n */\n// If this number is a decimal, make it just five decimal places\n// to avoid exponents\nconst sanitize = (v) => Math.round(v * 100000) / 100000;\nconst floatRegex = /(-)?([\\d]*\\.?[\\d])+/g;\nconst colorRegex = /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))/gi;\nconst singleColorRegex = /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))$/i;\nfunction isString(v) {\n    return typeof v === \"string\";\n}\n\nconst createUnitType = (unit) => ({\n    test: (v) => isString(v) && v.endsWith(unit) && v.split(\" \").length === 1,\n    parse: parseFloat,\n    transform: (v) => `${v}${unit}`,\n});\nconst degrees = createUnitType(\"deg\");\nconst percent = createUnitType(\"%\");\nconst px = createUnitType(\"px\");\nconst vh = createUnitType(\"vh\");\nconst vw = createUnitType(\"vw\");\nconst progressPercentage = {\n    ...percent,\n    parse: (v) => percent.parse(v) / 100,\n    transform: (v) => percent.transform(v * 100),\n};\n\nconst int = {\n    ...number,\n    transform: Math.round,\n};\n\nconst numberValueTypes = {\n    // Border props\n    borderWidth: px,\n    borderTopWidth: px,\n    borderRightWidth: px,\n    borderBottomWidth: px,\n    borderLeftWidth: px,\n    borderRadius: px,\n    radius: px,\n    borderTopLeftRadius: px,\n    borderTopRightRadius: px,\n    borderBottomRightRadius: px,\n    borderBottomLeftRadius: px,\n    // Positioning props\n    width: px,\n    maxWidth: px,\n    height: px,\n    maxHeight: px,\n    size: px,\n    top: px,\n    right: px,\n    bottom: px,\n    left: px,\n    // Spacing props\n    padding: px,\n    paddingTop: px,\n    paddingRight: px,\n    paddingBottom: px,\n    paddingLeft: px,\n    margin: px,\n    marginTop: px,\n    marginRight: px,\n    marginBottom: px,\n    marginLeft: px,\n    // Transform props\n    rotate: degrees,\n    rotateX: degrees,\n    rotateY: degrees,\n    rotateZ: degrees,\n    scale,\n    scaleX: scale,\n    scaleY: scale,\n    scaleZ: scale,\n    skew: degrees,\n    skewX: degrees,\n    skewY: degrees,\n    distance: px,\n    translateX: px,\n    translateY: px,\n    translateZ: px,\n    x: px,\n    y: px,\n    z: px,\n    perspective: px,\n    transformPerspective: px,\n    opacity: alpha,\n    originX: progressPercentage,\n    originY: progressPercentage,\n    originZ: px,\n    // Misc\n    zIndex: int,\n    // SVG\n    fillOpacity: alpha,\n    strokeOpacity: alpha,\n    numOctaves: int,\n};\n\nfunction buildHTMLStyles(state, latestValues, options, transformTemplate) {\n    const { style, vars, transform, transformKeys, transformOrigin } = state;\n    transformKeys.length = 0;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    // Does the calculated transform essentially equal \"none\"?\n    let transformIsNone = true;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept seperately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        /**\n         * If this is a CSS variable we don't do any further processing.\n         */\n        if (isCSSVariable$1(key)) {\n            vars[key] = value;\n            continue;\n        }\n        // Convert the value to its default value type, ie 0 -> \"0px\"\n        const valueType = numberValueTypes[key];\n        const valueAsType = getValueAsType(value, valueType);\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            transform[key] = valueAsType;\n            transformKeys.push(key);\n            // If we already know we have a non-default transform, early return\n            if (!transformIsNone)\n                continue;\n            // Otherwise check to see if this is a default transform\n            if (value !== (valueType.default || 0))\n                transformIsNone = false;\n        }\n        else if (key.startsWith(\"origin\")) {\n            // If this is a transform origin, flag and enable further transform-origin processing\n            hasTransformOrigin = true;\n            transformOrigin[key] = valueAsType;\n        }\n        else {\n            style[key] = valueAsType;\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(state, options, transformIsNone, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nconst createHtmlRenderState = () => ({\n    style: {},\n    transform: {},\n    transformKeys: [],\n    transformOrigin: {},\n    vars: {},\n});\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState, isStatic) {\n    return React.useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState, isStatic) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n    return props.transformValues ? props.transformValues(style) : style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState, isStatic);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nconst animationProps = [\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"whileHover\",\n    \"whileTap\",\n    \"whileFocus\",\n    \"whileDrag\",\n    \"whileInView\",\n];\nconst tapProps = [\"whileTap\", \"onTap\", \"onTapStart\", \"onTapCancel\"];\nconst panProps = [\"onPan\", \"onPanStart\", \"onPanSessionStart\", \"onPanEnd\"];\nconst inViewProps = [\n    \"whileInView\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"viewport\",\n];\n/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"transformValues\",\n    \"custom\",\n    \"inherit\",\n    \"layout\",\n    \"layoutId\",\n    \"layoutDependency\",\n    \"onLayoutAnimationStart\",\n    \"onLayoutAnimationComplete\",\n    \"onLayoutMeasure\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"drag\",\n    \"dragControls\",\n    \"dragListener\",\n    \"dragConstraints\",\n    \"dragDirectionLock\",\n    \"dragSnapToOrigin\",\n    \"_dragX\",\n    \"_dragY\",\n    \"dragElastic\",\n    \"dragMomentum\",\n    \"dragPropagation\",\n    \"dragTransition\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"layoutScroll\",\n    ...inViewProps,\n    ...tapProps,\n    ...animationProps,\n    ...panProps,\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n    return validMotionProps.has(key);\n}\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp)\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch (_a) {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] && key.startsWith(\"onDrag\"))) {\n            filteredProps[key] = props[key];\n        }\n    }\n    return filteredProps;\n}\n\nfunction calcOrigin$1(origin, offset, size) {\n    return typeof origin === \"string\"\n        ? origin\n        : px.transform(offset + size * origin);\n}\n/**\n * The SVG transform origin defaults are different to CSS and is less intuitive,\n * so we use the measured dimensions of the SVG to reconcile these.\n */\nfunction calcSVGTransformOrigin(dimensions, originX, originY) {\n    const pxOriginX = calcOrigin$1(originX, dimensions.x, dimensions.width);\n    const pxOriginY = calcOrigin$1(originY, dimensions.y, dimensions.height);\n    return `${pxOriginX} ${pxOriginY}`;\n}\n\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\",\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\",\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = px.transform(-offset);\n    // Build the dash array\n    const pathLength = px.transform(length);\n    const pathSpacing = px.transform(spacing);\n    attrs[keys.array] = `${pathLength} ${pathSpacing}`;\n}\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, options, isSVGTag, transformTemplate) {\n    buildHTMLStyles(state, latest, options, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style, dimensions } = state;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */\n    if (attrs.transform) {\n        if (dimensions)\n            style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions &&\n        (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Treat x/y not as shortcuts but as actual attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nconst createSvgRenderState = () => ({\n    ...createHtmlRenderState(),\n    attrs: {},\n});\n\nconst isSVGTag = (tag) => typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = React.useMemo(() => {\n        const state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, { enableHardwareAcceleration: false }, isSVGTag(Component), props.transformTemplate);\n        return {\n            ...state.attrs,\n            style: { ...state.style },\n        };\n    }, [visualState]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = { ...rawStyles, ...visualProps.style };\n    }\n    return visualProps;\n}\n\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, projectionId, ref, { latestValues }, isStatic) => {\n        const useVisualProps = isSVGComponent(Component)\n            ? useSVGProps\n            : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = {\n            ...filteredProps,\n            ...visualProps,\n            ref,\n        };\n        if (projectionId) {\n            elementProps[\"data-projection-id\"] = projectionId;\n        }\n        return React.createElement(Component, elementProps);\n    };\n    return useRender;\n}\n\n/**\n * Convert camelCase to dash-case properties.\n */\nconst camelToDash = (str) => str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n\nfunction renderHTML(element, { style, vars }, styleProp, projection) {\n    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));\n    // Loop over any CSS variables and assign those.\n    for (const key in vars) {\n        element.style.setProperty(key, vars[key]);\n    }\n}\n\n/**\n * A set of attribute names that are always read/written as camel case.\n */\nconst camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\",\n]);\n\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for (const key in renderState.attrs) {\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\n\nfunction scrapeMotionValuesFromProps$1(props) {\n    const { style } = props;\n    const newValues = {};\n    for (const key in style) {\n        if (isMotionValue(style[key]) || isForcedMotionValue(key, props)) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\n\nfunction scrapeMotionValuesFromProps(props) {\n    const newValues = scrapeMotionValuesFromProps$1(props);\n    for (const key in props) {\n        if (isMotionValue(props[key])) {\n            const targetKey = key === \"x\" || key === \"y\" ? \"attr\" + key.toUpperCase() : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\nfunction resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {\n    /**\n     * If the variant definition is a function, resolve.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */\n    if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    return definition;\n}\n\nconst isKeyframesTarget = (v) => {\n    return Array.isArray(v);\n};\n\nconst isCustomValue = (v) => {\n    return Boolean(v && typeof v === \"object\" && v.mix && v.toValue);\n};\nconst resolveFinalValueInKeyframes = (v) => {\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n};\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n    const unwrappedValue = isMotionValue(value) ? value.get() : value;\n    return isCustomValue(unwrappedValue)\n        ? unwrappedValue.toValue()\n        : unwrappedValue;\n}\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, onMount, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    if (onMount) {\n        state.mount = (instance) => onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = React.useContext(MotionContext);\n    const presenceContext = React.useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props);\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        list.forEach((definition) => {\n            const resolved = resolveVariantFromProps(props, definition);\n            if (!resolved)\n                return;\n            const { transitionEnd, transition, ...target } = resolved;\n            for (const key in target) {\n                let valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */\n                    const index = isInitialAnimationBlocked\n                        ? valueTarget.length - 1\n                        : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for (const key in transitionEnd)\n                values[key] = transitionEnd[key];\n        });\n    }\n    return values;\n}\n\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onMount: (props, instance, { renderState, latestValues }) => {\n            try {\n                renderState.dimensions =\n                    typeof instance.getBBox ===\n                        \"function\"\n                        ? instance.getBBox()\n                        : instance.getBoundingClientRect();\n            }\n            catch (e) {\n                // Most likely trying to measure an unrendered element under Firefox\n                renderState.dimensions = {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0,\n                };\n            }\n            buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props.transformTemplate);\n            renderSVG(instance, renderState);\n        },\n    }),\n};\n\nconst htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps$1,\n        createRenderState: createHtmlRenderState,\n    }),\n};\n\nfunction createDomMotionConfig(Component, { forwardMotionProps = false }, preloadedFeatures, createVisualElement, projectionNodeConstructor) {\n    const baseConfig = isSVGComponent(Component)\n        ? svgMotionConfig\n        : htmlMotionConfig;\n    return {\n        ...baseConfig,\n        preloadedFeatures,\n        useRender: createUseRender(forwardMotionProps),\n        createVisualElement,\n        projectionNodeConstructor,\n        Component,\n    };\n}\n\nexports.AnimationType = void 0;\n(function (AnimationType) {\n    AnimationType[\"Animate\"] = \"animate\";\n    AnimationType[\"Hover\"] = \"whileHover\";\n    AnimationType[\"Tap\"] = \"whileTap\";\n    AnimationType[\"Drag\"] = \"whileDrag\";\n    AnimationType[\"Focus\"] = \"whileFocus\";\n    AnimationType[\"InView\"] = \"whileInView\";\n    AnimationType[\"Exit\"] = \"exit\";\n})(exports.AnimationType || (exports.AnimationType = {}));\n\nfunction addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\nfunction useDomEvent(ref, eventName, handler, options) {\n    React.useEffect(() => {\n        const element = ref.current;\n        if (handler && element) {\n            return addDomEvent(element, eventName, handler, options);\n        }\n    }, [ref, eventName, handler, options]);\n}\n\n/**\n *\n * @param props\n * @param ref\n * @internal\n */\nfunction useFocusGesture({ whileFocus, visualElement, }) {\n    const { animationState } = visualElement;\n    const onFocus = () => {\n        animationState && animationState.setActive(exports.AnimationType.Focus, true);\n    };\n    const onBlur = () => {\n        animationState && animationState.setActive(exports.AnimationType.Focus, false);\n    };\n    useDomEvent(visualElement, \"focus\", whileFocus ? onFocus : undefined);\n    useDomEvent(visualElement, \"blur\", whileFocus ? onBlur : undefined);\n}\n\nfunction isMouseEvent(event) {\n    // PointerEvent inherits from MouseEvent so we can't use a straight instanceof check.\n    if (typeof PointerEvent !== \"undefined\" && event instanceof PointerEvent) {\n        return !!(event.pointerType === \"mouse\");\n    }\n    return event instanceof MouseEvent;\n}\nfunction isTouchEvent(event) {\n    const hasTouches = !!event.touches;\n    return hasTouches;\n}\n\n/**\n * Filters out events not attached to the primary pointer (currently left mouse button)\n * @param eventHandler\n */\nfunction filterPrimaryPointer(eventHandler) {\n    return (event) => {\n        const isMouseEvent = event instanceof MouseEvent;\n        const isPrimaryPointer = !isMouseEvent ||\n            (isMouseEvent && event.button === 0);\n        if (isPrimaryPointer) {\n            eventHandler(event);\n        }\n    };\n}\nconst defaultPagePoint = { pageX: 0, pageY: 0 };\nfunction pointFromTouch(e, pointType = \"page\") {\n    const primaryTouch = e.touches[0] || e.changedTouches[0];\n    const point = primaryTouch || defaultPagePoint;\n    return {\n        x: point[pointType + \"X\"],\n        y: point[pointType + \"Y\"],\n    };\n}\nfunction pointFromMouse(point, pointType = \"page\") {\n    return {\n        x: point[pointType + \"X\"],\n        y: point[pointType + \"Y\"],\n    };\n}\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: isTouchEvent(event)\n            ? pointFromTouch(event, pointType)\n            : pointFromMouse(event, pointType),\n    };\n}\nconst wrapHandler = (handler, shouldFilterPrimaryPointer = false) => {\n    const listener = (event) => handler(event, extractEventInfo(event));\n    return shouldFilterPrimaryPointer\n        ? filterPrimaryPointer(listener)\n        : listener;\n};\n\n// We check for event support via functions in case they've been mocked by a testing suite.\nconst supportsPointerEvents = () => isBrowser && window.onpointerdown === null;\nconst supportsTouchEvents = () => isBrowser && window.ontouchstart === null;\nconst supportsMouseEvents = () => isBrowser && window.onmousedown === null;\n\nconst mouseEventNames = {\n    pointerdown: \"mousedown\",\n    pointermove: \"mousemove\",\n    pointerup: \"mouseup\",\n    pointercancel: \"mousecancel\",\n    pointerover: \"mouseover\",\n    pointerout: \"mouseout\",\n    pointerenter: \"mouseenter\",\n    pointerleave: \"mouseleave\",\n};\nconst touchEventNames = {\n    pointerdown: \"touchstart\",\n    pointermove: \"touchmove\",\n    pointerup: \"touchend\",\n    pointercancel: \"touchcancel\",\n};\nfunction getPointerEventName(name) {\n    if (supportsPointerEvents()) {\n        return name;\n    }\n    else if (supportsTouchEvents()) {\n        return touchEventNames[name];\n    }\n    else if (supportsMouseEvents()) {\n        return mouseEventNames[name];\n    }\n    return name;\n}\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, getPointerEventName(eventName), wrapHandler(handler, eventName === \"pointerdown\"), options);\n}\nfunction usePointerEvent(ref, eventName, handler, options) {\n    return useDomEvent(ref, getPointerEventName(eventName), handler && wrapHandler(handler, eventName === \"pointerdown\"), options);\n}\n\nfunction createLock(name) {\n    let lock = null;\n    return () => {\n        const openLock = () => {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = () => {\n                openHorizontal();\n                openVertical();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal)\n                openHorizontal();\n            if (openVertical)\n                openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nfunction createHoverEvent(visualElement, isActive, callback) {\n    return (event, info) => {\n        if (!isMouseEvent(event) || isDragActive())\n            return;\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (visualElement.animationState) {\n            visualElement.animationState.setActive(exports.AnimationType.Hover, isActive);\n        }\n        callback && callback(event, info);\n    };\n}\nfunction useHoverGesture({ onHoverStart, onHoverEnd, whileHover, visualElement, }) {\n    usePointerEvent(visualElement, \"pointerenter\", onHoverStart || whileHover\n        ? createHoverEvent(visualElement, true, onHoverStart)\n        : undefined, { passive: !onHoverStart });\n    usePointerEvent(visualElement, \"pointerleave\", onHoverEnd || whileHover\n        ? createHoverEvent(visualElement, false, onHoverEnd)\n        : undefined, { passive: !onHoverEnd });\n}\n\n/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nfunction useUnmountEffect(callback) {\n    return React.useEffect(() => () => callback(), []);\n}\n\n/**\n * Pipe\n * Compose other transformers to run linearily\n * pipe(min(20), max(40))\n * @param  {...functions} transformers\n * @return {function}\n */\nconst combineFunctions = (a, b) => (v) => b(a(v));\nconst pipe = (...transformers) => transformers.reduce(combineFunctions);\n\n/**\n * @param handlers -\n * @internal\n */\nfunction useTapGesture({ onTap, onTapStart, onTapCancel, whileTap, visualElement, }) {\n    const hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;\n    const isPressing = React.useRef(false);\n    const cancelPointerEndListeners = React.useRef(null);\n    /**\n     * Only set listener to passive if there are no external listeners.\n     */\n    const eventOptions = {\n        passive: !(onTapStart || onTap || onTapCancel || onPointerDown),\n    };\n    function removePointerEndListener() {\n        cancelPointerEndListeners.current && cancelPointerEndListeners.current();\n        cancelPointerEndListeners.current = null;\n    }\n    function checkPointerEnd() {\n        removePointerEndListener();\n        isPressing.current = false;\n        visualElement.animationState &&\n            visualElement.animationState.setActive(exports.AnimationType.Tap, false);\n        return !isDragActive();\n    }\n    function onPointerUp(event, info) {\n        if (!checkPointerEnd())\n            return;\n        /**\n         * We only count this as a tap gesture if the event.target is the same\n         * as, or a child of, this component's element\n         */\n        !isNodeOrChild(visualElement.current, event.target)\n            ? onTapCancel && onTapCancel(event, info)\n            : onTap && onTap(event, info);\n    }\n    function onPointerCancel(event, info) {\n        if (!checkPointerEnd())\n            return;\n        onTapCancel && onTapCancel(event, info);\n    }\n    function onPointerDown(event, info) {\n        removePointerEndListener();\n        if (isPressing.current)\n            return;\n        isPressing.current = true;\n        cancelPointerEndListeners.current = pipe(addPointerEvent(window, \"pointerup\", onPointerUp, eventOptions), addPointerEvent(window, \"pointercancel\", onPointerCancel, eventOptions));\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        visualElement.animationState &&\n            visualElement.animationState.setActive(exports.AnimationType.Tap, true);\n        onTapStart && onTapStart(event, info);\n    }\n    usePointerEvent(visualElement, \"pointerdown\", hasPressListeners ? onPointerDown : undefined, eventOptions);\n    useUnmountEffect(removePointerEndListener);\n}\n\n/**\n * Browser-safe usage of process\n */\nconst defaultEnvironment = \"production\";\nconst env = typeof process === \"undefined\" || process.env === undefined\n    ? defaultEnvironment\n    : process.env.NODE_ENV || defaultEnvironment;\n\nconst warned = new Set();\nfunction warnOnce(condition, message, element) {\n    if (condition || warned.has(message))\n        return;\n    console.warn(message);\n    if (element)\n        console.warn(element);\n    warned.add(message);\n}\n\n/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nfunction useViewport({ visualElement, whileInView, onViewportEnter, onViewportLeave, viewport = {}, }) {\n    const state = React.useRef({\n        hasEnteredView: false,\n        isInView: false,\n    });\n    let shouldObserve = Boolean(whileInView || onViewportEnter || onViewportLeave);\n    if (viewport.once && state.current.hasEnteredView)\n        shouldObserve = false;\n    const useObserver = typeof IntersectionObserver === \"undefined\"\n        ? useMissingIntersectionObserver\n        : useIntersectionObserver;\n    useObserver(shouldObserve, state.current, visualElement, viewport);\n}\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nfunction useIntersectionObserver(shouldObserve, state, visualElement, { root, margin: rootMargin, amount = \"some\", once }) {\n    React.useEffect(() => {\n        if (!shouldObserve || !visualElement.current)\n            return;\n        const options = {\n            root: root === null || root === void 0 ? void 0 : root.current,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const intersectionCallback = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (state.isInView === isIntersecting)\n                return;\n            state.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && state.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                state.hasEnteredView = true;\n            }\n            if (visualElement.animationState) {\n                visualElement.animationState.setActive(exports.AnimationType.InView, isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const props = visualElement.getProps();\n            const callback = isIntersecting\n                ? props.onViewportEnter\n                : props.onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(visualElement.current, options, intersectionCallback);\n    }, [shouldObserve, root, rootMargin, amount]);\n}\n/**\n * If IntersectionObserver is missing, we activate inView and fire onViewportEnter\n * on mount. This way, the page will be in the state the author expects users\n * to see it in for everyone.\n */\nfunction useMissingIntersectionObserver(shouldObserve, state, visualElement, { fallback = true }) {\n    React.useEffect(() => {\n        if (!shouldObserve || !fallback)\n            return;\n        if (env !== \"production\") {\n            warnOnce(false, \"IntersectionObserver not available on this device. whileInView animations will trigger on mount.\");\n        }\n        /**\n         * Fire this in an rAF because, at this point, the animation state\n         * won't have flushed for the first time and there's certain logic in\n         * there that behaves differently on the initial animation.\n         *\n         * This hook should be quite rarely called so setting this in an rAF\n         * is preferred to changing the behaviour of the animation state.\n         */\n        requestAnimationFrame(() => {\n            state.hasEnteredView = true;\n            const { onViewportEnter } = visualElement.getProps();\n            onViewportEnter && onViewportEnter(null);\n            if (visualElement.animationState) {\n                visualElement.animationState.setActive(exports.AnimationType.InView, true);\n            }\n        });\n    }, [shouldObserve]);\n}\n\nconst makeRenderlessComponent = (hook) => (props) => {\n    hook(props);\n    return null;\n};\n\nconst gestureAnimations = {\n    inView: makeRenderlessComponent(useViewport),\n    tap: makeRenderlessComponent(useTapGesture),\n    focus: makeRenderlessComponent(useFocusGesture),\n    hover: makeRenderlessComponent(useHoverGesture),\n};\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = React.useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    // Replace with useId when released in React\n    const id = React.useId();\n    React.useEffect(() => register(id), []);\n    const safeToRemove = () => onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(React.useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nfunction shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\n/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */\nconst secondsToMilliseconds = (seconds) => seconds * 1000;\n\nconst noop = (any) => any;\n\n/*\n  Bezier function generator\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *\n    t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        }\n        else {\n            lowerBound = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2)\n        return noop;\n    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\n// Accepts an easing function and returns a new one that outputs mirrored values for\n// the second half of the animation. Turns easeIn into easeInOut.\nconst mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n\n// Accepts an easing function and returns a new one that outputs reversed values.\n// Turns easeIn into easeOut.\nconst reverseEasing = (easing) => (p) => 1 - easing(1 - p);\n\nconst easeIn = (p) => p * p;\nconst easeOut = reverseEasing(easeIn);\nconst easeInOut = mirrorEasing(easeIn);\n\nconst circIn = (p) => 1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circOut);\n\nconst createBackIn = (power = 1.525) => (p) => p * p * ((power + 1) * p - power);\nconst backIn = createBackIn();\nconst backOut = reverseEasing(backIn);\nconst backInOut = mirrorEasing(backIn);\n\nconst createAnticipate = (power) => {\n    const backEasing = createBackIn(power);\n    return (p) => (p *= 2) < 1\n        ? 0.5 * backEasing(p)\n        : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n};\nconst anticipate = createAnticipate();\n\nconst easingLookup = {\n    linear: noop,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate,\n};\nconst easingDefinitionToFunction = (definition) => {\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        heyListen.invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    }\n    else if (typeof definition === \"string\") {\n        // Else lookup from table\n        heyListen.invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\nconst isEasingArray = (ease) => {\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\n/**\n * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,\n * but false if a number or multiple colors\n */\nconst isColorString = (type, testProp) => (v) => {\n    return Boolean((isString(v) && singleColorRegex.test(v) && v.startsWith(type)) ||\n        (testProp && Object.prototype.hasOwnProperty.call(v, testProp)));\n};\nconst splitColor = (aName, bName, cName) => (v) => {\n    if (!isString(v))\n        return v;\n    const [a, b, c, alpha] = v.match(floatRegex);\n    return {\n        [aName]: parseFloat(a),\n        [bName]: parseFloat(b),\n        [cName]: parseFloat(c),\n        alpha: alpha !== undefined ? parseFloat(alpha) : 1,\n    };\n};\n\nconst clampRgbUnit = (v) => clamp(0, 255, v);\nconst rgbUnit = {\n    ...number,\n    transform: (v) => Math.round(clampRgbUnit(v)),\n};\nconst rgba = {\n    test: isColorString(\"rgb\", \"red\"),\n    parse: splitColor(\"red\", \"green\", \"blue\"),\n    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => \"rgba(\" +\n        rgbUnit.transform(red) +\n        \", \" +\n        rgbUnit.transform(green) +\n        \", \" +\n        rgbUnit.transform(blue) +\n        \", \" +\n        sanitize(alpha.transform(alpha$1)) +\n        \")\",\n};\n\nfunction parseHex(v) {\n    let r = \"\";\n    let g = \"\";\n    let b = \"\";\n    let a = \"\";\n    // If we have 6 characters, ie #FF0000\n    if (v.length > 5) {\n        r = v.substring(1, 3);\n        g = v.substring(3, 5);\n        b = v.substring(5, 7);\n        a = v.substring(7, 9);\n        // Or we have 3 characters, ie #F00\n    }\n    else {\n        r = v.substring(1, 2);\n        g = v.substring(2, 3);\n        b = v.substring(3, 4);\n        a = v.substring(4, 5);\n        r += r;\n        g += g;\n        b += b;\n        a += a;\n    }\n    return {\n        red: parseInt(r, 16),\n        green: parseInt(g, 16),\n        blue: parseInt(b, 16),\n        alpha: a ? parseInt(a, 16) / 255 : 1,\n    };\n}\nconst hex = {\n    test: isColorString(\"#\"),\n    parse: parseHex,\n    transform: rgba.transform,\n};\n\nconst hsla = {\n    test: isColorString(\"hsl\", \"hue\"),\n    parse: splitColor(\"hue\", \"saturation\", \"lightness\"),\n    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {\n        return (\"hsla(\" +\n            Math.round(hue) +\n            \", \" +\n            percent.transform(sanitize(saturation)) +\n            \", \" +\n            percent.transform(sanitize(lightness)) +\n            \", \" +\n            sanitize(alpha.transform(alpha$1)) +\n            \")\");\n    },\n};\n\nconst color = {\n    test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),\n    parse: (v) => {\n        if (rgba.test(v)) {\n            return rgba.parse(v);\n        }\n        else if (hsla.test(v)) {\n            return hsla.parse(v);\n        }\n        else {\n            return hex.parse(v);\n        }\n    },\n    transform: (v) => {\n        return isString(v)\n            ? v\n            : v.hasOwnProperty(\"red\")\n                ? rgba.transform(v)\n                : hsla.transform(v);\n    },\n};\n\nconst colorToken = \"${c}\";\nconst numberToken = \"${n}\";\nfunction test(v) {\n    var _a, _b;\n    return (isNaN(v) &&\n        isString(v) &&\n        (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) +\n            (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) >\n            0);\n}\nfunction analyseComplexValue(v) {\n    if (typeof v === \"number\")\n        v = `${v}`;\n    const values = [];\n    let numColors = 0;\n    let numNumbers = 0;\n    const colors = v.match(colorRegex);\n    if (colors) {\n        numColors = colors.length;\n        // Strip colors from input so they're not picked up by number regex.\n        // There's a better way to combine these regex searches, but its beyond my regex skills\n        v = v.replace(colorRegex, colorToken);\n        values.push(...colors.map(color.parse));\n    }\n    const numbers = v.match(floatRegex);\n    if (numbers) {\n        numNumbers = numbers.length;\n        v = v.replace(floatRegex, numberToken);\n        values.push(...numbers.map(number.parse));\n    }\n    return { values, numColors, numNumbers, tokenised: v };\n}\nfunction parse(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { values, numColors, tokenised } = analyseComplexValue(source);\n    const numValues = values.length;\n    return (v) => {\n        let output = tokenised;\n        for (let i = 0; i < numValues; i++) {\n            output = output.replace(i < numColors ? colorToken : numberToken, i < numColors\n                ? color.transform(v[i])\n                : sanitize(v[i]));\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone$1(v) {\n    const parsed = parse(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = { test, parse, createTransformer, getAnimatableNone: getAnimatableNone$1 };\n\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */\nconst isAnimatable = (key, value) => {\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (key === \"zIndex\")\n        return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value))\n        return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n        complex.test(value) && // And it contains numbers and/or colors\n        !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\n\nconst underDampedSpring = () => ({\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n});\nconst criticallyDampedSpring = (to) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: to === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst linearTween = () => ({\n    type: \"keyframes\",\n    ease: \"linear\",\n    duration: 0.3,\n});\nconst keyframes$1 = (values) => ({\n    type: \"keyframes\",\n    duration: 0.8,\n    values,\n});\nconst defaultTransitions = {\n    x: underDampedSpring,\n    y: underDampedSpring,\n    z: underDampedSpring,\n    rotate: underDampedSpring,\n    rotateX: underDampedSpring,\n    rotateY: underDampedSpring,\n    rotateZ: underDampedSpring,\n    scaleX: criticallyDampedSpring,\n    scaleY: criticallyDampedSpring,\n    scale: criticallyDampedSpring,\n    opacity: linearTween,\n    backgroundColor: linearTween,\n    color: linearTween,\n    default: criticallyDampedSpring,\n};\nconst getDefaultTransition = (valueKey, to) => {\n    let transitionFactory;\n    if (isKeyframesTarget(to)) {\n        transitionFactory = keyframes$1;\n    }\n    else {\n        transitionFactory =\n            defaultTransitions[valueKey] || defaultTransitions.default;\n    }\n    return { to, ...transitionFactory(to) };\n};\n\n/**\n * Properties that should default to 1 or 100%\n */\nconst maxDefaults = new Set([\"brightness\", \"contrast\", \"saturate\", \"opacity\"]);\nfunction applyDefaultFilter(v) {\n    const [name, value] = v.slice(0, -1).split(\"(\");\n    if (name === \"drop-shadow\")\n        return v;\n    const [number] = value.match(floatRegex) || [];\n    if (!number)\n        return v;\n    const unit = value.replace(number, \"\");\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value)\n        defaultValue *= 100;\n    return name + \"(\" + defaultValue + unit + \")\";\n}\nconst functionRegex = /([a-z-]*)\\(.*?\\)/g;\nconst filter = {\n    ...complex,\n    getAnimatableNone: (v) => {\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(\" \") : v;\n    },\n};\n\n/**\n * A map of default value types for common values\n */\nconst defaultValueTypes = {\n    ...numberValueTypes,\n    // Color props\n    color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    filter,\n    WebkitFilter: filter,\n};\n/**\n * Gets the default ValueType for the provided value key\n */\nconst getDefaultValueType = (key) => defaultValueTypes[key];\n\nfunction getAnimatableNone(key, value) {\n    var _a;\n    let defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter)\n        defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return (_a = defaultValueType.getAnimatableNone) === null || _a === void 0 ? void 0 : _a.call(defaultValueType, value);\n}\n\nconst instantAnimationState = {\n    current: false,\n};\n\n/*\n  Value in range from progress\n\n  Given a lower limit and an upper limit, we return the value within\n  that range as expressed by progress (usually a number from 0 to 1)\n\n  So progress = 0.5 would change\n\n  from -------- to\n\n  to\n\n  from ---- to\n\n  E.g. from = 10, to = 20, progress = 0.5 => 15\n\n  @param [number]: Lower limit of range\n  @param [number]: Upper limit of range\n  @param [number]: The progress between lower and upper limits expressed 0-1\n  @return [number]: Value as calculated from progress within range (not limited within range)\n*/\nconst mix = (from, to, progress) => -progress * from + progress * to + from;\n\n// Adapted from https://gist.github.com/mjackson/5311256\nfunction hueToRgb(p, q, t) {\n    if (t < 0)\n        t += 1;\n    if (t > 1)\n        t -= 1;\n    if (t < 1 / 6)\n        return p + (q - p) * 6 * t;\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslaToRgba({ hue, saturation, lightness, alpha }) {\n    hue /= 360;\n    saturation /= 100;\n    lightness /= 100;\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (!saturation) {\n        red = green = blue = lightness;\n    }\n    else {\n        const q = lightness < 0.5\n            ? lightness * (1 + saturation)\n            : lightness + saturation - lightness * saturation;\n        const p = 2 * lightness - q;\n        red = hueToRgb(p, q, hue + 1 / 3);\n        green = hueToRgb(p, q, hue);\n        blue = hueToRgb(p, q, hue - 1 / 3);\n    }\n    return {\n        red: Math.round(red * 255),\n        green: Math.round(green * 255),\n        blue: Math.round(blue * 255),\n        alpha,\n    };\n}\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    heyListen.invariant(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    let model = type.parse(color);\n    if (type === hsla) {\n        // TODO Remove this cast - needed since Framer Motion's stricter typing\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to) => {\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    const blended = { ...fromRGBA };\n    return (v) => {\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mix(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\n\nfunction getMixer$1(origin, target) {\n    if (typeof origin === \"number\") {\n        return (v) => mix(origin, target, v);\n    }\n    else if (color.test(origin)) {\n        return mixColor(origin, target);\n    }\n    else {\n        return mixComplex(origin, target);\n    }\n}\nconst mixArray = (from, to) => {\n    const output = [...from];\n    const numValues = output.length;\n    const blendValue = from.map((fromThis, i) => getMixer$1(fromThis, to[i]));\n    return (v) => {\n        for (let i = 0; i < numValues; i++) {\n            output[i] = blendValue[i](v);\n        }\n        return output;\n    };\n};\nconst mixObject = (origin, target) => {\n    const output = { ...origin, ...target };\n    const blendValue = {};\n    for (const key in output) {\n        if (origin[key] !== undefined && target[key] !== undefined) {\n            blendValue[key] = getMixer$1(origin[key], target[key]);\n        }\n    }\n    return (v) => {\n        for (const key in blendValue) {\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n};\nconst mixComplex = (origin, target) => {\n    const template = complex.createTransformer(target);\n    const originStats = analyseComplexValue(origin);\n    const targetStats = analyseComplexValue(target);\n    const canInterpolate = originStats.numColors === targetStats.numColors &&\n        originStats.numNumbers >= targetStats.numNumbers;\n    if (canInterpolate) {\n        return pipe(mixArray(originStats.values, targetStats.values), template);\n    }\n    else {\n        heyListen.warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n        return (p) => `${p > 0 ? target : origin}`;\n    }\n};\n\n/*\n  Progress within given range\n\n  Given a lower limit and an upper limit, we return the progress\n  (expressed as a number 0-1) represented by the given value, and\n  limit that progress to within 0-1.\n\n  @param [number]: Lower limit\n  @param [number]: Upper limit\n  @param [number]: Value to find progress within given range\n  @return [number]: Progress of value within range as expressed 0-1\n*/\nconst progress = (from, to, value) => {\n    const toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\n\nconst mixNumber = (from, to) => (p) => mix(from, to, p);\nfunction detectMixerFactory(v) {\n    if (typeof v === \"number\") {\n        return mixNumber;\n    }\n    else if (typeof v === \"string\") {\n        if (color.test(v)) {\n            return mixColor;\n        }\n        else {\n            return mixComplex;\n        }\n    }\n    else if (Array.isArray(v)) {\n        return mixArray;\n    }\n    else if (typeof v === \"object\") {\n        return mixObject;\n    }\n    return mixNumber;\n}\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || detectMixerFactory(output[0]);\n    const numMixers = output.length - 1;\n    for (let i = 0; i < numMixers; i++) {\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revist this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */\nfunction interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    heyListen.invariant(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    heyListen.invariant(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, \"Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.\");\n    // If input runs highest -> lowest, reverse both arrays\n    if (input[0] > input[inputLength - 1]) {\n        input = [...input].reverse();\n        output = [...output].reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const numMixers = mixers.length;\n    const interpolator = (v) => {\n        let i = 0;\n        if (numMixers > 1) {\n            for (; i < input.length - 2; i++) {\n                if (v < input[i + 1])\n                    break;\n            }\n        }\n        const progressInRange = progress(input[i], input[i + 1], v);\n        return mixers[i](progressInRange);\n    };\n    return isClamp\n        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))\n        : interpolator;\n}\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction defaultOffset(values) {\n    const numValues = values.length;\n    return values.map((_value, i) => i !== 0 ? i / (numValues - 1) : 0);\n}\nfunction convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\nfunction keyframes({ from = 0, to = 1, ease, offset, duration = 300, }) {\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: from };\n    /**\n     * Convert values to an array if they've been given as from/to options\n     */\n    const values = Array.isArray(to) ? to : [from, to];\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const times = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    offset && offset.length === values.length\n        ? offset\n        : defaultOffset(values), duration);\n    function createInterpolator() {\n        return interpolate(times, values, {\n            ease: Array.isArray(ease) ? ease : defaultEasing(values, ease),\n        });\n    }\n    let interpolator = createInterpolator();\n    return {\n        next: (t) => {\n            state.value = interpolator(t);\n            state.done = t >= duration;\n            return state;\n        },\n        flipTarget: () => {\n            values.reverse();\n            interpolator = createInterpolator();\n        },\n    };\n}\n\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {\n    let envelope;\n    let derivative;\n    heyListen.warning(duration <= maxDuration * 1000, \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */\n    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n    duration = clamp(minDuration, maxDuration, duration / 1000);\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        /**\n         * Critically-damped spring\n         */\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = duration * 1000;\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\n/*\n  Convert velocity into velocity per second\n\n  @param [number]: Unit per frame\n  @param [number]: Frame duration in ms\n*/\nfunction velocityPerSecond(velocity, frameDuration) {\n    return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: 0.0,\n        stiffness: 100,\n        damping: 10,\n        mass: 1.0,\n        isResolvedFromDuration: false,\n        ...options,\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = {\n            ...springOptions,\n            ...derived,\n            velocity: 0.0,\n            mass: 1.0,\n        };\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nconst velocitySampleDuration = 5;\n/**\n * This is based on the spring implementation of Wobble https://github.com/skevy/wobble\n */\nfunction spring({ from = 0.0, to = 1.0, restSpeed = 2, restDelta = 0.01, ...options }) {\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: from };\n    let { stiffness, damping, mass, velocity, duration, isResolvedFromDuration, } = getSpringOptions(options);\n    let resolveSpring = zero;\n    let initialVelocity = velocity ? -(velocity / 1000) : 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    function createSpring() {\n        const initialDelta = to - from;\n        const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n        /**\n         * If we're working within what looks like a 0-1 range, change the default restDelta\n         * to 0.01\n         */\n        if (restDelta === undefined) {\n            restDelta = Math.min(Math.abs(to - from) / 100, 0.4);\n        }\n        if (dampingRatio < 1) {\n            const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n            // Underdamped spring\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                return (to -\n                    envelope *\n                        (((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) /\n                            angularFreq) *\n                            Math.sin(angularFreq * t) +\n                            initialDelta * Math.cos(angularFreq * t)));\n            };\n        }\n        else if (dampingRatio === 1) {\n            // Critically damped spring\n            resolveSpring = (t) => to -\n                Math.exp(-undampedAngularFreq * t) *\n                    (initialDelta +\n                        (initialVelocity + undampedAngularFreq * initialDelta) *\n                            t);\n        }\n        else {\n            // Overdamped spring\n            const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                // When performing sinh or cosh values can hit Infinity so we cap them here\n                const freqForT = Math.min(dampedAngularFreq * t, 300);\n                return (to -\n                    (envelope *\n                        ((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) *\n                            Math.sinh(freqForT) +\n                            dampedAngularFreq *\n                                initialDelta *\n                                Math.cosh(freqForT))) /\n                        dampedAngularFreq);\n            };\n        }\n    }\n    createSpring();\n    return {\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = initialVelocity;\n                if (t !== 0) {\n                    /**\n                     * We only need to calculate velocity for under-damped springs\n                     * as over- and critically-damped springs can't overshoot, so\n                     * checking only for displacement is enough.\n                     */\n                    if (dampingRatio < 1) {\n                        const prevT = Math.max(0, t - velocitySampleDuration);\n                        currentVelocity = velocityPerSecond(current - resolveSpring(prevT), t - prevT);\n                    }\n                    else {\n                        currentVelocity = 0;\n                    }\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(to - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? to : current;\n            return state;\n        },\n        flipTarget: () => {\n            initialVelocity = -initialVelocity;\n            [from, to] = [to, from];\n            createSpring();\n        },\n    };\n}\nspring.needsInterpolation = (a, b) => typeof a === \"string\" || typeof b === \"string\";\nconst zero = (_t) => 0;\n\nfunction decay({ velocity = 0, from = 0, power = 0.8, timeConstant = 350, restDelta = 0.5, modifyTarget, }) {\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: from };\n    let amplitude = power * velocity;\n    const ideal = from + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal)\n        amplitude = target - from;\n    return {\n        next: (t) => {\n            const delta = -amplitude * Math.exp(-t / timeConstant);\n            state.done = !(delta > restDelta || delta < -restDelta);\n            state.value = state.done ? target : target + delta;\n            return state;\n        },\n        flipTarget: () => { },\n    };\n}\n\n/*\n  Detect and load appropriate clock setting for the execution environment\n */\nconst defaultTimestep = (1 / 60) * 1000;\nconst getCurrentTime = typeof performance !== \"undefined\"\n    ? () => performance.now()\n    : () => Date.now();\nconst onNextFrame = typeof window !== \"undefined\"\n    ? (callback) => window.requestAnimationFrame(callback)\n    : (callback) => setTimeout(() => callback(getCurrentTime()), defaultTimestep);\n\nfunction createRenderStep(runNextFrame) {\n    /**\n     * We create and reuse two arrays, one to queue jobs for the current frame\n     * and one for the next. We reuse to avoid triggering GC after x frames.\n     */\n    let toRun = [];\n    let toRunNextFrame = [];\n    /**\n     *\n     */\n    let numToRun = 0;\n    /**\n     * Track whether we're currently processing jobs in this step. This way\n     * we can decide whether to schedule new jobs for this frame or next.\n     */\n    let isProcessing = false;\n    let flushNextFrame = false;\n    /**\n     * A set of processes which were marked keepAlive when scheduled.\n     */\n    const toKeepAlive = new WeakSet();\n    const step = {\n        /**\n         * Schedule a process to run on the next frame.\n         */\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const buffer = addToCurrentFrame ? toRun : toRunNextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            // If the buffer doesn't already contain this callback, add it\n            if (buffer.indexOf(callback) === -1) {\n                buffer.push(callback);\n                // If we're adding it to the currently running buffer, update its measured size\n                if (addToCurrentFrame && isProcessing)\n                    numToRun = toRun.length;\n            }\n            return callback;\n        },\n        /**\n         * Cancel the provided callback from running on the next frame.\n         */\n        cancel: (callback) => {\n            const index = toRunNextFrame.indexOf(callback);\n            if (index !== -1)\n                toRunNextFrame.splice(index, 1);\n            toKeepAlive.delete(callback);\n        },\n        /**\n         * Execute all schedule callbacks.\n         */\n        process: (frameData) => {\n            /**\n             * If we're already processing we've probably been triggered by a flushSync\n             * inside an existing process. Instead of executing, mark flushNextFrame\n             * as true and ensure we flush the following frame at the end of this one.\n             */\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [toRun, toRunNextFrame] = [toRunNextFrame, toRun];\n            // Clear the next frame list\n            toRunNextFrame.length = 0;\n            // Execute this frame\n            numToRun = toRun.length;\n            if (numToRun) {\n                for (let i = 0; i < numToRun; i++) {\n                    const callback = toRun[i];\n                    callback(frameData);\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nconst frameData = {\n    delta: 0,\n    timestamp: 0,\n};\n\nconst maxElapsed = 40;\nlet useDefaultElapsed = true;\nlet runNextFrame = false;\nlet isProcessing = false;\nconst stepsOrder = [\n    \"read\",\n    \"update\",\n    \"preRender\",\n    \"render\",\n    \"postRender\",\n];\nconst steps = stepsOrder.reduce((acc, key) => {\n    acc[key] = createRenderStep(() => (runNextFrame = true));\n    return acc;\n}, {});\nconst sync = stepsOrder.reduce((acc, key) => {\n    const step = steps[key];\n    acc[key] = (process, keepAlive = false, immediate = false) => {\n        if (!runNextFrame)\n            startLoop();\n        return step.schedule(process, keepAlive, immediate);\n    };\n    return acc;\n}, {});\nconst cancelSync = stepsOrder.reduce((acc, key) => {\n    acc[key] = steps[key].cancel;\n    return acc;\n}, {});\nconst flushSync = stepsOrder.reduce((acc, key) => {\n    acc[key] = () => steps[key].process(frameData);\n    return acc;\n}, {});\nconst processStep = (stepId) => steps[stepId].process(frameData);\nconst processFrame = (timestamp) => {\n    runNextFrame = false;\n    frameData.delta = useDefaultElapsed\n        ? defaultTimestep\n        : Math.max(Math.min(timestamp - frameData.timestamp, maxElapsed), 1);\n    frameData.timestamp = timestamp;\n    isProcessing = true;\n    stepsOrder.forEach(processStep);\n    isProcessing = false;\n    if (runNextFrame) {\n        useDefaultElapsed = false;\n        onNextFrame(processFrame);\n    }\n};\nconst startLoop = () => {\n    runNextFrame = true;\n    useDefaultElapsed = true;\n    if (!isProcessing)\n        onNextFrame(processFrame);\n};\n\nconst types = { decay, keyframes, spring };\nfunction loopElapsed(elapsed, duration, delay = 0) {\n    return elapsed - duration - delay;\n}\nfunction reverseElapsed(elapsed, duration = 0, delay = 0, isForwardPlayback = true) {\n    return isForwardPlayback\n        ? loopElapsed(duration + -elapsed, duration, delay)\n        : duration - (elapsed - duration) + delay;\n}\nfunction hasRepeatDelayElapsed(elapsed, duration, delay, isForwardPlayback) {\n    return isForwardPlayback ? elapsed >= duration + delay : elapsed <= -delay;\n}\nconst framesync = (update) => {\n    const passTimestamp = ({ delta }) => update(delta);\n    return {\n        start: () => sync.update(passTimestamp, true),\n        stop: () => cancelSync.update(passTimestamp),\n    };\n};\nfunction animate$1({ from, autoplay = true, driver = framesync, elapsed = 0, repeat: repeatMax = 0, repeatType = \"loop\", repeatDelay = 0, onPlay, onStop, onComplete, onRepeat, onUpdate, type = \"keyframes\", ...options }) {\n    var _a, _b;\n    let { to } = options;\n    let driverControls;\n    let repeatCount = 0;\n    let computedDuration = options\n        .duration;\n    let latest;\n    let isComplete = false;\n    let isForwardPlayback = true;\n    let interpolateFromNumber;\n    const animator = types[Array.isArray(to) ? \"keyframes\" : type];\n    if ((_b = (_a = animator).needsInterpolation) === null || _b === void 0 ? void 0 : _b.call(_a, from, to)) {\n        interpolateFromNumber = interpolate([0, 100], [from, to], {\n            clamp: false,\n        });\n        from = 0;\n        to = 100;\n    }\n    const animation = animator({ ...options, from, to });\n    function repeat() {\n        repeatCount++;\n        if (repeatType === \"reverse\") {\n            isForwardPlayback = repeatCount % 2 === 0;\n            elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);\n        }\n        else {\n            elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);\n            if (repeatType === \"mirror\")\n                animation.flipTarget();\n        }\n        isComplete = false;\n        onRepeat && onRepeat();\n    }\n    function complete() {\n        driverControls.stop();\n        onComplete && onComplete();\n    }\n    function update(delta) {\n        if (!isForwardPlayback)\n            delta = -delta;\n        elapsed += delta;\n        if (!isComplete) {\n            const state = animation.next(Math.max(0, elapsed));\n            latest = state.value;\n            if (interpolateFromNumber)\n                latest = interpolateFromNumber(latest);\n            isComplete = isForwardPlayback ? state.done : elapsed <= 0;\n        }\n        onUpdate && onUpdate(latest);\n        if (isComplete) {\n            if (repeatCount === 0) {\n                computedDuration =\n                    computedDuration !== undefined ? computedDuration : elapsed;\n            }\n            if (repeatCount < repeatMax) {\n                hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();\n            }\n            else {\n                complete();\n            }\n        }\n    }\n    function play() {\n        onPlay && onPlay();\n        driverControls = driver(update);\n        driverControls.start();\n    }\n    autoplay && play();\n    return {\n        stop: () => {\n            onStop && onStop();\n            driverControls.stop();\n        },\n    };\n}\n\nfunction inertia({ from = 0, velocity = 0, min, max, power = 0.8, timeConstant = 750, bounceStiffness = 500, bounceDamping = 10, restDelta = 1, modifyTarget, driver, onUpdate, onComplete, onStop, }) {\n    let currentAnimation;\n    function isOutOfBounds(v) {\n        return (min !== undefined && v < min) || (max !== undefined && v > max);\n    }\n    function boundaryNearest(v) {\n        if (min === undefined)\n            return max;\n        if (max === undefined)\n            return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    }\n    function startAnimation(options) {\n        currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();\n        currentAnimation = animate$1({\n            ...options,\n            driver,\n            onUpdate: (v) => {\n                var _a;\n                onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(v);\n                (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, v);\n            },\n            onComplete,\n            onStop,\n        });\n    }\n    function startSpring(options) {\n        startAnimation({\n            type: \"spring\",\n            stiffness: bounceStiffness,\n            damping: bounceDamping,\n            restDelta,\n            ...options,\n        });\n    }\n    if (isOutOfBounds(from)) {\n        // Start the animation with spring if outside the defined boundaries\n        startSpring({ from, velocity, to: boundaryNearest(from) });\n    }\n    else {\n        /**\n         * Or if the value is out of bounds, simulate the inertia movement\n         * with the decay animation.\n         *\n         * Pre-calculate the target so we can detect if it's out-of-bounds.\n         * If it is, we want to check per frame when to switch to a spring\n         * animation\n         */\n        let target = power * velocity + from;\n        if (typeof modifyTarget !== \"undefined\")\n            target = modifyTarget(target);\n        const boundary = boundaryNearest(target);\n        const heading = boundary === min ? -1 : 1;\n        let prev;\n        let current;\n        const checkBoundary = (v) => {\n            prev = current;\n            current = v;\n            velocity = velocityPerSecond(v - prev, frameData.delta);\n            if ((heading === 1 && v > boundary) ||\n                (heading === -1 && v < boundary)) {\n                startSpring({ from: v, to: boundary, velocity });\n            }\n        };\n        startAnimation({\n            type: \"decay\",\n            from,\n            velocity,\n            timeConstant,\n            power,\n            restDelta,\n            modifyTarget,\n            onUpdate: isOutOfBounds(target) ? checkBoundary : undefined,\n        });\n    }\n    return {\n        stop: () => currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop(),\n    };\n}\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = performance.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelSync.read(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    sync.read(checkElapsed, true);\n    return () => cancelSync.read(checkElapsed);\n}\n\n/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, ...transition }) {\n    return !!Object.keys(transition).length;\n}\n/**\n * Convert Framer Motion's Transition type into Popmotion-compatible options.\n */\nfunction convertTransitionToAnimationOptions({ ease, times, ...transition }) {\n    const options = { ...transition };\n    if (times)\n        options[\"offset\"] = times;\n    /**\n     * Convert any existing durations from seconds to milliseconds\n     */\n    if (transition.duration)\n        options[\"duration\"] = secondsToMilliseconds(transition.duration);\n    if (transition.repeatDelay)\n        options.repeatDelay = secondsToMilliseconds(transition.repeatDelay);\n    /**\n     * Map easing names to Popmotion's easing functions\n     */\n    if (ease) {\n        options[\"ease\"] = isEasingArray(ease)\n            ? ease.map(easingDefinitionToFunction)\n            : easingDefinitionToFunction(ease);\n    }\n    /**\n     * Support legacy transition API\n     */\n    if (transition.type === \"tween\")\n        options.type = \"keyframes\";\n    /**\n     * TODO: Popmotion 9 has the ability to automatically detect whether to use\n     * a keyframes or spring animation, but does so by detecting velocity and other spring options.\n     * It'd be good to introduce a similar thing here.\n     */\n    if (transition.type !== \"spring\")\n        options.type = \"keyframes\";\n    return options;\n}\n/**\n * Get the delay for a value by checking Transition with decreasing specificity.\n */\nfunction getDelayFromTransition(transition, key) {\n    const valueTransition = getValueTransition(transition, key) || {};\n    return valueTransition.delay !== undefined\n        ? valueTransition.delay\n        : transition.delay !== undefined\n            ? transition.delay\n            : 0;\n}\nfunction hydrateKeyframes(options) {\n    if (Array.isArray(options.to) && options.to[0] === null) {\n        options.to = [...options.to];\n        options.to[0] = options.from;\n    }\n    return options;\n}\nfunction getPopmotionAnimationOptions(transition, options, key) {\n    if (Array.isArray(options.to) && transition.duration === undefined) {\n        transition.duration = 0.8;\n    }\n    hydrateKeyframes(options);\n    /**\n     * Get a default transition if none is determined to be defined.\n     */\n    if (!isTransitionDefined(transition)) {\n        transition = {\n            ...transition,\n            ...getDefaultTransition(key, options.to),\n        };\n    }\n    return {\n        ...options,\n        ...convertTransitionToAnimationOptions(transition),\n    };\n}\n/**\n *\n */\nfunction getAnimation(key, value, target, transition, onComplete) {\n    const valueTransition = getValueTransition(transition, key) || {};\n    const { elapsed = 0 } = transition;\n    valueTransition.elapsed =\n        elapsed - secondsToMilliseconds(transition.delay || 0);\n    let origin = valueTransition.from !== undefined ? valueTransition.from : value.get();\n    const isTargetAnimatable = isAnimatable(key, target);\n    if (origin === \"none\" && isTargetAnimatable && typeof target === \"string\") {\n        /**\n         * If we're trying to animate from \"none\", try and get an animatable version\n         * of the target. This could be improved to work both ways.\n         */\n        origin = getAnimatableNone(key, target);\n    }\n    else if (isZero(origin) && typeof target === \"string\") {\n        origin = getZeroUnit(target);\n    }\n    else if (!Array.isArray(target) &&\n        isZero(target) &&\n        typeof origin === \"string\") {\n        target = getZeroUnit(origin);\n    }\n    const isOriginAnimatable = isAnimatable(key, origin);\n    heyListen.warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${key} from \"${origin}\" to \"${target}\". ${origin} is not an animatable value - to enable this animation set ${origin} to a value animatable to ${target} via the \\`style\\` property.`);\n    function start() {\n        const options = {\n            from: origin,\n            to: target,\n            velocity: value.getVelocity(),\n            onComplete,\n            onUpdate: (v) => value.set(v),\n        };\n        const animation = valueTransition.type === \"inertia\" ||\n            valueTransition.type === \"decay\"\n            ? inertia({ ...options, ...valueTransition })\n            : animate$1({\n                ...getPopmotionAnimationOptions(valueTransition, options, key),\n                onUpdate: (v) => {\n                    options.onUpdate(v);\n                    valueTransition.onUpdate &&\n                        valueTransition.onUpdate(v);\n                },\n                onComplete: () => {\n                    options.onComplete();\n                    valueTransition.onComplete &&\n                        valueTransition.onComplete();\n                },\n            });\n        return () => animation.stop();\n    }\n    function set() {\n        const finalTarget = resolveFinalValueInKeyframes(target);\n        value.set(finalTarget);\n        onComplete();\n        valueTransition.onUpdate && valueTransition.onUpdate(finalTarget);\n        valueTransition.onComplete && valueTransition.onComplete();\n        return () => { };\n    }\n    const useInstantAnimation = !isOriginAnimatable ||\n        !isTargetAnimatable ||\n        valueTransition.type === false;\n    return useInstantAnimation\n        ? valueTransition.elapsed\n            ? () => delay(set, -valueTransition.elapsed)\n            : set()\n        : start();\n}\nfunction isZero(value) {\n    return (value === 0 ||\n        (typeof value === \"string\" &&\n            parseFloat(value) === 0 &&\n            value.indexOf(\" \") === -1));\n}\nfunction getZeroUnit(potentialUnitType) {\n    return typeof potentialUnitType === \"number\"\n        ? 0\n        : getAnimatableNone(\"\", potentialUnitType);\n}\nfunction getValueTransition(transition, key) {\n    return transition[key] || transition[\"default\"] || transition;\n}\n/**\n * Start animation on a MotionValue. This function is an interface between\n * Framer Motion and Popmotion\n */\nfunction startAnimation(key, value, target, transition = {}) {\n    if (instantAnimationState.current) {\n        transition = { type: false };\n    }\n    return value.start((onComplete) => {\n        return getAnimation(key, value, target, { ...transition, delay: getDelayFromTransition(transition, key) }, onComplete);\n    });\n}\n\n/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */\nconst isNumericalString = (v) => /^\\-?\\d*\\.?\\d+$/.test(v);\n\n/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */\nconst isZeroValueString = (v) => /^0[^.\\s]+$/.test(v);\n\nfunction addUniqueItem(arr, item) {\n    if (arr.indexOf(item) === -1)\n        arr.push(item);\n}\nfunction removeItem(arr, item) {\n    const index = arr.indexOf(item);\n    if (index > -1)\n        arr.splice(index, 1);\n}\n// Adapted from array-move\nfunction moveItem([...arr], fromIndex, toIndex) {\n    const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;\n    if (startIndex >= 0 && startIndex < arr.length) {\n        const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;\n        const [item] = arr.splice(fromIndex, 1);\n        arr.splice(endIndex, 0, item);\n    }\n    return arr;\n}\n\nclass SubscriptionManager {\n    constructor() {\n        this.subscriptions = [];\n    }\n    add(handler) {\n        addUniqueItem(this.subscriptions, handler);\n        return () => removeItem(this.subscriptions, handler);\n    }\n    notify(a, b, c) {\n        const numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions)\n            return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */\n            this.subscriptions[0](a, b, c);\n        }\n        else {\n            for (let i = 0; i < numSubscriptions; i++) {\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */\n                const handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n}\n\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"7.8.0\";\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */\n        this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */\n        this.lastUpdated = 0;\n        /**\n         * Functions to notify when the `MotionValue` updates.\n         *\n         * @internal\n         */\n        this.updateSubscribers = new SubscriptionManager();\n        /**\n         * Functions to notify when the velocity updates.\n         *\n         * @internal\n         */\n        this.velocityUpdateSubscribers = new SubscriptionManager();\n        /**\n         * Functions to notify when the `MotionValue` updates and `render` is set to `true`.\n         *\n         * @internal\n         */\n        this.renderSubscribers = new SubscriptionManager();\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = false;\n        this.updateAndNotify = (v, render = true) => {\n            this.prev = this.current;\n            this.current = v;\n            // Update timestamp\n            const { delta, timestamp } = frameData;\n            if (this.lastUpdated !== timestamp) {\n                this.timeDelta = delta;\n                this.lastUpdated = timestamp;\n                sync.postRender(this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (this.prev !== this.current) {\n                this.updateSubscribers.notify(this.current);\n            }\n            // Update velocity subscribers\n            if (this.velocityUpdateSubscribers.getSize()) {\n                this.velocityUpdateSubscribers.notify(this.getVelocity());\n            }\n            // Update render subscribers\n            if (render) {\n                this.renderSubscribers.notify(this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.scheduleVelocityCheck = () => sync.postRender(this.velocityCheck);\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.velocityCheck = ({ timestamp }) => {\n            if (timestamp !== this.lastUpdated) {\n                this.prev = this.current;\n                this.velocityUpdateSubscribers.notify(this.getVelocity());\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.onChange(updateOpacity)\n     *     const unsubscribeY = y.onChange(updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @privateRemarks\n     *\n     * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.\n     *\n     * ```jsx\n     * useOnChange(x, () => {})\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @public\n     */\n    onChange(subscription) {\n        return this.updateSubscribers.add(subscription);\n    }\n    clearListeners() {\n        this.updateSubscribers.clear();\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` requests a render.\n     *\n     * @param subscriber - A function that's provided the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @internal\n     */\n    onRenderRequest(subscription) {\n        // Render immediately\n        subscription(this.get());\n        return this.renderSubscribers.add(subscription);\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect) {\n        this.passiveEffect = passiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity\n            ? // These casts could be avoided if parseFloat would be typed better\n                velocityPerSecond(parseFloat(this.current) -\n                    parseFloat(this.prev), this.timeDelta)\n            : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(animation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.stopAnimation = animation(resolve);\n        }).then(() => this.clearAnimation());\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.stopAnimation)\n            this.stopAnimation();\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.stopAnimation;\n    }\n    clearAnimation() {\n        this.stopAnimation = null;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.updateSubscribers.clear();\n        this.renderSubscribers.clear();\n        this.stop();\n    }\n}\nfunction motionValue(init) {\n    return new MotionValue(init);\n}\n\n/**\n * Tests a provided value against a ValueType\n */\nconst testValueType = (v) => (type) => type.test(v);\n\n/**\n * ValueType for \"auto\"\n */\nconst auto = {\n    test: (v) => v === \"auto\",\n    parse: (v) => v,\n};\n\n/**\n * A list of value types commonly used for dimensions\n */\nconst dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nconst findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));\n\n/**\n * A list of all ValueTypes\n */\nconst valueTypes = [...dimensionValueTypes, color, complex];\n/**\n * Tests a value against the list of ValueTypes\n */\nconst findValueType = (v) => valueTypes.find(testValueType(v));\n\n/**\n * Creates an object containing the latest state of every MotionValue on a VisualElement\n */\nfunction getCurrent(visualElement) {\n    const current = {};\n    visualElement.values.forEach((value, key) => (current[key] = value.get()));\n    return current;\n}\n/**\n * Creates an object containing the latest velocity of every MotionValue on a VisualElement\n */\nfunction getVelocity$1(visualElement) {\n    const velocity = {};\n    visualElement.values.forEach((value, key) => (velocity[key] = value.getVelocity()));\n    return velocity;\n}\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, getCurrent(visualElement), getVelocity$1(visualElement));\n}\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        var _a;\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => {\n            setVariants(child, variantLabels);\n        });\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\nfunction checkTargetForNewValues(visualElement, target, origin) {\n    var _a, _b;\n    const newValueKeys = Object.keys(target).filter((key) => !visualElement.hasValue(key));\n    const numNewValues = newValueKeys.length;\n    if (!numNewValues)\n        return;\n    for (let i = 0; i < numNewValues; i++) {\n        const key = newValueKeys[i];\n        const targetValue = target[key];\n        let value = null;\n        /**\n         * If the target is a series of keyframes, we can use the first value\n         * in the array. If this first value is null, we'll still need to read from the DOM.\n         */\n        if (Array.isArray(targetValue)) {\n            value = targetValue[0];\n        }\n        /**\n         * If the target isn't keyframes, or the first keyframe was null, we need to\n         * first check if an origin value was explicitly defined in the transition as \"from\",\n         * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n         */\n        if (value === null) {\n            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n        }\n        /**\n         * If value is still undefined or null, ignore it. Preferably this would throw,\n         * but this was causing issues in Framer.\n         */\n        if (value === undefined || value === null)\n            continue;\n        if (typeof value === \"string\" &&\n            (isNumericalString(value) || isZeroValueString(value))) {\n            // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n            value = parseFloat(value);\n        }\n        else if (!findValueType(value) && complex.test(targetValue)) {\n            value = getAnimatableNone(key, targetValue);\n        }\n        visualElement.addValue(key, motionValue(value));\n        if (origin[key] === undefined) {\n            origin[key] = value;\n        }\n        if (value !== null)\n            visualElement.setBaseTarget(key, value);\n    }\n}\nfunction getOriginFromTransition(key, transition) {\n    if (!transition)\n        return;\n    const valueTransition = transition[key] || transition[\"default\"] || transition;\n    return valueTransition.from;\n}\nfunction getOrigin(target, transition, visualElement) {\n    var _a;\n    const origin = {};\n    for (const key in target) {\n        const transitionOrigin = getOriginFromTransition(key, transition);\n        origin[key] =\n            transitionOrigin !== undefined\n                ? transitionOrigin\n                : (_a = visualElement.getValue(key)) === null || _a === void 0 ? void 0 : _a.get();\n    }\n    return origin;\n}\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nconst appearStoreId = (id, value) => `${id}: ${value}`;\n\nfunction handoffOptimizedAppearAnimation(id, name) {\n    const { MotionAppearAnimations } = window;\n    const animationId = appearStoreId(id, transformProps.has(name) ? \"transform\" : name);\n    const animation = MotionAppearAnimations && MotionAppearAnimations.get(animationId);\n    if (animation) {\n        /**\n         * We allow the animation to persist until the next frame:\n         *   1. So it continues to play until Framer Motion is ready to render\n         *      (avoiding a potential flash of the element's original state)\n         *   2. As all independent transforms share a single transform animation, stopping\n         *      it synchronously would prevent subsequent transforms from handing off.\n         */\n        sync.render(() => {\n            /**\n             * Animation.cancel() throws so it needs to be wrapped in a try/catch\n             */\n            try {\n                animation.cancel();\n                MotionAppearAnimations.delete(animationId);\n            }\n            catch (e) { }\n        });\n        return animation.currentTime || 0;\n    }\n    else {\n        return 0;\n    }\n}\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = animateTarget(visualElement, resolvedDefinition, options);\n    }\n    return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\nfunction animateVariant(visualElement, variant, options = {}) {\n    var _a;\n    const resolved = resolveVariant(visualElement, variant, options.custom);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => animateTarget(visualElement, resolved, options)\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = ((_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.size)\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(last);\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\n/**\n * @internal\n */\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    var _a;\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type && ((_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.getState()[type]);\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        let valueTransition = { delay, elapsed: 0, ...transition };\n        /**\n         * Make animation instant if this is a transform prop and we should reduce motion.\n         */\n        if (visualElement.shouldReduceMotion && transformProps.has(key)) {\n            valueTransition = {\n                ...valueTransition,\n                type: false,\n                delay: 0,\n            };\n        }\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        if (!value.hasAnimated) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                valueTransition.elapsed = handoffOptimizedAppearAnimation(appearId, key);\n            }\n        }\n        let animation = startAnimation(key, value, valueTarget, valueTransition);\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation = animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    return Promise.all(animations).then(() => {\n        transitionEnd && setTarget(visualElement, transitionEnd);\n    });\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\n\nconst variantPriorityOrder = [\n    exports.AnimationType.Animate,\n    exports.AnimationType.InView,\n    exports.AnimationType.Focus,\n    exports.AnimationType.Hover,\n    exports.AnimationType.Tap,\n    exports.AnimationType.Drag,\n    exports.AnimationType.Exit,\n];\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined ? props[type] : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev) || variantDidChange) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type, ...options },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            props.initial === false &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(options, type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        [exports.AnimationType.Animate]: createTypeState(true),\n        [exports.AnimationType.InView]: createTypeState(),\n        [exports.AnimationType.Hover]: createTypeState(),\n        [exports.AnimationType.Tap]: createTypeState(),\n        [exports.AnimationType.Drag]: createTypeState(),\n        [exports.AnimationType.Focus]: createTypeState(),\n        [exports.AnimationType.Exit]: createTypeState(),\n    };\n}\n\nconst animations = {\n    animation: makeRenderlessComponent(({ visualElement, animate }) => {\n        /**\n         * We dynamically generate the AnimationState manager as it contains a reference\n         * to the underlying animation library. We only want to load that if we load this,\n         * so people can optionally code split it out using the `m` component.\n         */\n        visualElement.animationState || (visualElement.animationState = createAnimationState(visualElement));\n        /**\n         * Subscribe any provided AnimationControls to the component's VisualElement\n         */\n        if (isAnimationControls(animate)) {\n            React.useEffect(() => animate.subscribe(visualElement), [animate]);\n        }\n    }),\n    exit: makeRenderlessComponent((props) => {\n        const { custom, visualElement } = props;\n        const [isPresent, safeToRemove] = usePresence();\n        const presenceContext = React.useContext(PresenceContext);\n        React.useEffect(() => {\n            visualElement.isPresent = isPresent;\n            const animation = visualElement.animationState &&\n                visualElement.animationState.setActive(exports.AnimationType.Exit, !isPresent, {\n                    custom: (presenceContext && presenceContext.custom) ||\n                        custom,\n                });\n            if (animation && !isPresent) {\n                animation.then(safeToRemove);\n            }\n        }, [isPresent]);\n    }),\n};\n\nconst distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Because Safari doesn't trigger mouseup events when it's above a `<select>`\n            if (isMouseEvent(event) && event.buttons === 0) {\n                this.handlePointerUp(event, info);\n                return;\n            }\n            // Throttle mouse move event to once per frame\n            sync.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            const { onEnd, onSessionEnd } = this.handlers;\n            const panInfo = getPanInfo(transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (isTouchEvent(event) && event.touches.length > 1)\n            return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(window, \"pointermove\", this.handlePointerMove), addPointerEvent(window, \"pointerup\", this.handlePointerUp), addPointerEvent(window, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelSync.update(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1000;\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))\n        delta.scale = 1;\n    delta.translate =\n        mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate))\n        delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin === null || origin === void 0 ? void 0 : origin.originX);\n    calcAxisDelta(delta.y, source.y, target.y, origin === null || origin === void 0 ? void 0 : origin.originY);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nconst createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nfunction eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\n/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nfunction isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    var _a, _b;\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        if (((_b = (_a = node.instance) === null || _a === void 0 ? void 0 : _a.style) === null || _b === void 0 ? void 0 : _b.display) === \"contents\")\n            continue;\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    treeScale.x = snapToDefault(treeScale.x);\n    treeScale.y = snapToDefault(treeScale.y);\n}\nfunction snapToDefault(scale) {\n    if (Number.isInteger(scale))\n        return scale;\n    return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, transforms, [key, scaleKey, originKey]) {\n    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    const originPoint = mix(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys$1 = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys$1 = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys$1);\n    transformAxis(box.y, transform, yKeys$1);\n}\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: AnyPointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        if (this.visualElement.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            var _a;\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                var _a, _b;\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const measuredAxis = (_b = (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b.layoutBox[axis];\n                    if (measuredAxis) {\n                        const length = calcLength(measuredAxis);\n                        current = length * (parseFloat(current) / 100);\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);\n            (_a = this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(exports.AnimationType.Drag, true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n    }\n    cancel() {\n        var _a, _b;\n        this.isDragging = false;\n        if (this.visualElement.projection) {\n            this.visualElement.projection.isAnimationBlocked = false;\n        }\n        (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(exports.AnimationType.Drag, false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const { layout } = this.visualElement.projection || {};\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        heyListen.invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints === null || constraints === void 0 ? void 0 : constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return startAnimation(axis, axisValue, 0, transition);\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        var _a;\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const externalMotionValue = this.visualElement.getProps()[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, ((_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        var _a;\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        var _a;\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\n/**\n * A hook that allows an element to be dragged.\n *\n * @internal\n */\nfunction useDrag(props) {\n    const { dragControls: groupDragControls, visualElement } = props;\n    const dragControls = useConstant(() => new VisualElementDragControls(visualElement));\n    // If we've been provided a DragControls for manual control over the drag gesture,\n    // subscribe this component to it on mount.\n    React.useEffect(() => groupDragControls && groupDragControls.subscribe(dragControls), [dragControls, groupDragControls]);\n    // Apply the event listeners to the element\n    React.useEffect(() => dragControls.addListeners(), [dragControls]);\n}\n\n/**\n *\n * @param handlers -\n * @param ref -\n *\n * @privateRemarks\n * Currently this sets new pan gesture functions every render. The memo route has been explored\n * in the past but ultimately we're still creating new functions every render. An optimisation\n * to explore is creating the pan gestures and loading them into a `ref`.\n *\n * @internal\n */\nfunction usePanGesture({ onPan, onPanStart, onPanEnd, onPanSessionStart, visualElement, }) {\n    const hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\n    const panSession = React.useRef(null);\n    const { transformPagePoint } = React.useContext(MotionConfigContext);\n    const handlers = {\n        onSessionStart: onPanSessionStart,\n        onStart: onPanStart,\n        onMove: onPan,\n        onEnd: (event, info) => {\n            panSession.current = null;\n            onPanEnd && onPanEnd(event, info);\n        },\n    };\n    React.useEffect(() => {\n        if (panSession.current !== null) {\n            panSession.current.updateHandlers(handlers);\n        }\n    });\n    function onPointerDown(event) {\n        panSession.current = new PanSession(event, handlers, {\n            transformPagePoint,\n        });\n    }\n    usePointerEvent(visualElement, \"pointerdown\", hasPanEvents && onPointerDown);\n    useUnmountEffect(() => panSession.current && panSession.current.end());\n}\n\nconst drag = {\n    pan: makeRenderlessComponent(usePanGesture),\n    drag: makeRenderlessComponent(useDrag),\n};\n\nfunction isCSSVariable(value) {\n    return typeof value === \"string\" && value.startsWith(\"var(--\");\n}\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    const match = cssVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token, fallback] = match;\n    return [token, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    heyListen.invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        return resolved.trim();\n    }\n    else if (isCSSVariable(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, { ...target }, transitionEnd) {\n    const element = visualElement.current;\n    if (!(element instanceof Element))\n        return { target, transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = { ...transitionEnd };\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.values.forEach((value) => {\n        const current = value.get();\n        if (!isCSSVariable(current))\n            return;\n        const resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (const key in target) {\n        const current = target[key];\n        if (!isCSSVariable(current))\n            continue;\n        const resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd && transitionEnd[key] === undefined) {\n            transitionEnd[key] = current;\n        }\n    }\n    return { target, transitionEnd };\n}\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n]);\nconst isPositionalKey = (key) => positionalKeys.has(key);\nconst hasPositionalKey = (target) => {\n    return Object.keys(target).some(isPositionalKey);\n};\nconst setAndResetVelocity = (value, to) => {\n    // Looks odd but setting it twice doesn't render, it'll just\n    // set both prev and current to the latest value\n    value.set(to, false);\n    value.set(to);\n};\nconst isNumOrPxType = (v) => v === number || v === px;\nvar BoundingBoxDimension;\n(function (BoundingBoxDimension) {\n    BoundingBoxDimension[\"width\"] = \"width\";\n    BoundingBoxDimension[\"height\"] = \"height\";\n    BoundingBoxDimension[\"left\"] = \"left\";\n    BoundingBoxDimension[\"right\"] = \"right\";\n    BoundingBoxDimension[\"top\"] = \"top\";\n    BoundingBoxDimension[\"bottom\"] = \"bottom\";\n})(BoundingBoxDimension || (BoundingBoxDimension = {}));\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.render();\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\nconst convertChangedValueTypes = (target, visualElement, changedKeys) => {\n    const originBbox = visualElement.measureViewportBox();\n    const element = visualElement.current;\n    const elementComputedStyle = getComputedStyle(element);\n    const { display } = elementComputedStyle;\n    const origin = {};\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    /**\n     * Record origins before we render and update styles\n     */\n    changedKeys.forEach((key) => {\n        origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n    });\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.render();\n    const targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach((key) => {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        const value = visualElement.getValue(key);\n        setAndResetVelocity(value, origin[key]);\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nconst checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {\n    target = { ...target };\n    transitionEnd = { ...transitionEnd };\n    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    let removedTransformValues = [];\n    let hasAttemptedToRemoveTransformValues = false;\n    const changedValueTypeKeys = [];\n    targetPositionalKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        let from = origin[key];\n        let fromType = findDimensionValueType(from);\n        const to = target[key];\n        let toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            const numKeyframes = to.length;\n            const fromIndex = to[0] === null ? 1 : 0;\n            from = to[fromIndex];\n            fromType = findDimensionValueType(from);\n            for (let i = fromIndex; i < numKeyframes; i++) {\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    heyListen.invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    heyListen.invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                const current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues =\n                        removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                setAndResetVelocity(value, to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        const scrollY = changedValueTypeKeys.indexOf(\"height\") >= 0\n            ? window.pageYOffset\n            : null;\n        const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(([key, value]) => {\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.render();\n        // Restore scroll position\n        if (isBrowser && scrollY !== null) {\n            window.scrollTo({ top: scrollY });\n        }\n        return { target: convertedTarget, transitionEnd };\n    }\n    else {\n        return { target, transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target, transitionEnd };\n}\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */\nconst parseDomVariant = (visualElement, target, origin, transitionEnd) => {\n    const resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n\n// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"7.8.0\", `Attempting to mix Framer Motion versions ${nextValue.version} with 7.8.0 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue));\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.remove(key);\n            }\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"Unmount\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, reducedMotionConfig, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        /**\n         * Tracks whether this VisualElement's React component is currently present\n         * within the defined React tree.\n         */\n        this.isPresent = true;\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => sync.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props) {\n        return {};\n    }\n    mount(instance) {\n        var _a;\n        this.current = instance;\n        if (this.projection) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (this.parent)\n            this.parent.children.add(this);\n        this.setProps(this.props);\n    }\n    unmount() {\n        var _a, _b, _c;\n        (_a = this.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n        cancelSync.update(this.notifyUpdate);\n        cancelSync.render(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        (_b = this.removeFromVariantTree) === null || _b === void 0 ? void 0 : _b.call(this);\n        (_c = this.parent) === null || _c === void 0 ? void 0 : _c.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.onChange((latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate &&\n                sync.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.onRenderRequest(this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type)\n            return 0;\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures(renderedProps, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n        const features = [];\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (env !== \"production\" && preloadedFeatures && isStrict) {\n            heyListen.invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Component } = featureDefinitions[name];\n            /**\n             * It might be possible in the future to use this moment to\n             * dynamically request functionality. In initial tests this\n             * was producing a lot of duplication amongst bundles.\n             */\n            if (isEnabled(renderedProps) && Component) {\n                features.push(React.createElement(Component, {\n                    key: name,\n                    ...renderedProps,\n                    visualElement: this,\n                }));\n            }\n        }\n        if (!this.projection && ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(projectionId, this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n            });\n        }\n        return features;\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    setProps(props) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.props = props;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props), this.prevMotionValues);\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        var _a;\n        return (_a = this.props.variants) === null || _a === void 0 ? void 0 : _a[name];\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        var _a;\n        return this.isVariantNode ? this : (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getClosestVariantNode();\n    }\n    getVariantContext(startAtParent = false) {\n        var _a, _b;\n        if (startAtParent)\n            return (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getVariantContext();\n        if (!this.isControllingVariants) {\n            const context = ((_b = this.parent) === null || _b === void 0 ? void 0 : _b.getVariantContext()) || {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        var _a;\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (this.hasValue(key))\n            this.removeValue(key);\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n        this.bindToMotionValue(key, value);\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        var _a;\n        this.values.delete(key);\n        (_a = this.valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n        this.valueSubscriptions.delete(key);\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    /**\n     * Get a motion value for this key. If called with a default\n     * value, we'll create one if none exists.\n     */\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue);\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key) {\n        return this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        var _a;\n        (_a = this.events[eventName]) === null || _a === void 0 ? void 0 : _a.notify(...args);\n    }\n}\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\n\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        var _a;\n        return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {\n        let origin = getOrigin(target, transition || {}, this);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(this, target, origin);\n            const parsed = parseDomVariant(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target,\n        };\n    }\n}\n\nfunction getComputedStyle$1(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle$1(instance);\n            const value = (isCSSVariable$1(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, options, props) {\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props) {\n        return scrapeMotionValuesFromProps$1(props);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderHTML(instance, renderState, styleProp, projection);\n    }\n}\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.isSVGTag = false;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        var _a;\n        if (transformProps.has(key)) {\n            return ((_a = getDefaultValueType(key)) === null || _a === void 0 ? void 0 : _a.default) || 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    scrapeMotionValuesFromProps(props) {\n        return scrapeMotionValuesFromProps(props);\n    }\n    build(renderState, latestValues, options, props) {\n        buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options, { enableHardwareAcceleration: false })\n        : new HTMLVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nconst varToken = \"_$css\";\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        /**\n         * We need to first strip and store CSS variables from the string.\n         */\n        const containsCSSVariables = latest.includes(\"var(\");\n        const cssVariables = [];\n        if (containsCSSVariables) {\n            latest = latest.replace(cssVariableRegex, (match) => {\n                cssVariables.push(match);\n                return varToken;\n            });\n        }\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        let output = template(shadow);\n        if (containsCSSVariables) {\n            let i = 0;\n            output = output.replace(varToken, () => {\n                const cssVariable = cssVariables[i];\n                i++;\n                return cssVariable;\n            });\n        }\n        return output;\n    },\n};\n\nclass MeasureLayoutWithContext extends React__default[\"default\"].Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                sync.postRender(() => {\n                    var _a;\n                    if (!((_a = projection.getStack()) === null || _a === void 0 ? void 0 : _a.members.length)) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            if (!projection.currentAnimation && projection.isLead()) {\n                this.safeToRemove();\n            }\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext === null || promoteContext === void 0 ? void 0 : promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = React.useContext(LayoutGroupContext);\n    return (React__default[\"default\"].createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: React.useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nconst layoutFeatures = {\n    measureLayout: MeasureLayout,\n};\n\n/**\n * Animate a single value or a `MotionValue`.\n *\n * The first argument is either a `MotionValue` to animate, or an initial animation value.\n *\n * The second is either a value to animate to, or an array of keyframes to animate through.\n *\n * The third argument can be either tween or spring options, and optional lifecycle methods: `onUpdate`, `onPlay`, `onComplete`, `onRepeat` and `onStop`.\n *\n * Returns `AnimationPlaybackControls`, currently just a `stop` method.\n *\n * ```javascript\n * const x = useMotionValue(0)\n *\n * useEffect(() => {\n *   const controls = animate(x, 100, {\n *     type: \"spring\",\n *     stiffness: 2000,\n *     onComplete: v => {}\n *   })\n *\n *   return controls.stop\n * })\n * ```\n *\n * @public\n */\nfunction animate(from, to, transition = {}) {\n    const value = isMotionValue(from) ? from : motionValue(from);\n    startAnimation(\"\", value, to, transition);\n    return {\n        stop: () => value.stop(),\n        isAnimating: () => value.isAnimating(),\n    };\n}\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mix(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\n/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox === null || originBox === void 0 ? void 0 : originBox.x, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.x);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox === null || originBox === void 0 ? void 0 : originBox.y, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.y);\n}\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return (a.x.min === b.x.min &&\n        a.x.max === b.x.max &&\n        a.y.min === b.y.min &&\n        a.y.max === b.y.max);\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        var _a;\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if ((_a = node.root) === null || _a === void 0 ? void 0 : _a.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            var _a, _b, _c, _d, _e;\n            (_b = (_a = node.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n            (_e = (_c = node.resumingFrom) === null || _c === void 0 ? void 0 : (_d = _c.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d);\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nfunction buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nconst compareByDepth = (a, b) => a.depth - b.depth;\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id$1 = 0;\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(elementId, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id$1++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            this.isTransformDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this or any\n             * child might need recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.elementId = elementId;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            elementId && this.root.registerPotentialNode(elementId, this);\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        registerPotentialNode(elementId, node) {\n            this.potentialNodes.set(elementId, node);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = false) {\n            var _a;\n            if (this.instance)\n                return;\n            this.isSVG =\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n            this.elementId && this.root.potentialNodes.delete(this.elementId);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    var _a, _b, _c, _d, _e;\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = (_b = (_a = this.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (((_c = this.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            this.animationProgress === 0) {\n                            finishAnimation(this);\n                        }\n                        this.isLead() && ((_e = (_d = this.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            var _a, _b;\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            var _a;\n            return (this.isAnimationBlocked ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            var _a;\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n            this.animationId++;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            var _a, _b, _c;\n            if (this.root.isUpdateBlocked()) {\n                (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n            this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        // Note: Currently only running on root node\n        didUpdate() {\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            sync.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            var _a;\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.layoutBox);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            var _a;\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            const transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            var _a;\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layoutBox, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        /**\n         *\n         */\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.isProjectionDirty = true;\n            this.root.scheduleUpdateProjection();\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        /**\n         * Frame calculations\n         */\n        resolveTargetDelta() {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            if (!this.isProjectionDirty && !this.attemptToResolveRelativeTarget)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && relativeParent.layout) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues))\n                return undefined;\n            if ((this.parent.relativeTarget || this.parent.targetDelta) &&\n                this.parent.layout) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        calcProjection() {\n            var _a;\n            const { isProjectionDirty, isTransformDirty } = this;\n            this.isProjectionDirty = this.isTransformDirty = false;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            if (isProjectionDirty)\n                canSkip = false;\n            if (isShared && isTransformDirty)\n                canSkip = false;\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            const { target } = lead;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            var _a, _b, _c;\n            (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            var _a, _b;\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            this.relativeTarget = this.relativeTargetOrigin = undefined;\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const isSharedLayoutAnimation = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.source) !== ((_a = this.layout) === null || _a === void 0 ? void 0 : _a.source);\n            const isOnlyMember = (((_b = this.getStack()) === null || _b === void 0 ? void 0 : _b.members.length) || 0) <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            this.mixTargetDelta = (latest) => {\n                var _a;\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(0);\n        }\n        startAnimation(options) {\n            var _a, _b;\n            this.notifyListeners(\"animationStart\");\n            (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            if (this.resumingFrom) {\n                (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animate(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        var _a;\n                        this.mixTargetDelta(latest);\n                        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n                    },\n                    onComplete: () => {\n                        var _a;\n                        (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            var _a;\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            var _a;\n            if (this.currentAnimation) {\n                (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            var _a, _b, _c;\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            node.promote({\n                transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n                preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node),\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement === null || visualElement === void 0 ? void 0 : visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b, _c;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_c = (_b = valuesToRender.opacity) !== null && _b !== void 0 ? _b : this.latestValues.opacity) !== null && _c !== void 0 ? _c : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                const corrected = correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a, _b, _c;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Propagate isProjectionDirty. Nodes are ordered by depth, so if the parent here\n     * is dirty we can simply pass this forward.\n     */\n    node.isProjectionDirty || (node.isProjectionDirty = Boolean(node.parent && node.parent.isProjectionDirty));\n    /**\n     * Propagate isTransformDirty.\n     */\n    node.isTransformDirty || (node.isTransformDirty = Boolean(node.parent && node.parent.isTransformDirty));\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, elementId) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    let searchNode = node.root;\n    for (let i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    const element = searchElement.querySelector(`[data-projection-id=\"${elementId}\"]`);\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode(0, {});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nconst featureBundle = {\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layoutFeatures,\n};\n/**\n * HTML & SVG components, optimised for use with gestures and animation. These can be used as\n * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.\n *\n * @public\n */\nconst motion = /*@__PURE__*/ createMotionProxy((Component, config) => createDomMotionConfig(Component, config, featureBundle, createDomVisualElement, HTMLProjectionNode));\n/**\n * Create a DOM `motion` component with the provided string. This is primarily intended\n * as a full alternative to `motion` for consumers who have to support environments that don't\n * support `Proxy`.\n *\n * ```javascript\n * import { createDomMotionComponent } from \"framer-motion\"\n *\n * const motion = {\n *   div: createDomMotionComponent('div')\n * }\n * ```\n *\n * @public\n */\nfunction createDomMotionComponent(key) {\n    return createMotionComponent(createDomMotionConfig(key, { forwardMotionProps: false }, featureBundle, createDomVisualElement, HTMLProjectionNode));\n}\n\n/**\n * @public\n */\nconst m = createMotionProxy(createDomMotionConfig);\n\nfunction useIsMounted() {\n    const isMounted = React.useRef(false);\n    useIsomorphicLayoutEffect(() => {\n        isMounted.current = true;\n        return () => {\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n}\n\nfunction useForceUpdate() {\n    const isMounted = useIsMounted();\n    const [forcedRenderCount, setForcedRenderCount] = React.useState(0);\n    const forceRender = React.useCallback(() => {\n        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [forcedRenderCount]);\n    /**\n     * Defer this to the end of the next animation frame in case there are multiple\n     * synchronous calls.\n     */\n    const deferredForceRender = React.useCallback(() => sync.postRender(forceRender), [forceRender]);\n    return [deferredForceRender, forcedRenderCount];\n}\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\nclass PopChildMeasure extends React__namespace.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */\n    componentDidUpdate() { }\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild({ children, isPresent }) {\n    const id = React.useId();\n    const ref = React.useRef(null);\n    const size = React.useRef({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n    });\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */\n    React.useInsertionEffect(() => {\n        const { width, height, top, left } = size.current;\n        if (isPresent || !ref.current || !width || !height)\n            return;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        document.head.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            top: ${top}px !important;\n            left: ${left}px !important;\n          }\n        `);\n        }\n        return () => {\n            document.head.removeChild(style);\n        };\n    }, [isPresent]);\n    return (React__namespace.createElement(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size }, React__namespace.cloneElement(children, { ref })));\n}\n\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, }) => {\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = React.useId();\n    const context = React.useMemo(() => ({\n        id,\n        initial,\n        isPresent,\n        custom,\n        onExitComplete: (childId) => {\n            presenceChildren.set(childId, true);\n            for (const isComplete of presenceChildren.values()) {\n                if (!isComplete)\n                    return; // can stop searching when any is incomplete\n            }\n            onExitComplete && onExitComplete();\n        },\n        register: (childId) => {\n            presenceChildren.set(childId, false);\n            return () => presenceChildren.delete(childId);\n        },\n    }), \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout ? undefined : [isPresent]);\n    React.useMemo(() => {\n        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React__namespace.useEffect(() => {\n        !isPresent &&\n            !presenceChildren.size &&\n            onExitComplete &&\n            onExitComplete();\n    }, [isPresent]);\n    if (mode === \"popLayout\") {\n        children = React__namespace.createElement(PopChild, { isPresent: isPresent }, children);\n    }\n    return (React__namespace.createElement(PresenceContext.Provider, { value: context }, children));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nconst getChildKey = (child) => child.key || \"\";\nfunction updateChildLookup(children, allChildren) {\n    children.forEach((child) => {\n        const key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    React.Children.forEach(children, (child) => {\n        if (React.isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = \"sync\", }) => {\n    // Support deprecated exitBeforeEnter prop\n    if (exitBeforeEnter) {\n        mode = \"wait\";\n        warnOnce(false, \"Replace exitBeforeEnter with mode='wait'\");\n    }\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    let [forceRender] = useForceUpdate();\n    const forceRenderLayoutGroup = React.useContext(LayoutGroupContext).forceRender;\n    if (forceRenderLayoutGroup)\n        forceRender = forceRenderLayoutGroup;\n    const isMounted = useIsMounted();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    const filteredChildren = onlyElements(children);\n    let childrenToRender = filteredChildren;\n    const exiting = new Set();\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    const presentChildren = React.useRef(childrenToRender);\n    // A lookup table to quickly reference components by key\n    const allChildren = React.useRef(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    const isInitialRender = React.useRef(true);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    useUnmountEffect(() => {\n        isInitialRender.current = true;\n        allChildren.clear();\n        exiting.clear();\n    });\n    if (isInitialRender.current) {\n        return (React__namespace.createElement(React__namespace.Fragment, null, childrenToRender.map((child) => (React__namespace.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child)))));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = [...childrenToRender];\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    const presentKeys = presentChildren.current.map(getChildKey);\n    const targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    const numPresent = presentKeys.length;\n    for (let i = 0; i < numPresent; i++) {\n        const key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (mode === \"wait\" && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach((key) => {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        const child = allChildren.get(key);\n        if (!child)\n            return;\n        const insertionIndex = presentKeys.indexOf(key);\n        const onExit = () => {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            const removeIndex = presentChildren.current.findIndex((presentChild) => presentChild.key === key);\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                if (isMounted.current === false)\n                    return;\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, React__namespace.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map((child) => {\n        const key = child.key;\n        return exiting.has(key) ? (child) : (React__namespace.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n    });\n    if (env !== \"production\" &&\n        mode === \"wait\" &&\n        childrenToRender.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    return (React__namespace.createElement(React__namespace.Fragment, null, exiting.size\n        ? childrenToRender\n        : childrenToRender.map((child) => React.cloneElement(child))));\n};\n\n/**\n * @deprecated\n */\nconst DeprecatedLayoutGroupContext = React.createContext(null);\n\nconst notify = (node) => !node.isLayoutDirty && node.willUpdate(false);\nfunction nodeGroup() {\n    const nodes = new Set();\n    const subscriptions = new WeakMap();\n    const dirtyAll = () => nodes.forEach(notify);\n    return {\n        add: (node) => {\n            nodes.add(node);\n            subscriptions.set(node, node.addEventListener(\"willUpdate\", dirtyAll));\n        },\n        remove: (node) => {\n            var _a;\n            nodes.delete(node);\n            (_a = subscriptions.get(node)) === null || _a === void 0 ? void 0 : _a();\n            subscriptions.delete(node);\n            dirtyAll();\n        },\n        dirty: dirtyAll,\n    };\n}\n\nconst shouldInheritGroup = (inherit) => inherit === true;\nconst shouldInheritId = (inherit) => shouldInheritGroup(inherit === true) || inherit === \"id\";\nconst LayoutGroup = ({ children, id, inheritId, inherit = true }) => {\n    // Maintain backwards-compatibility with inheritId until 7.0\n    if (inheritId !== undefined)\n        inherit = inheritId;\n    const layoutGroupContext = React.useContext(LayoutGroupContext);\n    const deprecatedLayoutGroupContext = React.useContext(DeprecatedLayoutGroupContext);\n    const [forceRender, key] = useForceUpdate();\n    const context = React.useRef(null);\n    const upstreamId = layoutGroupContext.id || deprecatedLayoutGroupContext;\n    if (context.current === null) {\n        if (shouldInheritId(inherit) && upstreamId) {\n            id = id ? upstreamId + \"-\" + id : upstreamId;\n        }\n        context.current = {\n            id,\n            group: shouldInheritGroup(inherit)\n                ? layoutGroupContext.group || nodeGroup()\n                : nodeGroup(),\n        };\n    }\n    const memoizedContext = React.useMemo(() => ({ ...context.current, forceRender }), [key]);\n    return (React__namespace.createElement(LayoutGroupContext.Provider, { value: memoizedContext }, children));\n};\n\nlet id = 0;\nconst AnimateSharedLayout = ({ children, }) => {\n    React__namespace.useEffect(() => {\n        heyListen.warning(false, \"AnimateSharedLayout is deprecated: https://www.framer.com/docs/guide-upgrade/##shared-layout-animations\");\n    }, []);\n    return (React__namespace.createElement(LayoutGroup, { id: useConstant(() => `asl-${id++}`) }, children));\n};\n\n/**\n * `MotionConfig` is used to set configuration options for all children `motion` components.\n *\n * ```jsx\n * import { motion, MotionConfig } from \"framer-motion\"\n *\n * export function App() {\n *   return (\n *     <MotionConfig transition={{ type: \"spring\" }}>\n *       <motion.div animate={{ x: 100 }} />\n *     </MotionConfig>\n *   )\n * }\n * ```\n *\n * @public\n */\nfunction MotionConfig({ children, isValidProp, ...config }) {\n    isValidProp && loadExternalIsValidProp(isValidProp);\n    /**\n     * Inherit props from any parent MotionConfig components\n     */\n    config = { ...React.useContext(MotionConfigContext), ...config };\n    /**\n     * Don't allow isStatic to change between renders as it affects how many hooks\n     * motion components fire.\n     */\n    config.isStatic = useConstant(() => config.isStatic);\n    /**\n     * Creating a new config context object will re-render every `motion` component\n     * every time it renders. So we only want to create a new one sparingly.\n     */\n    const context = React.useMemo(() => config, [JSON.stringify(config.transition), config.transformPagePoint, config.reducedMotion]);\n    return (React__namespace.createElement(MotionConfigContext.Provider, { value: context }, children));\n}\n\n/**\n * Used in conjunction with the `m` component to reduce bundle size.\n *\n * `m` is a version of the `motion` component that only loads functionality\n * critical for the initial render.\n *\n * `LazyMotion` can then be used to either synchronously or asynchronously\n * load animation and gesture support.\n *\n * ```jsx\n * // Synchronous loading\n * import { LazyMotion, m, domAnimations } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={domAnimations}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n *\n * // Asynchronous loading\n * import { LazyMotion, m } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={() => import('./path/to/domAnimations')}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n * ```\n *\n * @public\n */\nfunction LazyMotion({ children, features, strict = false }) {\n    const [, setIsLoaded] = React.useState(!isLazyBundle(features));\n    const loadedRenderer = React.useRef(undefined);\n    /**\n     * If this is a synchronous load, load features immediately\n     */\n    if (!isLazyBundle(features)) {\n        const { renderer, ...loadedFeatures } = features;\n        loadedRenderer.current = renderer;\n        loadFeatures(loadedFeatures);\n    }\n    React.useEffect(() => {\n        if (isLazyBundle(features)) {\n            features().then(({ renderer, ...loadedFeatures }) => {\n                loadFeatures(loadedFeatures);\n                loadedRenderer.current = renderer;\n                setIsLoaded(true);\n            });\n        }\n    }, []);\n    return (React__namespace.createElement(LazyContext.Provider, { value: { renderer: loadedRenderer.current, strict } }, children));\n}\nfunction isLazyBundle(features) {\n    return typeof features === \"function\";\n}\n\nconst ReorderContext = React.createContext(null);\n\nfunction checkReorder(order, value, offset, velocity) {\n    if (!velocity)\n        return order;\n    const index = order.findIndex((item) => item.value === value);\n    if (index === -1)\n        return order;\n    const nextOffset = velocity > 0 ? 1 : -1;\n    const nextItem = order[index + nextOffset];\n    if (!nextItem)\n        return order;\n    const item = order[index];\n    const nextLayout = nextItem.layout;\n    const nextItemCenter = mix(nextLayout.min, nextLayout.max, 0.5);\n    if ((nextOffset === 1 && item.layout.max + offset > nextItemCenter) ||\n        (nextOffset === -1 && item.layout.min + offset < nextItemCenter)) {\n        return moveItem(order, index, index + nextOffset);\n    }\n    return order;\n}\n\nfunction ReorderGroup({ children, as = \"ul\", axis = \"y\", onReorder, values, ...props }, externalRef) {\n    const Component = useConstant(() => motion(as));\n    const order = [];\n    const isReordering = React.useRef(false);\n    heyListen.invariant(Boolean(values), \"Reorder.Group must be provided a values prop\");\n    const context = {\n        axis,\n        registerItem: (value, layout) => {\n            /**\n             * Ensure entries can't add themselves more than once\n             */\n            if (layout &&\n                order.findIndex((entry) => value === entry.value) === -1) {\n                order.push({ value, layout: layout[axis] });\n                order.sort(compareMin);\n            }\n        },\n        updateOrder: (id, offset, velocity) => {\n            if (isReordering.current)\n                return;\n            const newOrder = checkReorder(order, id, offset, velocity);\n            if (order !== newOrder) {\n                isReordering.current = true;\n                onReorder(newOrder\n                    .map(getValue)\n                    .filter((value) => values.indexOf(value) !== -1));\n            }\n        },\n    };\n    React.useEffect(() => {\n        isReordering.current = false;\n    });\n    return (React__namespace.createElement(Component, { ...props, ref: externalRef },\n        React__namespace.createElement(ReorderContext.Provider, { value: context }, children)));\n}\nconst Group = React.forwardRef(ReorderGroup);\nfunction getValue(item) {\n    return item.value;\n}\nfunction compareMin(a, b) {\n    return a.layout.min - b.layout.min;\n}\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n    const value = useConstant(() => motionValue(initial));\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */\n    const { isStatic } = React.useContext(MotionConfigContext);\n    if (isStatic) {\n        const [, setLatest] = React.useState(initial);\n        React.useEffect(() => value.onChange(setLatest), []);\n    }\n    return value;\n}\n\nconst isCustomValueType = (v) => {\n    return typeof v === \"object\" && v.mix;\n};\nconst getMixer = (v) => (isCustomValueType(v) ? v.mix : undefined);\nfunction transform(...args) {\n    const useImmediate = !Array.isArray(args[0]);\n    const argOffset = useImmediate ? 0 : -1;\n    const inputValue = args[0 + argOffset];\n    const inputRange = args[1 + argOffset];\n    const outputRange = args[2 + argOffset];\n    const options = args[3 + argOffset];\n    const interpolator = interpolate(inputRange, outputRange, {\n        mixer: getMixer(outputRange[0]),\n        ...options,\n    });\n    return useImmediate ? interpolator(inputValue) : interpolator;\n}\n\nfunction useOnChange(value, callback) {\n    useIsomorphicLayoutEffect(() => {\n        if (isMotionValue(value)) {\n            callback(value.get());\n            return value.onChange(callback);\n        }\n    }, [value, callback]);\n}\nfunction useMultiOnChange(values, handler, cleanup) {\n    useIsomorphicLayoutEffect(() => {\n        const subscriptions = values.map((value) => value.onChange(handler));\n        return () => {\n            subscriptions.forEach((unsubscribe) => unsubscribe());\n            cleanup();\n        };\n    });\n}\n\nfunction useCombineMotionValues(values, combineValues) {\n    /**\n     * Initialise the returned motion value. This remains the same between renders.\n     */\n    const value = useMotionValue(combineValues());\n    /**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */\n    const updateValue = () => value.set(combineValues());\n    /**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */\n    updateValue();\n    /**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */\n    useMultiOnChange(values, () => sync.update(updateValue, false, true), () => cancelSync.update(updateValue));\n    return value;\n}\n\nfunction useTransform(input, inputRangeOrTransformer, outputRange, options) {\n    const transformer = typeof inputRangeOrTransformer === \"function\"\n        ? inputRangeOrTransformer\n        : transform(inputRangeOrTransformer, outputRange, options);\n    return Array.isArray(input)\n        ? useListTransform(input, transformer)\n        : useListTransform([input], ([latest]) => transformer(latest));\n}\nfunction useListTransform(values, transformer) {\n    const latest = useConstant(() => []);\n    return useCombineMotionValues(values, () => {\n        latest.length = 0;\n        const numValues = values.length;\n        for (let i = 0; i < numValues; i++) {\n            latest[i] = values[i].get();\n        }\n        return transformer(latest);\n    });\n}\n\nfunction useDefaultMotionValue(value, defaultValue = 0) {\n    return isMotionValue(value) ? value : useMotionValue(defaultValue);\n}\nfunction ReorderItem({ children, style = {}, value, as = \"li\", onDrag, layout = true, ...props }, externalRef) {\n    const Component = useConstant(() => motion(as));\n    const context = React.useContext(ReorderContext);\n    const point = {\n        x: useDefaultMotionValue(style.x),\n        y: useDefaultMotionValue(style.y),\n    };\n    const zIndex = useTransform([point.x, point.y], ([latestX, latestY]) => latestX || latestY ? 1 : \"unset\");\n    const measuredLayout = React.useRef(null);\n    heyListen.invariant(Boolean(context), \"Reorder.Item must be a child of Reorder.Group\");\n    const { axis, registerItem, updateOrder } = context;\n    React.useEffect(() => {\n        registerItem(value, measuredLayout.current);\n    }, [context]);\n    return (React__namespace.createElement(Component, { drag: axis, ...props, dragSnapToOrigin: true, style: { ...style, x: point.x, y: point.y, zIndex }, layout: layout, onDrag: (event, gesturePoint) => {\n            const { velocity } = gesturePoint;\n            velocity[axis] &&\n                updateOrder(value, point[axis].get(), velocity[axis]);\n            onDrag && onDrag(event, gesturePoint);\n        }, onLayoutMeasure: (measured) => {\n            measuredLayout.current = measured;\n        }, ref: externalRef }, children));\n}\nconst Item = React.forwardRef(ReorderItem);\n\nconst Reorder = {\n    Group,\n    Item,\n};\n\n/**\n * @public\n */\nconst domAnimation = {\n    renderer: createDomVisualElement,\n    ...animations,\n    ...gestureAnimations,\n};\n\n/**\n * @public\n */\nconst domMax = {\n    ...domAnimation,\n    ...drag,\n    ...layoutFeatures,\n    projectionNodeConstructor: HTMLProjectionNode,\n};\n\n/**\n * Combine multiple motion values into a new one using a string template literal.\n *\n * ```jsx\n * import {\n *   motion,\n *   useSpring,\n *   useMotionValue,\n *   useMotionTemplate\n * } from \"framer-motion\"\n *\n * function Component() {\n *   const shadowX = useSpring(0)\n *   const shadowY = useMotionValue(0)\n *   const shadow = useMotionTemplate`drop-shadow(${shadowX}px ${shadowY}px 20px rgba(0,0,0,0.3))`\n *\n *   return <motion.div style={{ filter: shadow }} />\n * }\n * ```\n *\n * @public\n */\nfunction useMotionTemplate(fragments, ...values) {\n    /**\n     * Create a function that will build a string from the latest motion values.\n     */\n    const numFragments = fragments.length;\n    function buildValue() {\n        let output = ``;\n        for (let i = 0; i < numFragments; i++) {\n            output += fragments[i];\n            const value = values[i];\n            if (value)\n                output += values[i].get();\n        }\n        return output;\n    }\n    return useCombineMotionValues(values, buildValue);\n}\n\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction useSpring(source, config = {}) {\n    const { isStatic } = React.useContext(MotionConfigContext);\n    const activeSpringAnimation = React.useRef(null);\n    const value = useMotionValue(isMotionValue(source) ? source.get() : source);\n    React.useMemo(() => {\n        return value.attach((v, set) => {\n            /**\n             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n             * at that level, but this will work for now\n             */\n            if (isStatic)\n                return set(v);\n            if (activeSpringAnimation.current) {\n                activeSpringAnimation.current.stop();\n            }\n            activeSpringAnimation.current = animate$1({\n                from: value.get(),\n                to: v,\n                velocity: value.getVelocity(),\n                type: \"spring\",\n                ...config,\n                onUpdate: set,\n            });\n            return value.get();\n        });\n    }, [JSON.stringify(config)]);\n    useOnChange(source, (v) => value.set(parseFloat(v)));\n    return value;\n}\n\n/**\n * Creates a `MotionValue` that updates when the velocity of the provided `MotionValue` changes.\n *\n * ```javascript\n * const x = useMotionValue(0)\n * const xVelocity = useVelocity(x)\n * const xAcceleration = useVelocity(xVelocity)\n * ```\n *\n * @public\n */\nfunction useVelocity(value) {\n    const velocity = useMotionValue(value.getVelocity());\n    React.useEffect(() => {\n        return value.velocityUpdateSubscribers.add((newVelocity) => {\n            velocity.set(newVelocity);\n        });\n    }, [value]);\n    return velocity;\n}\n\nconst createScrollMotionValues = () => ({\n    scrollX: motionValue(0),\n    scrollY: motionValue(0),\n    scrollXProgress: motionValue(0),\n    scrollYProgress: motionValue(0),\n});\nfunction useScroll({ container, target, layoutEffect = true, ...options } = {}) {\n    const values = useConstant(createScrollMotionValues);\n    const useLifecycleEffect = layoutEffect\n        ? useIsomorphicLayoutEffect\n        : React.useEffect;\n    useLifecycleEffect(() => {\n        return dom.scroll(({ x, y }) => {\n            values.scrollX.set(x.current);\n            values.scrollXProgress.set(x.progress);\n            values.scrollY.set(y.current);\n            values.scrollYProgress.set(y.progress);\n        }, {\n            ...options,\n            container: (container === null || container === void 0 ? void 0 : container.current) || undefined,\n            target: (target === null || target === void 0 ? void 0 : target.current) || undefined,\n        });\n    }, []);\n    return values;\n}\n\n/**\n * @deprecated useElementScroll is deprecated. Convert to useScroll({ container: ref })\n */\nfunction useElementScroll(ref) {\n    warnOnce(false, \"useElementScroll is deprecated. Convert to useScroll({ container: ref }).\");\n    return useScroll({ container: ref });\n}\n\n/**\n * @deprecated useViewportScroll is deprecated. Convert to useScroll()\n */\nfunction useViewportScroll() {\n    warnOnce(false, \"useViewportScroll is deprecated. Convert to useScroll().\");\n    return useScroll();\n}\n\nfunction useAnimationFrame(callback) {\n    const initialTimestamp = React.useRef(0);\n    const { isStatic } = React.useContext(MotionConfigContext);\n    React.useEffect(() => {\n        if (isStatic)\n            return;\n        const provideTimeSinceStart = ({ timestamp, delta }) => {\n            if (!initialTimestamp.current)\n                initialTimestamp.current = timestamp;\n            callback(timestamp - initialTimestamp.current, delta);\n        };\n        sync.update(provideTimeSinceStart, true);\n        return () => cancelSync.update(provideTimeSinceStart);\n    }, [callback]);\n}\n\nfunction useTime() {\n    const time = useMotionValue(0);\n    useAnimationFrame((t) => time.set(t));\n    return time;\n}\n\nclass WillChangeMotionValue extends MotionValue {\n    constructor() {\n        super(...arguments);\n        this.members = [];\n        this.transforms = new Set();\n    }\n    add(name) {\n        let memberName;\n        if (transformProps.has(name)) {\n            this.transforms.add(name);\n            memberName = \"transform\";\n        }\n        else if (!name.startsWith(\"origin\") &&\n            !isCSSVariable$1(name) &&\n            name !== \"willChange\") {\n            memberName = camelToDash(name);\n        }\n        if (memberName) {\n            addUniqueItem(this.members, memberName);\n            this.update();\n        }\n    }\n    remove(name) {\n        if (transformProps.has(name)) {\n            this.transforms.delete(name);\n            if (!this.transforms.size) {\n                removeItem(this.members, \"transform\");\n            }\n        }\n        else {\n            removeItem(this.members, camelToDash(name));\n        }\n        this.update();\n    }\n    update() {\n        this.set(this.members.length ? this.members.join(\", \") : \"auto\");\n    }\n}\nfunction useWillChange() {\n    return useConstant(() => new WillChangeMotionValue(\"auto\"));\n}\n\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */\nfunction useReducedMotion() {\n    /**\n     * Lazy initialisation of prefersReducedMotion\n     */\n    !hasReducedMotionListener.current && initPrefersReducedMotion();\n    const [shouldReduceMotion] = React.useState(prefersReducedMotion.current);\n    /**\n     * TODO See if people miss automatically updating shouldReduceMotion setting\n     */\n    return shouldReduceMotion;\n}\n\nfunction useReducedMotionConfig() {\n    const reducedMotionPreference = useReducedMotion();\n    const { reducedMotion } = React.useContext(MotionConfigContext);\n    if (reducedMotion === \"never\") {\n        return false;\n    }\n    else if (reducedMotion === \"always\") {\n        return true;\n    }\n    else {\n        return reducedMotionPreference;\n    }\n}\n\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    let hasMounted = false;\n    /**\n     * Pending animations that are started before a component is mounted.\n     * TODO: Remove this as animations should only run in effects\n     */\n    const pendingAnimations = [];\n    /**\n     * A collection of linked component animation controls.\n     */\n    const subscribers = new Set();\n    const controls = {\n        subscribe(visualElement) {\n            subscribers.add(visualElement);\n            return () => void subscribers.delete(visualElement);\n        },\n        start(definition, transitionOverride) {\n            /**\n             * TODO: We only perform this hasMounted check because in Framer we used to\n             * encourage the ability to start an animation within the render phase. This\n             * isn't behaviour concurrent-safe so when we make Framer concurrent-safe\n             * we can ditch this.\n             */\n            if (hasMounted) {\n                const animations = [];\n                subscribers.forEach((visualElement) => {\n                    animations.push(animateVisualElement(visualElement, definition, {\n                        transitionOverride,\n                    }));\n                });\n                return Promise.all(animations);\n            }\n            else {\n                return new Promise((resolve) => {\n                    pendingAnimations.push({\n                        animation: [definition, transitionOverride],\n                        resolve,\n                    });\n                });\n            }\n        },\n        set(definition) {\n            heyListen.invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach((visualElement) => {\n                setValues(visualElement, definition);\n            });\n        },\n        stop() {\n            subscribers.forEach((visualElement) => {\n                stopAnimation(visualElement);\n            });\n        },\n        mount() {\n            hasMounted = true;\n            pendingAnimations.forEach(({ animation, resolve }) => {\n                controls.start(...animation).then(resolve);\n            });\n            return () => {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimationControls() {\n    const controls = useConstant(animationControls);\n    React.useEffect(controls.mount, []);\n    return controls;\n}\nconst useAnimation = useAnimationControls;\n\nconst wrap = (min, max, v) => {\n    const rangeSize = max - min;\n    return ((((v - min) % rangeSize) + rangeSize) % rangeSize) + min;\n};\n\n/**\n * Cycles through a series of visual properties. Can be used to toggle between or cycle through animations. It works similar to `useState` in React. It is provided an initial array of possible states, and returns an array of two arguments.\n *\n * An index value can be passed to the returned `cycle` function to cycle to a specific index.\n *\n * ```jsx\n * import * as React from \"react\"\n * import { motion, useCycle } from \"framer-motion\"\n *\n * export const MyComponent = () => {\n *   const [x, cycleX] = useCycle(0, 50, 100)\n *\n *   return (\n *     <motion.div\n *       animate={{ x: x }}\n *       onTap={() => cycleX()}\n *      />\n *    )\n * }\n * ```\n *\n * @param items - items to cycle through\n * @returns [currentState, cycleState]\n *\n * @public\n */\nfunction useCycle(...items) {\n    const index = React.useRef(0);\n    const [item, setItem] = React.useState(items[index.current]);\n    const runCycle = React.useCallback((next) => {\n        index.current =\n            typeof next !== \"number\"\n                ? wrap(0, items.length, index.current + 1)\n                : next;\n        setItem(items[index.current]);\n    }, \n    // The array will change on each call, but by putting items.length at\n    // the front of this array, we guarantee the dependency comparison will match up\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [items.length, ...items]);\n    return [item, runCycle];\n}\n\nfunction useInView(ref, { root, margin, amount, once = false } = {}) {\n    const [isInView, setInView] = React.useState(false);\n    React.useEffect(() => {\n        if (!ref.current || (once && isInView))\n            return;\n        const onEnter = () => {\n            setInView(true);\n            return once ? undefined : () => setInView(false);\n        };\n        const options = {\n            root: (root && root.current) || undefined,\n            margin,\n            amount: amount === \"some\" ? \"any\" : amount,\n        };\n        return dom.inView(ref.current, onEnter, options);\n    }, [root, ref, margin, once]);\n    return isInView;\n}\n\n/**\n * Can manually trigger a drag gesture on one or more `drag`-enabled `motion` components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */\nclass DragControls {\n    constructor() {\n        this.componentControls = new Set();\n    }\n    /**\n     * Subscribe a component's internal `VisualElementDragControls` to the user-facing API.\n     *\n     * @internal\n     */\n    subscribe(controls) {\n        this.componentControls.add(controls);\n        return () => this.componentControls.delete(controls);\n    }\n    /**\n     * Start a drag gesture on every `motion` component that has this set of drag controls\n     * passed into it via the `dragControls` prop.\n     *\n     * ```jsx\n     * dragControls.start(e, {\n     *   snapToCursor: true\n     * })\n     * ```\n     *\n     * @param event - PointerEvent\n     * @param options - Options\n     *\n     * @public\n     */\n    start(event, options) {\n        this.componentControls.forEach((controls) => {\n            controls.start(event.nativeEvent || event, options);\n        });\n    }\n}\nconst createDragControls = () => new DragControls();\n/**\n * Usually, dragging is initiated by pressing down on a `motion` component with a `drag` prop\n * and moving it. For some use-cases, for instance clicking at an arbitrary point on a video scrubber, we\n * might want to initiate that dragging from a different component than the draggable one.\n *\n * By creating a `dragControls` using the `useDragControls` hook, we can pass this into\n * the draggable component's `dragControls` prop. It exposes a `start` method\n * that can start dragging from pointer events on other components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */\nfunction useDragControls() {\n    return useConstant(createDragControls);\n}\n\n/**\n * Checks if a component is a `motion` component.\n */\nfunction isMotionComponent(component) {\n    return (component !== null &&\n        typeof component === \"object\" &&\n        motionComponentSymbol in component);\n}\n\n/**\n * Unwraps a `motion` component and returns either a string for `motion.div` or\n * the React component for `motion(Component)`.\n *\n * If the component is not a `motion` component it returns undefined.\n */\nfunction unwrapMotionComponent(component) {\n    if (isMotionComponent(component)) {\n        return component[motionComponentSymbol];\n    }\n    return undefined;\n}\n\nfunction useInstantLayoutTransition() {\n    return startTransition;\n}\nfunction startTransition(callback) {\n    if (!rootProjectionNode.current)\n        return;\n    rootProjectionNode.current.isUpdating = false;\n    rootProjectionNode.current.blockUpdate();\n    callback && callback();\n}\n\nfunction useInstantTransition() {\n    const [forceUpdate, forcedRenderCount] = useForceUpdate();\n    const startInstantLayoutTransition = useInstantLayoutTransition();\n    React.useEffect(() => {\n        /**\n         * Unblock after two animation frames, otherwise this will unblock too soon.\n         */\n        sync.postRender(() => sync.postRender(() => (instantAnimationState.current = false)));\n    }, [forcedRenderCount]);\n    return (callback) => {\n        startInstantLayoutTransition(() => {\n            instantAnimationState.current = true;\n            forceUpdate();\n            callback();\n        });\n    };\n}\n\nfunction useResetProjection() {\n    const reset = React__namespace.useCallback(() => {\n        const root = rootProjectionNode.current;\n        if (!root)\n            return;\n        root.resetTree();\n    }, []);\n    return reset;\n}\n\nconst featureTests = {\n    waapi: () => Object.hasOwnProperty.call(Element.prototype, \"animate\"),\n};\nconst results = {};\nconst supports = {};\n/**\n * Generate features tests that cache their results.\n */\nfor (const key in featureTests) {\n    supports[key] = () => {\n        if (results[key] === undefined)\n            results[key] = featureTests[key]();\n        return results[key];\n    };\n}\n\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\n\nfunction animateStyle(element, valueName, keyframes, { delay, duration, ease }) {\n    if (!supports.waapi())\n        return undefined;\n    const animation = element.animate({ [valueName]: keyframes }, {\n        delay,\n        duration,\n        easing: Array.isArray(ease) ? cubicBezierAsString(ease) : ease,\n        fill: \"both\",\n    });\n    return animation;\n}\n\nfunction startOptimizedAppearAnimation(element, name, keyframes, options) {\n    window.MotionAppearAnimations || (window.MotionAppearAnimations = new Map());\n    const id = element.dataset[optimizedAppearDataId];\n    const animation = animateStyle(element, name, keyframes, options);\n    if (id && animation) {\n        window.MotionAppearAnimations.set(appearStoreId(id, name), animation);\n    }\n    return animation;\n}\n\nconst createObject = () => ({});\nclass StateVisualElement extends VisualElement {\n    build() { }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    resetTransform() { }\n    restoreTransform() { }\n    removeValueFromRenderState() { }\n    renderInstance() { }\n    scrapeMotionValuesFromProps() {\n        return createObject();\n    }\n    getBaseTargetFromProps() {\n        return undefined;\n    }\n    readValueFromInstance(_state, key, options) {\n        return options.initialState[key] || 0;\n    }\n    sortInstanceNodePosition() {\n        return 0;\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }) {\n        const origin = getOrigin(target, transition || {}, this);\n        checkTargetForNewValues(this, target, origin);\n        return { transition, transitionEnd, ...target };\n    }\n}\nconst useVisualState = makeUseVisualState({\n    scrapeMotionValuesFromProps: createObject,\n    createRenderState: createObject,\n});\n/**\n * This is not an officially supported API and may be removed\n * on any version.\n */\nfunction useAnimatedState(initialState) {\n    const [animationState, setAnimationState] = React.useState(initialState);\n    const visualState = useVisualState({}, false);\n    const element = useConstant(() => {\n        return new StateVisualElement({ props: {}, visualState }, { initialState });\n    });\n    React.useEffect(() => {\n        element.mount({});\n        return () => element.unmount();\n    }, [element]);\n    React.useEffect(() => {\n        element.setProps({\n            onUpdate: (v) => {\n                setAnimationState({ ...v });\n            },\n        });\n    }, [setAnimationState, element]);\n    const startAnimation = useConstant(() => (animationDefinition) => {\n        return animateVisualElement(element, animationDefinition);\n    });\n    return [animationState, startAnimation];\n}\n\n// Keep things reasonable and avoid scale: Infinity. In practise we might need\n// to add another value, opacity, that could interpolate scaleX/Y [0,0.01] => [0,1]\n// to simply hide content at unreasonable scales.\nconst maxScale = 100000;\nconst invertScale = (scale) => scale > 0.001 ? 1 / scale : maxScale;\nlet hasWarned = false;\n/**\n * Returns a `MotionValue` each for `scaleX` and `scaleY` that update with the inverse\n * of their respective parent scales.\n *\n * This is useful for undoing the distortion of content when scaling a parent component.\n *\n * By default, `useInvertedScale` will automatically fetch `scaleX` and `scaleY` from the nearest parent.\n * By passing other `MotionValue`s in as `useInvertedScale({ scaleX, scaleY })`, it will invert the output\n * of those instead.\n *\n * ```jsx\n * const MyComponent = () => {\n *   const { scaleX, scaleY } = useInvertedScale()\n *   return <motion.div style={{ scaleX, scaleY }} />\n * }\n * ```\n *\n * @deprecated\n */\nfunction useInvertedScale(scale) {\n    let parentScaleX = useMotionValue(1);\n    let parentScaleY = useMotionValue(1);\n    const visualElement = useVisualElementContext();\n    heyListen.invariant(!!(scale || visualElement), \"If no scale values are provided, useInvertedScale must be used within a child of another motion component.\");\n    heyListen.warning(hasWarned, \"useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.\");\n    hasWarned = true;\n    if (scale) {\n        parentScaleX = scale.scaleX || parentScaleX;\n        parentScaleY = scale.scaleY || parentScaleY;\n    }\n    else if (visualElement) {\n        parentScaleX = visualElement.getValue(\"scaleX\", 1);\n        parentScaleY = visualElement.getValue(\"scaleY\", 1);\n    }\n    const scaleX = useTransform(parentScaleX, invertScale);\n    const scaleY = useTransform(parentScaleY, invertScale);\n    return { scaleX, scaleY };\n}\n\nexports.AnimatePresence = AnimatePresence;\nexports.AnimateSharedLayout = AnimateSharedLayout;\nexports.DeprecatedLayoutGroupContext = DeprecatedLayoutGroupContext;\nexports.DragControls = DragControls;\nexports.FlatTree = FlatTree;\nexports.LayoutGroup = LayoutGroup;\nexports.LayoutGroupContext = LayoutGroupContext;\nexports.LazyMotion = LazyMotion;\nexports.MotionConfig = MotionConfig;\nexports.MotionConfigContext = MotionConfigContext;\nexports.MotionContext = MotionContext;\nexports.MotionValue = MotionValue;\nexports.PresenceContext = PresenceContext;\nexports.Reorder = Reorder;\nexports.SwitchLayoutGroupContext = SwitchLayoutGroupContext;\nexports.VisualElement = VisualElement;\nexports.addPointerEvent = addPointerEvent;\nexports.addScaleCorrector = addScaleCorrector;\nexports.animate = animate;\nexports.animateVisualElement = animateVisualElement;\nexports.animationControls = animationControls;\nexports.animations = animations;\nexports.buildTransform = buildTransform;\nexports.calcLength = calcLength;\nexports.checkTargetForNewValues = checkTargetForNewValues;\nexports.clamp = clamp;\nexports.createBox = createBox;\nexports.createDomMotionComponent = createDomMotionComponent;\nexports.createMotionComponent = createMotionComponent;\nexports.delay = delay;\nexports.distance = distance;\nexports.distance2D = distance2D;\nexports.domAnimation = domAnimation;\nexports.domMax = domMax;\nexports.filterProps = filterProps;\nexports.isBrowser = isBrowser;\nexports.isDragActive = isDragActive;\nexports.isMotionComponent = isMotionComponent;\nexports.isMotionValue = isMotionValue;\nexports.isValidMotionProp = isValidMotionProp;\nexports.m = m;\nexports.makeUseVisualState = makeUseVisualState;\nexports.mix = mix;\nexports.motion = motion;\nexports.motionValue = motionValue;\nexports.optimizedAppearDataAttribute = optimizedAppearDataAttribute;\nexports.pipe = pipe;\nexports.resolveMotionValue = resolveMotionValue;\nexports.spring = spring;\nexports.startOptimizedAppearAnimation = startOptimizedAppearAnimation;\nexports.transform = transform;\nexports.unwrapMotionComponent = unwrapMotionComponent;\nexports.useAnimation = useAnimation;\nexports.useAnimationControls = useAnimationControls;\nexports.useAnimationFrame = useAnimationFrame;\nexports.useCycle = useCycle;\nexports.useDeprecatedAnimatedState = useAnimatedState;\nexports.useDeprecatedInvertedScale = useInvertedScale;\nexports.useDomEvent = useDomEvent;\nexports.useDragControls = useDragControls;\nexports.useElementScroll = useElementScroll;\nexports.useForceUpdate = useForceUpdate;\nexports.useInView = useInView;\nexports.useInstantLayoutTransition = useInstantLayoutTransition;\nexports.useInstantTransition = useInstantTransition;\nexports.useIsPresent = useIsPresent;\nexports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;\nexports.useMotionTemplate = useMotionTemplate;\nexports.useMotionValue = useMotionValue;\nexports.usePresence = usePresence;\nexports.useReducedMotion = useReducedMotion;\nexports.useReducedMotionConfig = useReducedMotionConfig;\nexports.useResetProjection = useResetProjection;\nexports.useScroll = useScroll;\nexports.useSpring = useSpring;\nexports.useTime = useTime;\nexports.useTransform = useTransform;\nexports.useUnmountEffect = useUnmountEffect;\nexports.useVelocity = useVelocity;\nexports.useViewportScroll = useViewportScroll;\nexports.useVisualElementContext = useVisualElementContext;\nexports.useWillChange = useWillChange;\nexports.wrap = wrap;\nexports.wrapHandler = wrapHandler;\n"],"names":["AnimationType","BoundingBoxDimension","Object","defineProperty","exports","value","React","__webpack_require__","heyListen","dom","React__default","e","React__namespace","_interopNamespace","__esModule","n","create","keys","forEach","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","MotionConfigContext","createContext","transformPagePoint","p","isStatic","reducedMotion","MotionContext","useVisualElementContext","useContext","visualElement","PresenceContext","isBrowser","document","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","LazyContext","strict","isRefObject","ref","prototype","hasOwnProperty","call","isVariantLabel","v","Array","isArray","isAnimationControls","start","variantProps$1","isControllingVariants","props","animate","some","name","isVariantNode","Boolean","variants","variantLabelsAsDependency","prop","join","createDefinition","isEnabled","propNames","featureDefinitions","measureLayout","animation","exit","drag","focus","hover","tap","pan","inView","loadFeatures","features","key","projectionNodeConstructor","Component","useConstant","init","useRef","current","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","id$2","LayoutGroupContext","VisualElementHandler","getSnapshotBeforeUpdate","setProps","componentDidUpdate","render","children","SwitchLayoutGroupContext","motionComponentSymbol","Symbol","for","createMotionComponent","preloadedFeatures","createVisualElement","useRender","useVisualState","ForwardRefComponent","forwardRef","externalRef","configAndProps","layoutId","useLayoutId","layoutGroupId","id","undefined","context","useCreateMotionContext","initial","getCurrentTreeVariants","inherit","useMemo","projectionId","visualState","useVisualElement","parent","lazyContext","presenceContext","reducedMotionConfig","visualElementRef","renderer","presenceId","blockInitialAnimation","animationState","animateChanges","notify","lazyStrictMode","initialLayoutGroupConfig","createElement","Provider","useCallback","instance","mount","unmount","createMotionProxy","createConfig","custom","customMotionComponentConfig","Proxy","componentCache","Map","_target","has","set","lowercaseSVGElements","isSVGComponent","includes","indexOf","test","scaleCorrectors","addScaleCorrector","correctors","assign","transformPropOrder","transformProps","Set","isForcedMotionValue","layout","startsWith","isMotionValue","getVelocity","translateAlias","x","y","z","transformPerspective","sortTransformProps","a","b","buildTransform","transform","transformKeys","enableHardwareAcceleration","allowTransformNone","transformIsDefault","transformTemplate","transformString","sort","trim","isCSSVariable$1","getValueAsType","type","clamp","min","max","Math","number","parse","parseFloat","alpha","scale","default","sanitize","round","floatRegex","colorRegex","singleColorRegex","isString","createUnitType","endsWith","unit","split","length","degrees","percent","px","vh","vw","progressPercentage","int","numberValueTypes","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderRadius","radius","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","width","maxWidth","height","maxHeight","size","top","right","bottom","left","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","rotate","rotateX","rotateY","rotateZ","scaleX","scaleY","scaleZ","skew","skewX","skewY","distance","translateX","translateY","translateZ","perspective","opacity","originX","originY","originZ","zIndex","fillOpacity","strokeOpacity","numOctaves","buildHTMLStyles","state","latestValues","options","style","vars","transformOrigin","hasTransform","hasTransformOrigin","transformIsNone","valueType","valueAsType","push","createHtmlRenderState","copyRawValuesOnly","target","source","useHTMLProps","htmlProps","useStyle","styleProp","useInitialMotionValues","transformValues","dragListener","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","validMotionProps","isValidMotionProp","shouldForward","loadExternalIsValidProp","isValidProp","Z","_a","filterProps","isDom","forwardMotionProps","filteredProps","calcOrigin$1","origin","offset","dashKeys","array","camelKeys","buildSVGAttrs","attrX","attrY","pathLength","pathSpacing","pathOffset","latest","isSVGTag","viewBox","attrs","dimensions","calcSVGTransformOrigin","pxOriginX","pxOriginY","buildSVGPath","spacing","useDashCase","createSvgRenderState","tag","toLowerCase","useSVGProps","_isStatic","visualProps","rawStyles","camelToDash","str","replace","renderHTML","element","projection","getProjectionStyles","setProperty","camelCaseAttributes","renderSVG","renderState","_styleProp","setAttribute","scrapeMotionValuesFromProps$1","newValues","scrapeMotionValuesFromProps","targetKey","toUpperCase","resolveVariantFromProps","definition","currentValues","currentVelocity","isKeyframesTarget","isCustomValue","mix","toValue","resolveFinalValueInKeyframes","resolveMotionValue","unwrappedValue","makeUseVisualState","make","makeState","createRenderState","onMount","makeLatestValues","scrapeMotionValues","values","motionValues","isControllingVariants$1","isVariantNode$1","isInitialAnimationBlocked","variantToSet","list","resolved","transitionEnd","transition","valueTarget","index","config","svgMotionConfig","getBBox","getBoundingClientRect","tagName","htmlMotionConfig","createDomMotionConfig","baseConfig","createUseRender","useVisualProps","elementProps","addDomEvent","eventName","handler","passive","addEventListener","removeEventListener","useDomEvent","isMouseEvent","event","PointerEvent","pointerType","MouseEvent","isTouchEvent","hasTouches","touches","defaultPagePoint","pageX","pageY","extractEventInfo","pointType","point","pointFromTouch","primaryTouch","changedTouches","pointFromMouse","wrapHandler","shouldFilterPrimaryPointer","listener","isPrimaryPointer","button","eventHandler","supportsPointerEvents","window","onpointerdown","supportsTouchEvents","ontouchstart","supportsMouseEvents","onmousedown","mouseEventNames","pointerdown","pointermove","pointerup","pointercancel","pointerover","pointerout","pointerenter","pointerleave","touchEventNames","getPointerEventName","addPointerEvent","usePointerEvent","createLock","lock","globalHorizontalLock","globalVerticalLock","getGlobalLock","openHorizontal","openVertical","isDragActive","openGestureLock","createHoverEvent","isActive","callback","info","setActive","Hover","isNodeOrChild","child","parentElement","useUnmountEffect","combineFunctions","pipe","transformers","reduce","env","process","warned","warnOnce","condition","message","console","warn","add","observerCallbacks","WeakMap","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","thresholdNames","all","useIntersectionObserver","shouldObserve","root","rootMargin","amount","once","threshold","observeIntersection","rootInteresectionObserver","initIntersectionObserver","lookupRoot","rootObservers","JSON","stringify","IntersectionObserver","observe","delete","unobserve","isIntersecting","isInView","hasEnteredView","InView","getProps","onViewportEnter","onViewportLeave","useMissingIntersectionObserver","fallback","requestAnimationFrame","makeRenderlessComponent","hook","gestureAnimations","whileInView","viewport","useObserver","onTap","onTapStart","onTapCancel","whileTap","hasPressListeners","isPressing","cancelPointerEndListeners","eventOptions","onPointerDown","removePointerEndListener","checkPointerEnd","Tap","onPointerUp","onPointerCancel","whileFocus","Focus","onHoverStart","onHoverEnd","whileHover","usePresence","isPresent","onExitComplete","register","useId","shallowCompare","next","prev","prevLength","i","secondsToMilliseconds","seconds","noop","any","calcBezier","t","a1","a2","mirrorEasing","easing","reverseEasing","easeIn","easeOut","easeInOut","circIn","sin","acos","circOut","circInOut","createBackIn","power","backIn","backOut","backInOut","anticipate","createAnticipate","backEasing","pow","easingLookup","linear","easingDefinitionToFunction","invariant","x1","y1","x2","y2","cubicBezier","mX1","mY1","mX2","mY2","getTForX","binarySubdivide","lowerBound","upperBound","currentX","currentT","abs","aX","isEasingArray","ease","isColorString","testProp","splitColor","aName","bName","cName","c","match","clampRgbUnit","rgbUnit","rgba","red","green","blue","alpha$1","hex","r","g","substring","parseInt","hsla","hue","saturation","lightness","color","colorToken","numberToken","analyseComplexValue","numColors","numNumbers","colors","map","numbers","tokenised","createTransformer","numValues","output","convertNumbersToZero","complex","_b","isNaN","getAnimatableNone","parsed","transformer","isAnimatable","underDampedSpring","stiffness","damping","restSpeed","criticallyDampedSpring","to","sqrt","linearTween","duration","keyframes$1","defaultTransitions","backgroundColor","getDefaultTransition","valueKey","transitionFactory","maxDefaults","applyDefaultFilter","slice","defaultValue","functionRegex","filter","functions","defaultValueTypes","outlineColor","fill","stroke","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","WebkitFilter","getDefaultValueType","defaultValueType","instantAnimationState","from","progress","hueToRgb","q","mixLinearColor","fromExpo","colorTypes","getColorType","find","asRGBA","model","hslaToRgba","mixColor","fromRGBA","toRGBA","blended","getMixer$1","mixComplex","mixArray","blendValue","fromThis","mixObject","template","originStats","targetStats","canInterpolate","warning","toFromDifference","mixNumber","interpolate","input","isClamp","mixer","inputLength","reverse","mixers","createMixers","customMixer","mixerFactory","detectMixerFactory","numMixers","easingFunction","interpolator","progressInRange","calcAngularFreq","undampedFreq","dampingRatio","velocityPerSecond","velocity","frameDuration","durationKeys","physicsKeys","isSpringType","spring","restDelta","done","mass","isResolvedFromDuration","getSpringOptions","springOptions","derived","findSpring","bounce","envelope","derivative","maxDuration","exponentialDecay","delta","safeMin","exp","factor","f","initialGuess","approximateRoot","result","resolveSpring","zero","initialVelocity","createSpring","initialDelta","undampedAngularFreq","angularFreq","cos","dampedAngularFreq","freqForT","sinh","cosh","prevT","isBelowVelocityThreshold","isBelowDisplacementThreshold","flipTarget","needsInterpolation","defaultTimestep","getCurrentTime","performance","now","Date","onNextFrame","setTimeout","frameData","timestamp","useDefaultElapsed","runNextFrame","isProcessing","stepsOrder","steps","acc","createRenderStep","toRun","toRunNextFrame","numToRun","flushNextFrame","toKeepAlive","WeakSet","step","schedule","keepAlive","immediate","addToCurrentFrame","buffer","cancel","splice","sync","startLoop","cancelSync","flushSync","processStep","stepId","processFrame","types","decay","timeConstant","modifyTarget","amplitude","ideal","keyframes","times","defaultOffset","_value","o","createInterpolator","loopElapsed","elapsed","delay","framesync","passTimestamp","update","stop","animate$1","autoplay","driver","repeat","repeatMax","repeatType","repeatDelay","onPlay","onStop","onComplete","onRepeat","onUpdate","driverControls","interpolateFromNumber","repeatCount","computedDuration","isComplete","isForwardPlayback","animator","hasRepeatDelayElapsed","reverseElapsed","timeout","checkElapsed","read","isZero","getZeroUnit","potentialUnitType","getValueTransition","startAnimation","getAnimation","valueTransition","isTargetAnimatable","isOriginAnimatable","finalTarget","useInstantAnimation","inertia","bounceStiffness","bounceDamping","currentAnimation","isOutOfBounds","boundaryNearest","startSpring","boundary","heading","isTransitionDefined","when","_delay","delayChildren","staggerChildren","staggerDirection","convertTransitionToAnimationOptions","getDelayFromTransition","isNumericalString","isZeroValueString","addUniqueItem","arr","item","removeItem","SubscriptionManager","constructor","subscriptions","numSubscriptions","getSize","clear","isFloat","MotionValue","version","timeDelta","lastUpdated","updateSubscribers","velocityUpdateSubscribers","renderSubscribers","canTrackVelocity","updateAndNotify","postRender","scheduleVelocityCheck","velocityCheck","hasAnimated","onChange","subscription","clearListeners","onRenderRequest","attach","passiveEffect","getPrevious","Promise","stopAnimation","resolve","then","clearAnimation","isAnimating","destroy","motionValue","testValueType","dimensionValueTypes","findDimensionValueType","valueTypes","findValueType","resolveVariant","getCurrent","getVelocity$1","setTarget","makeTargetAnimatable","hasValue","getValue","addValue","setVariants","variantLabels","reversedLabels","variant","getVariant","variantChildren","checkTargetForNewValues","newValueKeys","numNewValues","targetValue","readValue","setBaseTarget","getOrigin","transitionOrigin","getOriginFromTransition","isWillChangeMotionValue","appearStoreId","optimizedAppearDataId","optimizedAppearDataAttribute","animateVisualElement","animations","animateVariant","resolvedDefinition","animateTarget","transitionOverride","getChildAnimations","forwardDelay","animateChildren","maxStaggerDuration","generateStaggerDuration","sortByTreeOrder","first","last","willChange","animationTypeState","getState","shouldBlockAnimation","protectedKeys","needsAnimating","shouldBlock","shouldReduceMotion","appearId","handoffOptimizedAppearAnimation","MotionAppearAnimations","animationId","currentTime","remove","sortNodePosition","variantPriorityOrder","Animate","Drag","Exit","reversePriorityOrder","numAnimationTypes","createTypeState","prevResolvedValues","createAnimationState","isInitialRender","buildResolvedTypeValues","changedActiveType","getVariantContext","removedKeys","encounteredKeys","removedVariantIndex","Infinity","typeState","propIsVariant","activeDelta","isInherited","manuallyAnimateOnMount","prevProp","variantDidChange","shouldAnimateType","definitionList","resolvedValues","allKeys","markToAnimate","fallbackAnimation","fallbackTarget","getBaseTarget","shouldAnimate","setAnimateFunction","makeAnimator","subscribe","safeToRemove","distance2D","xDelta","yDelta","PanSession","handlers","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","getPanInfo","history","isPanStarted","isDistancePastThreshold","onStart","onMove","handlePointerMove","transformPoint","buttons","handlePointerUp","end","onEnd","onSessionEnd","panInfo","initialInfo","onSessionStart","removeListeners","updateHandlers","subtractPoint","lastDevicePoint","timestampedPoint","lastPoint","time","calcLength","axis","isNear","maxDistance","calcAxisDelta","originPoint","translate","calcBoxDelta","calcRelativeAxis","relative","calcRelativeAxisPosition","calcRelativePosition","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","createAxisDelta","createDelta","createAxis","createBox","eachAxis","convertBoundingBoxToBox","isIdentityScale","hasScale","has2DTranslate","is2DTranslate","applyPointDelta","boxScale","scalePoint","applyAxisDelta","applyBoxDelta","box","snapToDefault","isInteger","translateAxis","transformAxis","transforms","scaleKey","originKey","axisOrigin","xKeys$1","yKeys$1","transformBox","measureViewportBox","transformBoxPoints","topLeft","bottomRight","elementDragControls","VisualElementDragControls","openGlobalLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","originEvent","snapToCursor","panSession","dragPropagation","onDragStart","resolveConstraints","isAnimationBlocked","getAxisMotionValue","measuredAxis","layoutBox","dragDirectionLock","onDirectionLock","onDrag","getCurrentDirection","lockThreshold","direction","updateAxis","getTransformPagePoint","onDragEnd","_point","shouldDrag","axisValue","applyConstraints","dragConstraints","prevConstraints","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","relativeConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","measurePageBox","rootProjectionNode","viewportBox","scroll","measuredConstraints","userConstraints","convertBoxToBoundingBox","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","startAxisValueAnimation","dragKey","externalMotionValue","scalePositionWithinConstraints","boxProgress","calcOrigin","sourceLength","targetLength","updateScroll","updateLayout","addListeners","stopPointerListener","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","onPan","onPanStart","onPanEnd","onPanSessionStart","hasPanEvents","dragControls","groupDragControls","isCSSVariable","cssVariableRegex","getVariableValue","depth","token","parseCSSVariable","exec","getComputedStyle","getPropertyValue","positionalKeys","isPositionalKey","hasPositionalKey","setAndResetVelocity","isNumOrPxType","getPosFromMatrix","matrix","pos","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","nonTranslationalTransformKeys","positionalValues","convertChangedValueTypes","changedKeys","originBbox","elementComputedStyle","display","setStaticValue","targetBbox","checkAndConvertChangedValueTypes","targetPositionalKeys","removedTransformValues","hasAttemptedToRemoveTransformValues","changedValueTypeKeys","toType","fromType","numKeyframes","fromIndex","removeNonTranslationalTransform","removedTransforms","scrollY","pageYOffset","convertedTarget","scrollTo","parseDomVariant","resolveCSSVariables","Element","prefersReducedMotion","hasReducedMotionListener","initPrefersReducedMotion","matchMedia","motionMediaQuery","setReducedMotionPreferences","matches","addListener","featureNames","numFeatures","propEventHandlers","VisualElement","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","triggerBuild","renderInstance","scheduleRender","baseTarget","initialValues","initialMotionValues","_props","removeFromVariantTree","addVariantChild","bindToMotionValue","_c","valueIsTransform","removeOnChange","latestValue","isTransformDirty","removeOnRenderRequest","other","sortInstanceNodePosition","renderedProps","isStrict","ProjectionNodeConstructor","layoutScroll","setOptions","alwaysMeasureLayout","animationType","initialPromotionConfig","build","measureInstanceViewportBox","getStaticValue","canMutate","makeTargetAnimatableFromInstance","on","updateMotionValuesFromProps","nextValue","prevValue","existingValue","removeValue","getClosestVariantNode","startAtParent","numVariantProps","variantProps","closestVariantNode","removeValueFromRenderState","readValueFromInstance","valueFromInitial","getBaseTargetFromProps","args","DOMVisualElement","compareDocumentPosition","isMounted","HTMLVisualElement","defaultType","computedStyle","SVGVisualElement","arguments","getAttribute","createDomVisualElement","pixelsToPercent","pixels","correctBorderRadius","correct","node","varToken","correctBoxShadow","treeScale","projectionDelta","original","containsCSSVariables","cssVariables","shadow","xScale","yScale","averageScale","cssVariable","MeasureLayoutWithContext","componentDidMount","layoutGroup","switchLayoutGroup","defaultScaleCorrectors","group","didUpdate","prevProps","layoutDependency","willUpdate","promote","relegate","getStack","members","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","deregister","applyTo","boxShadow","layoutFeatures","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","easeCrossfadeOut","copyAxisInto","originAxis","copyBoxInto","originBox","removePointDelta","removeAxisTransforms","sourceAxis","removeAxisDelta","relativeProgress","xKeys","yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","boxEquals","aspectRatio","NodeStack","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","animationValues","isUpdating","isLayoutDirty","crossfade","hide","exitAnimationComplete","_d","_e","resumingFrom","removeLeadSnapshot","buildProjectionTransform","latestTransform","xTranslate","yTranslate","elementScaleX","elementScaleY","compareByDepth","FlatTree","isDirty","transformAxes","id$1","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","elementId","isTreeAnimating","isProjectionDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","path","registerPotentialNode","notifyListeners","subscriptionManager","hasListeners","SVGElement","cancelDelay","resizeUnblockUpdate","finishAnimation","registerSharedNode","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","setAnimationOrigin","animationOptions","preRender","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","shouldNotifyListeners","prevTransformTemplateValue","updateSnapshot","updateWasBlocked","clearMeasurements","mountNodeEarly","resetTransformStyle","notifyLayoutUpdate","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","measure","prevLayout","layoutCorrected","phase","needsMeasurement","isRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","measuredBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","nodeBox","setTargetDelta","targetDelta","getLead","attemptToResolveRelativeTarget","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isShared","canSkip","pendingAnimation","applyTreeDeltas","treePath","isSharedTransition","treeLength","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","hasOpacityCrossfade","mixTargetDelta","mixAxisDelta","mixAxis","mixValues","follow","opacityExit","borderLabel","followRadius","leadRadius","canMix","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","xLength","yLength","stack","shouldPreserveFollowOpacity","getPrevLead","hasRotate","resetValues","styles","visibility","pointerEvents","emptyStyles","valuesToRender","corrected","num","resetTree","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","searchNode","searchElement","querySelector","DocumentProjectionNode","documentElement","scrollLeft","body","scrollTop","HTMLProjectionNode","documentNode","position","featureBundle","motion","m","useIsMounted","useForceUpdate","forcedRenderCount","setForcedRenderCount","useState","forceRender","deferredForceRender","PopChildMeasure","childRef","sizeRef","offsetHeight","offsetWidth","offsetTop","offsetLeft","PopChild","useInsertionEffect","dataset","motionPopId","head","appendChild","sheet","insertRule","removeChild","cloneElement","PresenceChild","presenceAffectsLayout","mode","presenceChildren","newChildrenMap","childId","_","getChildKey","DeprecatedLayoutGroupContext","shouldInheritGroup","shouldInheritId","LayoutGroup","inheritId","layoutGroupContext","deprecatedLayoutGroupContext","upstreamId","nodeGroup","dirtyAll","dirty","memoizedContext","isLazyBundle","ReorderContext","Group","as","onReorder","order","isReordering","registerItem","compareMin","updateOrder","newOrder","checkReorder","nextOffset","nextItem","nextLayout","nextItemCenter","moveItem","toIndex","startIndex","endIndex","useMotionValue","setLatest","isCustomValueType","getMixer","useImmediate","argOffset","inputValue","inputRange","outputRange","useCombineMotionValues","combineValues","cleanup","updateValue","unsubscribe","useTransform","inputRangeOrTransformer","useListTransform","useDefaultMotionValue","Item","latestX","latestY","gesturePoint","onLayoutMeasure","measured","domAnimation","domMax","createScrollMotionValues","scrollX","scrollXProgress","scrollYProgress","useScroll","container","layoutEffect","useLifecycleEffect","useAnimationFrame","initialTimestamp","provideTimeSinceStart","WillChangeMotionValue","memberName","useReducedMotion","animationControls","hasMounted","pendingAnimations","subscribers","controls","useAnimationControls","wrap","rangeSize","DragControls","componentControls","nativeEvent","createDragControls","isMotionComponent","component","startTransition","featureTests","waapi","results","supports","cubicBezierAsString","createObject","StateVisualElement","restoreTransform","_state","initialState","invertScale","hasWarned","AnimatePresence","exitBeforeEnter","forceRenderLayoutGroup","filteredChildren","onlyElements","filtered","Children","isValidElement","childrenToRender","exiting","presentChildren","allChildren","updateChildLookup","Fragment","presentKeys","targetKeys","numPresent","insertionIndex","removeIndex","presentChild","AnimateSharedLayout","LazyMotion","setIsLoaded","loadedRenderer","loadedFeatures","MotionConfig","Reorder","createDomMotionComponent","startOptimizedAppearAnimation","animateStyle","valueName","unwrapMotionComponent","useAnimation","useCycle","items","setItem","runCycle","useDeprecatedAnimatedState","setAnimationState","animationDefinition","useDeprecatedInvertedScale","parentScaleX","parentScaleY","useDragControls","useElementScroll","useInView","setInView","useInstantLayoutTransition","useInstantTransition","forceUpdate","startInstantLayoutTransition","useIsPresent","useMotionTemplate","fragments","numFragments","useReducedMotionConfig","reducedMotionPreference","useResetProjection","reset","useSpring","activeSpringAnimation","useTime","useVelocity","newVelocity","useViewportScroll","useWillChange"],"sourceRoot":""}