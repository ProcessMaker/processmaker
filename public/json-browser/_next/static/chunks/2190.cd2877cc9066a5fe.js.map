{"version":3,"file":"static/chunks/2190.cd2877cc9066a5fe.js","mappings":"8bAOAA,EAAAA,EAAMA,CAACC,MAAM,CAAC,CACZC,MAAO,CACLC,GAAI,oEACN,CACF,GAEA,IAAMC,EAAgB,CACpBC,cAAe,GACfC,aAAc,GACdC,QAAS,CACPC,QAAS,EACX,CACF,EAEMC,EAAgBC,EAAAA,EAAMA,CAACC,GAAG,CAAAC,UAAA,qCAOnBC,EAAe,KAC1B,IAAMC,EAASC,CAAAA,EAAAA,EAAAA,EAAAA,IACTC,EAAWC,CAAAA,EAAAA,EAAAA,CAAAA,EAAQC,GAASA,EAAMF,QAAQ,EAC1CG,EAAcF,CAAAA,EAAAA,EAAAA,CAAAA,EAAQC,GAASA,EAAMC,WAAW,EAChDC,EAAWH,CAAAA,EAAAA,EAAAA,CAAAA,EAAQC,GAASA,EAAME,QAAQ,EAC1CC,EAAaJ,CAAAA,EAAAA,EAAAA,CAAAA,EAAQC,GAASA,EAAMG,UAAU,EAC9CC,EAAgBL,CAAAA,EAAAA,EAAAA,CAAAA,EAAQC,GAASA,EAAMI,aAAa,EACpDC,EAAQC,CAAAA,EAAAA,EAAAA,CAAAA,EAAUN,GAAUA,EAAMO,SAAS,CAAG,QAAU,WACxDC,EAAWT,CAAAA,EAAAA,EAAAA,CAAAA,EAAQC,GAASA,EAAMS,MAAM,EAmC9C,OAjCAC,EAAAA,SAAe,CAAC,WACdd,GAAAA,EAAQe,SAAS,CAACC,IAAI,CAACC,YAAY,CAACC,qBAAqB,CAAC,CACxDC,SAAU,GACVC,cAAe,GACf,GAAIb,GAAc,CAChBc,QAAS,CACP,CACEC,UAAW,CAAC,IAAI,CAChBC,OAAQhB,CACV,EACD,CACF,EAEL,EAAG,CAACA,QAAYP,EAAAA,KAAAA,EAAAA,EAAQe,SAAS,CAACC,IAAI,CAACC,YAAY,CAAC,EAEpDH,EAAAA,SAAe,CAAC,KACd,IAAMU,EAAe,IACnB,GAAIhB,IAAiB,CACnB,IAAMiB,EACJ,yEAGF,MADCC,CAAAA,GAAKC,OAAOC,KAAK,EAAEC,WAAW,CAAGJ,EAC3BA,CACT,CACF,EAIA,OAFAE,OAAOG,gBAAgB,CAAC,eAAgBN,GAEjC,KACLG,OAAOI,mBAAmB,CAAC,eAAgBP,EAC7C,CACF,EAAG,CAAChB,EAAc,EAGhB,GAAAwB,EAAAC,GAAA,EAACtC,EAAAA,UACC,GAAAqC,EAAAC,GAAA,EAACC,EAAAA,EAAMA,CAAAA,CACLC,OAAO,OACPC,SAAUxB,EACVH,MAAOA,EACP4B,MAAOnC,EACPoC,QAAShD,EACTiD,WAAYC,QAAmBA,SAATlC,EAAAA,OAASkC,CAAAA,EAAAA,CAAM,CAAC,EAAE,GAATA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAWC,OAAO,GACjDC,SAAUxC,GAAYG,EAAY,CAAEH,SAAAA,EAAUyC,WAAY,EAAK,GAC/DC,QAAS,GAAAZ,EAAAC,GAAA,EAACY,EAAAA,CAAOA,CAAAA,CAACJ,QAAQ,yBAIlC,yJCjFA,IAAMK,EAAsBlD,EAAAA,EAAMA,CAACC,GAAG,CAAAC,UAAA,qCAOzBiD,EAAuB,IAEhC,GAAAf,EAAAC,GAAA,EAACa,EAAAA,UACC,GAAAd,EAAAC,GAAA,EAAClC,EAAYA,CAAAA,KAKnB,IAAAiD,EAAeD","sources":["webpack://_N_E/./src/components/MonacoEditor/index.tsx","webpack://_N_E/./src/containers/Editor/JsonEditor/index.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport Editor, { loader, useMonaco } from \"@monaco-editor/react\";\nimport { Loading } from \"src/layout/Loading\";\nimport useFile from \"src/store/useFile\";\nimport useStored from \"src/store/useStored\";\n\nloader.config({\n  paths: {\n    vs: \"https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.34.0/min/vs\",\n  },\n});\n\nconst editorOptions = {\n  formatOnPaste: true,\n  formatOnType: true,\n  minimap: {\n    enabled: false,\n  },\n};\n\nconst StyledWrapper = styled.div`\n  display: grid;\n  height: calc(100vh - 63px);\n  grid-template-columns: 100%;\n  grid-template-rows: minmax(0, 1fr);\n`;\n\nexport const MonacoEditor = () => {\n  const monaco = useMonaco();\n  const contents = useFile(state => state.contents);\n  const setContents = useFile(state => state.setContents);\n  const setError = useFile(state => state.setError);\n  const jsonSchema = useFile(state => state.jsonSchema);\n  const getHasChanges = useFile(state => state.getHasChanges);\n  const theme = useStored(state => (state.lightmode ? \"light\" : \"vs-dark\"));\n  const fileType = useFile(state => state.format);\n\n  React.useEffect(() => {\n    monaco?.languages.json.jsonDefaults.setDiagnosticsOptions({\n      validate: true,\n      allowComments: true,\n      ...(jsonSchema && {\n        schemas: [\n          {\n            fileMatch: [\"*\"],\n            schema: jsonSchema,\n          },\n        ],\n      }),\n    });\n  }, [jsonSchema, monaco?.languages.json.jsonDefaults]);\n\n  React.useEffect(() => {\n    const beforeunload = (e: BeforeUnloadEvent) => {\n      if (getHasChanges()) {\n        const confirmationMessage =\n          \"Unsaved changes, if you leave before saving  your changes will be lost\";\n\n        (e || window.event).returnValue = confirmationMessage; //Gecko + IE\n        return confirmationMessage;\n      }\n    };\n\n    window.addEventListener(\"beforeunload\", beforeunload);\n\n    return () => {\n      window.removeEventListener(\"beforeunload\", beforeunload);\n    };\n  }, [getHasChanges]);\n\n  return (\n    <StyledWrapper>\n      <Editor\n        height=\"100%\"\n        language={fileType}\n        theme={theme}\n        value={contents}\n        options={editorOptions}\n        onValidate={errors => setError(errors[0]?.message)}\n        onChange={contents => setContents({ contents, skipUpdate: true })}\n        loading={<Loading message=\"Loading Editor...\" />}\n      />\n    </StyledWrapper>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { MonacoEditor } from \"src/components/MonacoEditor\";\n\nconst StyledEditorWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  user-select: none;\n`;\n\nexport const JsonEditor: React.FC = () => {\n  return (\n    <StyledEditorWrapper>\n      <MonacoEditor />\n    </StyledEditorWrapper>\n  );\n};\n\nexport default JsonEditor;\n"],"names":["loader","config","paths","vs","editorOptions","formatOnPaste","formatOnType","minimap","enabled","StyledWrapper","styled","div","withConfig","MonacoEditor","monaco","useMonaco","contents","useFile","state","setContents","setError","jsonSchema","getHasChanges","theme","useStored","lightmode","fileType","format","React","languages","json","jsonDefaults","setDiagnosticsOptions","validate","allowComments","schemas","fileMatch","schema","beforeunload","confirmationMessage","e","window","event","returnValue","addEventListener","removeEventListener","jsx_runtime","jsx","Editor","height","language","value","options","onValidate","errors","message","onChange","skipUpdate","loading","Loading","StyledEditorWrapper","JsonEditor","Editor_JsonEditor"],"sourceRoot":""}