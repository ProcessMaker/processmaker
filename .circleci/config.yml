# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    resource_class: xlarge
    docker:
      # specify the version you desire here
      - image: circleci/php:7.4.0-fpm-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/mysql:5.7-ram
        environment:
          MYSQL_ROOT_PASSWORD: P4ssW0rd1!
          MYSQL_DATABASE: circle_test

      # Add support for Microsoft SQL Server Testing
      - image: microsoft/mssql-server-linux:2017-GA
        environment:
          # Needed for MS SQL Docker install
          ACCEPT_EULA: 'Y'
          SA_PASSWORD: 'P4ssW0rd1!'

    working_directory: ~/repo

    steps:
      - run:
          name: Install node@14.4.0
          command: |
            set +e             
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
            echo 'nvm install v14.4.0' >> $BASH_ENV
      - run:
          name: Set Build Name Environment Variable
          # Set BUILD_NAME environment variable to a filesystem friendly name and store it in our bash environment
          command: |
            echo 'export BUILD_NAME=$(echo "$CIRCLE_BRANCH" | tr /. - | tr "[:upper:]" "[:lower:]")' >> $BASH_ENV
            echo 'export QA_DB_NAME=$(echo "processmaker$CIRCLE_BRANCH" | tr -d /.-)' >> $BASH_ENV
            echo 'export QA_DATA_DB_NAME=$(echo "processmaker_data$CIRCLE_BRANCH" | tr -d /.-)' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: QA Host SSH Host Identifier Import
          command: |
            mkdir ~/.ssh
            echo $BUILDBOT_HOST_IDENTIFIER >> ~/.ssh/known_hosts
            echo $QA_PROCESSMAKERBUILDS_HOST_IDENTIFIER	>> ~/.ssh/known_hosts
            chmod 0600 ~/.ssh/known_hosts
      - checkout

      # Install PHP dependencies
      - run: sudo apt-get update && sudo apt install -y libpng-dev libzip-dev default-libmysqlclient-dev curl apt-transport-https
      - run: sudo docker-php-ext-install gd zip pdo_mysql mysqli
      - run: sudo apt-get install -y libfreetype6-dev libjpeg62-turbo-dev libpng-dev
      - run: sudo docker-php-ext-install -j$(nproc) iconv
      - run: sudo docker-php-ext-configure gd --enable-gd --with-freetype --with-jpeg
      - run: sudo docker-php-ext-install -j$(nproc) gd
      - run: sudo docker-php-ext-install -j$(nproc) pcntl
      - run: sudo docker-php-ext-install -j$(nproc) exif
      - run: sudo docker-php-ext-install -j$(nproc) bcmath

      # Install MS SQL PDO Extension dependency
      - run:
          name: 'MS SQL Extension Installation'
          command: |
            sudo curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
            sudo sh  -c 'curl https://packages.microsoft.com/config/debian/8/prod.list > /etc/apt/sources.list.d/mssql-release.list'
            sudo apt-get install -y locales
            sudo sh -c 'echo "en_US.UTF-8 UTF-8" > /etc/locale.gen'
            sudo locale-gen
            sudo apt-get update
            sudo ACCEPT_EULA=Y apt-get install msodbcsql17
            sudo apt-get install unixodbc-dev
            sudo pecl install sqlsrv
            sudo pecl install pdo_sqlsrv
            sudo docker-php-ext-enable sqlsrv pdo_sqlsrv
      # Install old libssl-1.0.0 due to ODBC13 issue. See: https://github.com/Microsoft/msphpsql/issues/484
      - run:
          name: 'ODBC13 libssl workaround'
          command: |
            echo "deb http://deb.debian.org/debian jessie main" | sudo tee -a /etc/apt/sources.list
            sudo apt-get update
            sudo apt-get install libssl1.0.0
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - restore_cache:
          keys:
            - v1-npm-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-npm-dependencies-

      - run: composer install -n --prefer-dist

      - run:
          name: 'Clear cached configuration'
          command: |
            sudo php artisan config:clear

      - run:
          name: 'Publish Laravel Telescope assets'
          command: |
            sudo php artisan vendor:publish --tag=telescope-assets --force

      - run: npm ci

      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}

      # Enable xdebug to support code coverage
      #- run: sudo docker-php-ext-enable xdebug
      
      - setup_remote_docker:
          docker_layer_caching: true

      # - run:
      #     name: setup SDKs
      #     command: |
      #       php artisan l5:generate
      #       mkdir -p /tmp/processmaker-sdk-php
      #       php artisan processmaker:sdk php /tmp/processmaker-sdk-php
      #       mkdir -p /tmp/processmaker-sdk-node
      #       php artisan processmaker:sdk javascript /tmp/processmaker-sdk-node
      #       mkdir -p /tmp/processmaker-sdk-lua
      #       php artisan processmaker:sdk lua /tmp/processmaker-sdk-lua
      # - run:
      #     name: Configure scripts executor
      #     command: |
      #       docker pull processmaker4/executor-php:latest
      #       docker pull processmaker4/executor-lua:latest
      #       docker pull processmaker4/executor-node:latest
      #       docker pull jbergknoff/sass:latest
      #       sudo mkdir -m777 /opt/executor
      #- run: sudo docker-php-ext-enable xdebug

      # Build frontend assets for production
      - run:
          name: 'Front-End Asset Build'
          command: 'npm run dev'

      #
      - run:
          name: 'Media Storage Link'
          command: 'php artisan storage:link'

      # run tests!
      - run:
          name: 'PHPUnit'
          command: './vendor/bin/phpunit -v -d memory_limit=-1 --coverage-html ./tests/coverage-report'
          environment:
            DB_DATABASE: 'circle_test'
            DB_PASSWORD: 'P4ssW0rd1!'
            DB_USERNAME: 'root'
            DATA_DB_DRIVER: 'sqlsrv'
            DATA_DB_HOST: '127.0.0.1'
            DATA_DB_PORT: '1433'
            DATA_DB_DATABASE: 'test'
            DATA_DB_USERNAME: 'sa'
            DATA_DB_PASSWORD: 'P4ssW0rd1!'
            RUN_MSSQL_TESTS: 'true'
            MSSQL_HOST: '127.0.0.1'
            MSSQL_PORT: '1433'
            MSSQL_DATABASE: 'test'
            MSSQL_USERNAME: 'sa'
            MSSQL_PASSWORD: 'P4ssW0rd1!'
            PROCESSMAKER_SCRIPTS_HOME: '/tmp'
            PROCESSMAKER_SCRIPTS_DOCKER_MODE: 'copying'
            TELESCOPE_ENABLED: 'false'
      - run:
          name: 'Jest'
          command: 'npm run test'

      - store_test_results:
          path: tests/coverage-report
      - store_artifacts:
          path: tests/coverage-report

      #- store_artifacts:
      #    path: tests/js/coverage

      # Prepare for packaging for QA environment

      - run:
          name: 'QA Configuration File Build'
          command: |
            echo "APP_KEY=" >> .env
            echo "APP_DEBUG=FALSE" >> .env
            echo "DEBUGBAR_ENABLED=FALSE" >> .env
            echo "APP_NAME=ProcessMaker" >> .env
            echo "APP_ENV=staging" >> .env
            echo "DB_HOSTNAME=${QA_RDS_HOST}" >> .env
            echo "DB_DATABASE=${QA_DB_NAME}" >> .env
            echo "DB_USERNAME=${QA_RDS_USERNAME}" >> .env
            echo "DB_PASSWORD=${QA_RDS_PASSWORD}" >> .env
            echo "DATA_DB_DRIVER=mysql" >> .env
            echo "DATA_DB_HOST=${QA_RDS_HOST}" >> .env
            echo "DATA_DB_DATABASE=${QA_DATA_DB_NAME}" >> .env
            echo "DATA_DB_PORT=3306" >> .env
            echo "DATA_DB_USERNAME=${QA_RDS_USERNAME}" >> .env
            echo "DATA_DB_PASSWORD=${QA_RDS_PASSWORD}" >> .env
            echo "APP_URL=https://${BUILD_NAME}${QA_HOST_SUFFIX}" >> .env
            echo "PROXIES=*" >> .env
            echo "PROXIES_AWS=true" >> .env
            # Put in configuration file for Broadcaster
            echo "BROADCAST_DRIVER=redis" >> .env
            echo "BROADCASTER_HOST=%%BROADCASTER_HOST%%" >> .env
            echo "BROADCASTER_KEY=21a795019957dde6bcd96142e05d4b10" >> .env
            echo "REDIS_PORT=%%REDISPORT%%" >> .env
            echo "PROCESSMAKER_SCRIPTS_HOME=/home/circleci/tmp" >> .env
            echo "HOME=/home/circleci" >> .env
            echo "LARAVEL_ECHO_SERVER_AUTH_HOST=%%AUTHHOST%%" >> .env
            echo "LARAVEL_ECHO_SERVER_PORT=%%ECHOPORT%%" >> .env
            echo "LARAVEL_ECHO_SERVER_DEBUG=true" >> .env
            echo "APP_KEY=" >> .env.dusk.staging
            echo "APP_DEBUG=FALSE" >> .env.dusk.staging
            echo "APP_NAME=ProcessMaker" >> .env.dusk.staging
            echo "APP_ENV=staging" >> .env.dusk.staging
            echo "DB_HOSTNAME=${QA_RDS_HOST}" >> .env.dusk.staging
            echo "DB_DATABASE=${QA_DB_NAME}" >> .env.dusk.staging
            echo "DB_USERNAME=${QA_RDS_USERNAME}" >> .env.dusk.staging
            echo "DB_PASSWORD=${QA_RDS_PASSWORD}" >> .env.dusk.staging
            echo "DATA_DB_DRIVER=mysql" >> .env.dusk.staging
            echo "DATA_DB_HOST=${QA_RDS_HOST}" >> .env.dusk.staging
            echo "DATA_DB_DATABASE=${QA_DATA_DB_NAME}" >> .env.dusk.staging
            echo "DATA_DB_PORT=3306" >> .env.dusk.staging
            echo "DATA_DB_USERNAME=${QA_RDS_USERNAME}" >> .env.dusk.staging
            echo "DATA_DB_PASSWORD=${QA_RDS_PASSWORD}" >> .env.dusk.staging
            echo "APP_URL=https://dusk-${BUILD_NAME}${QA_HOST_SUFFIX}" >> .env.dusk.staging
            # Put in configuration for SauceLabs Cloud based Browser Testing
            echo "SAUCELABS_BROWSER_TESTING=true" >> .env.dusk.staging
            echo "SAUCELABS_USERNAME=${SAUCELABS_USERNAME}" >> .env.dusk.staging
            echo "SAUCELABS_ACCESS_KEY=${SAUCELABS_ACCESS_KEY}" >> .env.dusk.staging
            # Put in configuration file for Broadcaster
            echo "BROADCAST_DRIVER=redis" >> .env.dusk.staging
            echo "BROADCASTER_HOST=%%BROADCASTER_HOST%%" >> .env.dusk.staging
            echo "BROADCASTER_KEY=21a795019957dde6bcd96142e05d4b10" >> .env.dusk.staging
            echo "REDIS_PORT=%%REDISPORT%%" >> .env.dusk.staging
            echo "PROCESSMAKER_SCRIPTS_HOME=/home/circleci/tmp" >> .env.dusk.staging
            echo "HOME=/home/circleci" >> .env.dusk.staging
            echo "LARAVEL_ECHO_SERVER_AUTH_HOST=%%AUTHHOST%%" >> .env.dusk.staging
            echo "LARAVEL_ECHO_SERVER_PORT=%%ECHOPORT%%" >> .env.dusk.staging
            echo "LARAVEL_ECHO_SERVER_DEBUG=true" >> .env.dusk.staging
            echo "TELESCOPE_ENABLED=false" >> .env.dusk.staging
            # Generate unique app key
            php artisan key:generate --force
            # Copy over our test oauth keys. Regular install will create new ones
            cp tests/storage/keys/* storage/keys/

      - run:
          name: 'QA Package'
          command: './vendor/bin/phing package -Dpackage_name=processmaker-qa-${BUILD_NAME}.tar.gz'

      - run:
          name: 'QA Deploy'
          command: |
            # Delete existing target QA directory, if it exists
            ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "rm -Rf ~/builds/$BUILD_NAME"
            # Create new target QA directory
            ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "mkdir ~/builds/$BUILD_NAME"
            # Copy over packaged qa deployment
            scp -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" ./processmaker-qa-$BUILD_NAME.tar.gz qa-processmakerbuilds:~/builds/$BUILD_NAME/
            # Extract to qa deployment dir
            ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "tar zxf ~/builds/$BUILD_NAME/processmaker-qa-$BUILD_NAME.tar.gz -C ~/builds/$BUILD_NAME/"
            # Restart nginx and php-fpm to clear cache
            ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "sudo service nginx restart"
            ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "sudo service php-fpm restart"
            # Create MYSQL Database
            ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "mysql -h ${QA_RDS_HOST} -u ${QA_RDS_USERNAME} -p${QA_RDS_PASSWORD} -e \"CREATE DATABASE IF NOT EXISTS ${QA_DB_NAME}\""
            ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "mysql -h ${QA_RDS_HOST} -u ${QA_RDS_USERNAME} -p${QA_RDS_PASSWORD} -e \"CREATE DATABASE IF NOT EXISTS ${QA_DATA_DB_NAME}\""
            # Run php artisan migrate:fresh --seed to have a clean installed database in RDS
            ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "php ~/builds/$BUILD_NAME/artisan migrate:fresh --seed --force"
            # Setup Media Link
            ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "rm -Rf ~/builds/$BUILD_NAME/public/storage"
            ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "php ~/builds/$BUILD_NAME/artisan storage:link"
            echo "Deployed to https://${BUILD_NAME}.processmaker.qa.processmaker.net/"
            # Run containerDeploy.sh script to spin up redis docker container, laravel-echo-server, and horizon.
            ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "sudo /bin/bash /root/cloudops/containerDeploy.sh $BUILD_NAME"
            # Generate Passport Keys
            ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "cd ~/builds/$BUILD_NAME && php artisan passport:keys"

      - run:
          name: 'Preparing the dusk test with SauceLabs'
          command: |
            ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "sudo rm -rf ~/builds/dusk-$BUILD_NAME "
            ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "sudo cp -rp ~/builds/$BUILD_NAME ~/builds/dusk-$BUILD_NAME "
            ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "sudo service nginx restart"
            ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "sudo service php-fpm restart"
      - run:
          name: 'SauceLabs Browser Tests: Chrome'
          command: 'ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "cd ~/builds/$BUILD_NAME && php artisan dusk"'
          environment:
            DB_DATABASE: 'circle_test'
            RUN_MSSQL_TESTS: 'true'
            MSSQL_HOST: '127.0.0.1'

      - run:
          name: 'SauceLabs Browser Tests: Firefox'
          command: 'ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "cd ~/builds/$BUILD_NAME && php ~/builds/$BUILD_NAME/artisan dusk"'
          environment:
            SAUCELABS_BROWSER: 'firefox'
            SAUCELABS_PLATFORM: 'Windows 10'
            SAUCELABS_BROWSER_VERSION: '47.0'

      - run:
          name: 'SauceLabs Browser Tests: Edge'
          command: 'ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "cd ~/builds/$BUILD_NAME && php ~/builds/$BUILD_NAME/artisan dusk"'
          environment:
            SAUCELABS_BROWSER: 'MicrosoftEdge'
            SAUCELABS_PLATFORM: 'Windows 10'
            SAUCELABS_BROWSER_VERSION: '16.16299'

      - run:
          name: 'SauceLabs Browser Tests: Safari'
          command: 'ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "cd ~/builds/$BUILD_NAME && php ~/builds/$BUILD_NAME/artisan dusk"'
          environment:
            SAUCELABS_BROWSER: 'safari'
            SAUCELABS_PLATFORM: 'macOS 10.13'
            SAUCELABS_BROWSER_VERSION: '11.0'

      - run:
          name: 'Remove the files created'
          command: |
            ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "sudo rm -rf ~/builds/dusk-$BUILD_NAME "

      - run:
          name: 'Final QA Artisan DB Migration'
          command: 'ssh -o "StrictHostKeyChecking no" -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-processmakerbuilds "php ~/builds/$BUILD_NAME/artisan migrate:fresh --seed --force"'