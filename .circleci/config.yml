# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    resource_class: xlarge
    docker:
      # specify the version you desire here
      - image: circleci/php:7.2.8-fpm-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/mysql:5.7

      # Add support for Microsoft SQL Server Testing
      - image: microsoft/mssql-server-linux:2017-GA
        environment:
          # Needed for MS SQL Docker install
          - ACCEPT_EULA: "Y"
          - SA_PASSWORD: "P4ssW0rd1!"

    working_directory: ~/repo

    steps:
      - run:
          name: Set Build Name Environment Variable
          # Set BUILD_NAME environment variable to a filesystem friendly name and store it in our bash environment
          command: |
            echo 'export BUILD_NAME=$(echo "$CIRCLE_BRANCH" | tr /. -)' >> $BASH_ENV
            echo 'export QA_DB_NAME=$(echo "bpm4$CIRCLE_BRANCH" | tr -d /.-)' >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: QA Host SSH Host Identifier Import
          command: |
            mkdir ~/.ssh
            echo $BUILDBOT_HOST_IDENTIFIER >> ~/.ssh/known_hosts
            echo $QA_PM4BUILDS_HOST_IDENTIFIER	>> ~/.ssh/known_hosts
            chmod 0600 ~/.ssh/known_hosts

      - checkout

      # Install PHP dependencies
      - run: sudo apt install -y libpng-dev libzip-dev default-libmysqlclient-dev curl apt-transport-https
      - run: sudo docker-php-ext-install gd zip pdo_mysql mysqli
      - run: sudo apt-get install -y libfreetype6-dev libjpeg62-turbo-dev libpng-dev
      - run: sudo docker-php-ext-install -j$(nproc) iconv
      - run: sudo docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/
      - run: sudo docker-php-ext-install -j$(nproc) gd
      - run: sudo docker-php-ext-install -j$(nproc) pcntl

      # Install MS SQL PDO Extension dependency
      - run:
          name: "MS SQL Extension Installation"
          command: |
            sudo curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
            sudo sh  -c 'curl https://packages.microsoft.com/config/debian/8/prod.list > /etc/apt/sources.list.d/mssql-release.list'
            sudo apt-get install -y locales
            sudo sh -c 'echo "en_US.UTF-8 UTF-8" > /etc/locale.gen'
            sudo locale-gen
            sudo apt-get update
            sudo ACCEPT_EULA=Y apt-get install msodbcsql
            sudo apt-get install unixodbc-dev
            sudo pecl install sqlsrv
            sudo pecl install pdo_sqlsrv
            sudo docker-php-ext-enable sqlsrv pdo_sqlsrv

      # Install old libssl-1.0.0 due to ODBC13 issue. See: https://github.com/Microsoft/msphpsql/issues/484
      - run:
          name: "ODBC13 libssl workaround"
          command: |
            echo "deb http://deb.debian.org/debian jessie main" | sudo tee -a /etc/apt/sources.list
            sudo apt-get update
            sudo apt-get install libssl1.0.0

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - restore_cache:
          keys:
          - v1-npm-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-npm-dependencies-

      - run: composer install -n --prefer-dist

      - run: npm install

      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}

      # Enable xdebug to support code coverage
      - run: sudo docker-php-ext-enable xdebug

      - setup_remote_docker

      - run:
          name: Configure scripts executor
          command: |
            docker pull processmaker/executor:php
            docker pull processmaker/executor:lua
            sudo mkdir -m777 /opt/executor

      - run: sudo docker-php-ext-enable xdebug

      # Build frontend assets for production
      - run:
          name: "Front-End Asset Build"
          command: "npm run dev"

      #
      - run:
          name: "Media Storage Link"
          command: "php artisan storage:link"

      # run tests!
      - run:
          name: "PHPUnit"
          command: "./vendor/bin/phpunit -d memory_limit=-1 --coverage-html coverage"
          environment:
            DB_DATABASE: "circle_test"
            RUN_MSSQL_TESTS: "true"
            MSSQL_HOST: "127.0.0.1"
            MSSQL_PORT: "1433"
            MSSQL_DATABASE: "test"
            MSSQL_USERNAME: "sa"
            MSSQL_PASSWORD: "P4ssW0rd1!"
      - run:
          name: "Jest"
          command: "npm run test"

      - store_artifacts:
          path: coverage

      - store_artifacts:
          path: tests/js/coverage

      # Prepare for packaging for QA environment

      - run:
          name: "QA Configuration File Build"
          command: |
            echo "APP_KEY=" >> .env
            echo "APP_DEBUG=TRUE" >> .env
            echo "APP_NAME=ProcessMaker" >> .env
            echo "APP_ENV=staging" >> .env
            echo "DB_HOST=${QA_RDS_HOST}" >> .env
            echo "DB_DATABASE=${QA_DB_NAME}" >> .env
            echo "DB_USERNAME=${QA_RDS_USERNAME}" >> .env
            echo "DB_PASSWORD=${QA_RDS_PASSWORD}" >> .env
            echo "APP_URL=https://${BUILD_NAME}${QA_HOST_SUFFIX}" >> .env
            echo "PROXIES=*" >> .env
            echo "PROXIES_AWS=true" >> .env
            # Put in configuration for SauceLabs Cloud based Browser Testing
            echo "SAUCELABS_BROWSER_TESTING=true" >> .env
            echo "SAUCELABS_USERNAME=${SAUCELABS_USERNAME}" >> .env
            echo "SAUCELABS_ACCESS_KEY=${SAUCELABS_ACCESS_KEY}" >> .env
            # Put in configuration file for Braoodcaster
            echo "BROADCAST_DRIVER=redis" >> .env
            echo "BROADCASTER_HOST=https://" >> .env
            echo "BROADCASTER_KEY=21a795019957dde6bcd96142e05d4b10" >> .env

            # Generate unique app key
            php artisan key:generate --force
            # Copy over our test oauth keys. Regular install will create new ones
            cp tests/storage/keys/* storage/keys/

      - run:
          name: "QA Package"
          command: "./vendor/bin/phing package -Dpackage_name=processmaker-qa-${BUILD_NAME}.tar.gz"

      - run:
          name: "QA Deploy"
          command: |
            # Delete existing target QA directory, if it exists
            ssh -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-pm4builds "rm -Rf ~/builds/$BUILD_NAME"
            # Create new target QA directory
            ssh -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-pm4builds "mkdir ~/builds/$BUILD_NAME"
            # Copy over packaged qa deployment
            scp -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" ./processmaker-qa-$BUILD_NAME.tar.gz qa-pm4builds:~/builds/$BUILD_NAME/
            # Extract to qa deployment dir
            ssh -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-pm4builds "tar zxf ~/builds/$BUILD_NAME/processmaker-qa-$BUILD_NAME.tar.gz -C ~/builds/$BUILD_NAME/"
            # Restart nginx and php-fpm to clear cache
            ssh -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-pm4builds "sudo service nginx restart"
            ssh -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-pm4builds "sudo service php-fpm restart"
            # Create MYSQL Database
            ssh -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-pm4builds "mysql -h ${QA_RDS_HOST} -u ${QA_RDS_USERNAME} -p${QA_RDS_PASSWORD} -e \"CREATE DATABASE IF NOT EXISTS ${QA_DB_NAME}\""
            # Run php artisan migrate:fresh --seed to have a clean installed database in RDS
            ssh -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-pm4builds "php ~/builds/$BUILD_NAME/artisan migrate:fresh --seed --force"
            # Setup Media Link
            ssh -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-pm4builds "rm -Rf ~/builds/$BUILD_NAME/public/storage"
            ssh -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-pm4builds "php ~/builds/$BUILD_NAME/artisan storage:link"
            echo "Deployed to https://${BUILD_NAME}.bpm4.qa.processmaker.net/"
            # Run containerDeploy.sh script to spin up Redis docker container, laravel-echo-server, and horizon
            ssh -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-pm4builds "sudo /bin/bash /root/cloudops/containerDeploy.sh $BUILD_NAME"
            # Generate Passport Keys
            ssh -o "ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p" qa-pm4builds "cd ~/builds/$BUILD_NAME && php artisan passport:keys"
            
      #- run:
      #    name: "SauceLabs Browser Tests: Chrome"
      #    command: "ssh -o \"ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p\" qa-pm4builds \"cd ~/builds/$BUILD_NAME && php artisan dusk\""
      #    environment:
      #      DB_DATABASE: "circle_test"
      #      RUN_MSSQL_TESTS: "true"
      #      MSSQL_HOST: "127.0.0.1"

      #- run:
      #    name: "SauceLabs Browser Tests: Firefox"
      #    command: "ssh -o \"ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p\" qa-pm4builds \"cd ~/builds/$BUILD_NAME && php ~/builds/$BUILD_NAME/artisan dusk\""
      #    environment:
      #      SAUCELABS_BROWSER: "firefox"
      #      SAUCELABS_PLATFORM: "Windows 10"
      #      SAUCELABS_BROWSER_VERSION: "47.0"

      #- run:
      #    name: "SauceLabs Browser Tests: Edge"
      #    command: "ssh -o \"ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p\" qa-pm4builds \"cd ~/builds/$BUILD_NAME && php ~/builds/$BUILD_NAME/artisan dusk\""
      #    environment:
      #      SAUCELABS_BROWSER: "MicrosoftEdge"
      #      SAUCELABS_PLATFORM: "Windows 10"
      #      SAUCELABS_BROWSER_VERSION: "16.16299"

      #- run:
      #    name: "SauceLabs Browser Tests: Safari"
      #    command: "ssh -o \"ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p\" qa-pm4builds \"cd ~/builds/$BUILD_NAME && php ~/builds/$BUILD_NAME/artisan dusk\""
      #    environment:
      #      SAUCELABS_BROWSER: "safari"
      #      SAUCELABS_PLATFORM: "macOS 10.13"
      #      SAUCELABS_BROWSER_VERSION: "11.0"

      - run:
          name: "Final QA Artisan DB Migration"
          command: "ssh -o \"ProxyCommand ssh buildbot.processmaker.net -A -W %h:%p\" qa-pm4builds \"php ~/builds/$BUILD_NAME/artisan migrate:fresh --seed --force\""
